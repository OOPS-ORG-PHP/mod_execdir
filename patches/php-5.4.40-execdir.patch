diff -urNp php-5.4.40.org/configure php-5.4.40/configure
--- php-5.4.40.org/configure	2015-04-15 13:20:29.000000000 +0900
+++ php-5.4.40/configure	2016-06-18 05:36:45.268125188 +0900
@@ -20393,6 +20393,45 @@ $as_echo "$PHP_CONFIG_FILE_SCAN_DIR" >&6
 test -n "$DEBUG_CFLAGS" && CFLAGS="$CFLAGS $DEBUG_CFLAGS"
 
 
+echo $ac_n "checking for safe mode exec dir""... $ac_c" 1>&6
+echo "configure:20296: checking for safe mode exec dir" >&5
+
+php_with_exec_dir=no
+
+
+# Check whether --with-exec-dir or --without-exec-dir was given.
+if test "${with_exec_dir+set}" = set; then
+  withval="$with_exec_dir"
+  PHP_EXEC_DIR=$withval
+else
+
+  PHP_EXEC_DIR=no
+
+
+fi
+
+
+ext_output=$PHP_EXEC_DIR
+
+
+
+
+
+if test "$PHP_EXEC_DIR" != "no" && test "$PHP_EXEC_DIR" != "yes" ; then
+  cat >> confdefs.h <<EOF
+#define PHP_EXEC_DIR "$PHP_EXEC_DIR"
+EOF
+
+  echo "$ac_t""$PHP_EXEC_DIR" 1>&6
+else
+  cat >> confdefs.h <<\EOF
+#define PHP_EXEC_DIR "/usr/local/php/bin"
+EOF
+
+  echo "$ac_t""/usr/local/php/bin" 1>&6
+fi
+
+
 php_enable_sigchild=no
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether to enable PHP's own SIGCHLD handler" >&5
diff -urNp php-5.4.40.org/configure.in php-5.4.40/configure.in
--- php-5.4.40.org/configure.in	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/configure.in	2016-06-18 05:36:45.272125406 +0900
@@ -900,6 +900,19 @@ AC_MSG_RESULT([$PHP_CONFIG_FILE_SCAN_DIR
 
 test -n "$DEBUG_CFLAGS" && CFLAGS="$CFLAGS $DEBUG_CFLAGS"
 
+AC_MSG_CHECKING([for exec dir])
+PHP_ARG_WITH(exec-dir,,
+[  --with-exec-dir[=DIR]   Only allow executables in DIR
+                          [/var/lib/php/bin]], no, no)
+
+if test "$PHP_EXEC_DIR" != "no" && test "$PHP_EXEC_DIR" != "yes" ; then
+	AC_DEFINE_UNQUOTED(PHP_EXEC_DIR, "$PHP_EXEC_DIR", [ ])
+	AC_MSG_RESULT([$PHP_EXEC_DIR])
+else
+	AC_DEFINE(PHP_EXEC_DIR, "/var/lib/php/bin", [ ])
+	AC_MSG_RESULT([/var/lib/php/bin])
+fi
+
 PHP_ARG_ENABLE(sigchild, whether to enable PHP's own SIGCHLD handler,
 [  --enable-sigchild       Enable PHP's own SIGCHLD handler], no, no)
 
diff -urNp php-5.4.40.org/ext/pcntl/pcntl.c php-5.4.40/ext/pcntl/pcntl.c
--- php-5.4.40.org/ext/pcntl/pcntl.c	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/ext/pcntl/pcntl.c	2016-06-18 05:36:45.273125460 +0900
@@ -46,6 +46,9 @@
 
 #include <errno.h>
 
+// from ext/standard/exec.c
+char *get_jailed_shell_cmd (char *);
+
 ZEND_DECLARE_MODULE_GLOBALS(pcntl)
 static PHP_GINIT_FUNCTION(pcntl);
 
@@ -751,13 +754,18 @@ PHP_FUNCTION(pcntl_exec)
 	int pair_length;
 	char *key;
 	uint key_length;
-	char *path;
+	char *path, *jpath = NULL;
 	int path_len;
 	ulong key_num;
 		
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|aa", &path, &path_len, &args, &envs) == FAILURE) {
 		return;
 	}
+
+	if (strlen(path) != path_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can not use '\\0' character on command");
+		RETURN_FALSE;
+	}
 	
 	if (ZEND_NUM_ARGS() > 1) {
 		/* Build argument list */
@@ -780,6 +788,8 @@ PHP_FUNCTION(pcntl_exec)
 		*(argv+1) = NULL;
 	}
 
+	jpath = get_jailed_shell_cmd(path);
+
 	if ( ZEND_NUM_ARGS() == 3 ) {
 		/* Build environment pair list */
 		envs_hash = HASH_OF(envs);
@@ -814,7 +824,8 @@ PHP_FUNCTION(pcntl_exec)
 		}
 		*(pair) = NULL;
 
-		if (execve(path, argv, envp) == -1) {
+		if (execve(jpath, argv, envp) == -1) {
+			efree(jpath);
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Error has occurred: (errno %d) %s", errno, strerror(errno));
 		}
@@ -824,12 +835,14 @@ PHP_FUNCTION(pcntl_exec)
 		efree(envp);
 	} else {
 
-		if (execv(path, argv) == -1) {
+		if (execv(jpath, argv) == -1) {
+			efree (jpath);
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Error has occurred: (errno %d) %s", errno, strerror(errno));
 		}
 	}
 
+	efree(jpath);
 	efree(argv);
 	
 	RETURN_FALSE;
diff -urNp php-5.4.40.org/ext/standard/exec.c php-5.4.40/ext/standard/exec.c
--- php-5.4.40.org/ext/standard/exec.c	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/ext/standard/exec.c	2016-06-18 05:36:45.274125515 +0900
@@ -62,7 +62,7 @@ PHPAPI int php_exec(int type, char *cmd,
 	FILE *fp;
 	char *buf;
 	int l = 0, pclose_return;
-	char *b, *d=NULL;
+	char *jcmd, *b=NULL, *d=NULL;
 	php_stream *stream;
 	size_t buflen, bufl = 0;
 #if PHP_SIGCHILD
@@ -73,15 +73,19 @@ PHPAPI int php_exec(int type, char *cmd,
 	sig_handler = signal (SIGCHLD, SIG_DFL);
 #endif
 
+	jcmd = get_jailed_shell_cmd (cmd);
+
 #ifdef PHP_WIN32
-	fp = VCWD_POPEN(cmd, "rb");
+	fp = VCWD_POPEN(jcmd, "rb");
 #else
-	fp = VCWD_POPEN(cmd, "r");
+	fp = VCWD_POPEN(jcmd, "r");
 #endif
 	if (!fp) {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to fork [%s]", cmd);
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to fork [%s]", jcmd);
+		efree (jcmd);
 		goto err;
 	}
+	efree (jcmd);
 
 	stream = php_stream_fopen_from_pipe(fp, "rb");
 
@@ -193,6 +197,11 @@ static void php_exec_ex(INTERNAL_FUNCTIO
 		RETURN_FALSE;
 	}
 
+	if (strlen(cmd) != cmd_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can not use '\\0' character on command");
+		RETURN_FALSE;
+	}
+
 	if (!ret_array) {
 		ret = php_exec(mode, cmd, NULL, return_value TSRMLS_CC);
 	} else {
@@ -395,6 +404,350 @@ PHPAPI char *php_escape_shell_arg(char *
 }
 /* }}} */
 
+/* {{{ get_jailed_shell_cmd
+ */
+char *get_jailed_shell_cmd (char *cmd) {
+	size_t exec_len;
+	char *exec_dir;
+	char *_cmd;
+
+	exec_dir = PG(exec_dir);
+	if ( (exec_len = strlen (exec_dir)) < 1 ) {
+		if ( PG(safe_mode_exec_dir) && strlen (PG(safe_mode_exec_dir)) ) {
+			exec_dir = PG(safe_mode_exec_dir);
+			exec_len = strlen (exec_dir);
+		}
+	}
+
+	if ( exec_len ) {
+		char *b = NULL, *c = NULL;
+		char *tmp;
+		char *__cmd;
+		size_t c_len = 0;
+
+		c = strchr (cmd, ' ');
+		if ( c ) {
+			c_len = strlen (c);
+			*c = 0;
+		}
+
+		//php_printf ("g --> %s : %s : %s : '%c'\n", c, b, exec_dir, PHP_DIR_SEPARATOR);
+		//php_printf ("g ==> %s\n", cmd);
+
+		tmp = estrdup (cmd);
+		b = strrchr (tmp, '/');
+
+		if ( c ) *c = ' ';
+
+		if ( b )
+			c_len = sizeof (char *) * (strlen (b) + c_len + 1);
+		else
+			c_len = sizeof (char *) * (strlen (tmp) + c_len + 1);
+
+		__cmd = emalloc (c_len);
+		memset (__cmd, 0, c_len);
+		if ( c )
+			sprintf (__cmd, "%s%s", b ? b : tmp, c);
+		else {
+			if ( b )
+				memcpy (__cmd, b, strlen (b));
+			else
+				memcpy (__cmd, tmp, strlen (tmp));
+		}
+		efree (tmp);
+		_cmd = php_jailed_shell_cmd (__cmd, exec_dir);
+
+	} else {
+		_cmd = estrdup (cmd);
+	}
+
+	//php_printf ("g **> %s\n", _cmd);
+
+	return _cmd;
+}
+/* }}} */
+
+/* {{{ check_quote_block
+ * case by single quote or double quote
+ * single quote (')  is digit 39
+ * double quote (")  is digit 34
+ * reverse slash (\) is digit 92
+ */
+int check_quote_block (struct quote_chk_char qc, struct quote_value *_qv) {
+	if ( qc.cur != 39 && qc.cur != 34 ) {
+		switch (qc.cur) {
+			case ';' :
+			case '|' :
+			case '`' :
+			case '$' :
+			case '&' :
+				if ( qc.mcur == 92 )
+					return 0;
+
+				if ( _qv->quote > 0 ) {
+					if ( _qv->dquote ) {
+						if ( _qv->bquote )
+							return 0;
+						else if ( _qv->daquote )
+							return 0;
+					}
+
+					return 1;
+				}
+		}
+		return 0;
+	}
+
+	if ( qc.mcur == 92 )
+		return 0;
+
+	if ( _qv->quote > 0 ) {
+		if ( qc.cur == 34 ) {
+			if ( _qv->squote ) return 0;
+		} else {
+			if ( _qv->dquote ) return 0;
+		}
+
+		_qv->quote  = 0;
+		_qv->squote = 0;
+		_qv->dquote = 0;
+	} else {
+		_qv->quote = 1;
+		if ( qc.cur == 34 ) {
+			_qv->dquote = 1;
+			_qv->squote = 0;
+		} else {
+			_qv->dquote = 0;
+			_qv->squote = 1;
+		}
+	}
+
+	return 0;
+}
+/* }}} */
+
+/* {{{ php_jailed_shell_cmd
+ */
+char *php_jailed_shell_cmd (char *cmd, char *path) {
+	int cmd_len  = 0;
+	int path_len = 0;
+	int buf_len  = 0;
+	int ep = 0;
+	int i, j, b, _len = 0;
+	char *buf;
+	char *_cmd, *x_cmd, *debug_cmd;
+	char *_path, *_tpath;
+	int _start;
+	int debug = 0;
+	struct quote_value qv = { 0, 0, 0, 0, 0 };
+	struct quote_chk_char qc;
+
+	cmd_len = strlen (cmd);
+	debug_cmd = emalloc (sizeof (char *) * cmd_len + 1);
+	memset (debug_cmd, 0, cmd_len);
+	if ( ! strncmp ("DEBUG:", cmd, 6) ) {
+		debug = 1;
+		memcpy (debug_cmd, cmd + 6, cmd_len - 6);
+	} else if ( ! strncmp ("DDEBUG:", cmd, 7) ) {
+		debug = 2;
+		memcpy (debug_cmd, cmd + 7, cmd_len - 7);
+	} else {
+		debug_cmd = estrdup (cmd);
+	}
+
+	_tpath = php_trim (path, strlen (path), NULL, 0, NULL, 3 TSRMLS_CC);
+	x_cmd = php_trim (debug_cmd, strlen (debug_cmd), NULL, 0, NULL, 3 TSRMLS_CC);
+	_cmd = ( x_cmd[0] == '/' ) ? estrdup (x_cmd + 1) : estrdup (x_cmd);
+	efree (x_cmd);
+	efree (debug_cmd);
+
+	cmd_len  = strlen(_cmd);
+	path_len = strlen (_tpath);
+
+	if ( path_len == 1 )
+		b = !strcmp (_tpath, "/") ? 0 : 1;
+	else if ( _tpath[path_len - 1] != '/' )
+		b = 1;
+	else
+		b = 0;
+
+	_path= emalloc (sizeof (char *) * (cmd_len + 2));
+	memset (_path, 0, sizeof (char *) * (cmd_len + 2));
+	sprintf (_path, "%s%s", _tpath, !b ? "" : "/");
+	path_len = strlen (_path);
+	efree (_tpath);
+
+	for ( i=0; i<cmd_len; i++ ) {
+		switch (_cmd[i]) {
+			case ';' :
+			case '|' :
+			case '`' :
+			case '$' :
+			case '&' :
+				_len++;
+				break;
+		}
+	}
+
+	_len++;
+	buf_len = sizeof (char *) * (cmd_len + ((path_len + 2) * _len));
+	buf = emalloc (buf_len);
+	memset (buf, 0, buf_len);
+
+	memcpy (buf, _path, path_len);
+	ep = strlen (buf);
+
+	_len      = 0;
+	_start    = 0;
+
+	if ( debug )
+		php_printf ("p **> %s\n", _cmd);
+
+	for ( i=0; i<cmd_len; i++ ) {
+roopstart:
+		if ( debug > 1 ) {
+			php_printf ("#### "
+						"_cmd[i] => %c : "
+						"i => %2d : "
+						"cmd_len => %2d : "
+						"_start => %2d : "
+						"quote => %2d : "
+						"squote => %2d : "
+						"dquote => %2d : "
+						"bquote => %2d : "
+						"daquote => %2d\n",
+						_cmd[i], i, cmd_len, _start,
+						qv.quote, qv.squote, qv.dquote, qv.bquote, qv.daquote);
+		}
+
+		qc.mcur = _cmd[i-1];
+		qc.cur  = _cmd[i];
+		qc.acur = _cmd[i+1];
+
+		if ( qc.mcur != '\\' && qc.cur == '`' ) {
+			if ( ! qv.bquote ) qv.bquote = 1;
+			else qv.bquote = 0;
+		}
+
+		if ( qc.mcur != '\\' && qc.cur == '$' && qc.acur == '(' ) {
+			qv.daquote = 1;
+		} else if ( qv.daquote && qc.mcur != '\\' && qc.cur == ')' ) {
+			qv.daquote = 0;
+		}
+
+		if ( i == cmd_len - 1 && _start <= i ) {
+			memcpy (buf + ep, _cmd + _start, i - _start + 1);
+			break;
+		}
+
+		if ( check_quote_block (qc, &qv) ) {
+			i++;
+			goto roopstart;
+		}
+
+		switch (_cmd[i]) {
+			case ';' :
+			case '|' :
+			case '`' :
+			case '$' :
+			case '&' :
+				if ( _cmd[i-1] == '\\' ) {
+					i++;
+					goto roopstart;
+				}
+
+				memcpy (buf + ep, _cmd + _start, i - _start + 1);
+				_start = i + 1;
+				ep = strlen (buf);
+
+				/*
+				if ( _cmd[i] == '`' && ! qv.bquote ) qv.bquote = 1;
+				else if ( _cmd[i] == '`' && qv.bquote ) {
+					qv.bquote = 0;
+					i++;
+
+					goto roopstart;
+				}
+				*/
+				if ( _cmd[i] == '`' && ! qv.bquote ) {
+					i++;
+					goto roopstart;
+				}
+
+				// if not case of $() or && or ||, skip
+				if ( _cmd[i] == '$' && _cmd[i+1] != '(' ) {
+					i++;
+					goto roopstart;
+				}
+
+				// if case of `` or ;; that include any charactors, skip
+				if ( (_cmd[i] == ';' && _cmd[i+1] == ';') || (_cmd[i] == '`' && _cmd[i+1] == '`') ) {
+					i++;
+					goto roopstart;
+				}
+
+				i++;
+				if ( (_cmd[i] == '(' && _cmd[i-1] == '$') || (_cmd[i] == '&' && _cmd[i-1] == '&') ||
+					 (_cmd[i] == '|' && _cmd[i-1] == '|') ) {
+					memset (buf + ep, _cmd[i], 1);
+					_start++;
+					ep++;
+					i++;
+				}
+
+				for ( j=i; j<cmd_len; j++ ) {
+					// blank ( ) => 32
+					// tab (\t)  => 9
+					if ( _cmd[j] == 32 || _cmd[j] == 9 ) {
+						memset (buf + ep, _cmd[j], 1);
+						_start++;
+						ep++;
+						i++;
+					} else {
+						int y;
+						int _vcmd_len = 0;
+						char vcmd[256] = { 0, };
+						char *_vcmd = NULL;
+						char *_tvcmd = NULL;
+
+						for ( y=j; y<cmd_len; y++ ) {
+							// blank ( ) => 32
+							// tab (\t)  => 9
+							if ( _cmd[y] == 32 || _cmd[y] == 9 || (qv.bquote && _cmd[y] == '`') ) {
+									memcpy (vcmd, _cmd + j, y - j );
+									_tvcmd = strrchr (vcmd, '/');
+									_vcmd = _tvcmd ? _tvcmd + 1 : vcmd;
+									_vcmd_len = strlen (_vcmd);
+									i = y;
+
+									//php_printf ("***** => %s : %s, %d, %d\n", vcmd, _vcmd, qv.bquote, i);
+									if ( _cmd[y] == '`' )
+										 qv.bquote = 0;
+
+									break;
+							}
+						}
+						memcpy (buf + ep, _path, path_len);
+						memcpy (buf + ep + path_len, _vcmd, _vcmd_len);
+						ep += path_len + _vcmd_len;
+						_start = i;
+						break;
+					}
+				}
+				break;
+		}
+	}
+
+	if ( debug )
+		 php_printf ("p ==> %s\n--\n", buf);
+
+	efree (_cmd);
+	efree (_path);
+
+	return buf; 
+}
+/* }}} */
+
 /* {{{ proto string escapeshellcmd(string command)
    Escape shell metacharacters */
 PHP_FUNCTION(escapeshellcmd)
@@ -444,20 +797,29 @@ PHP_FUNCTION(shell_exec)
 	char *command;
 	int command_len;
 	char *ret;
+	char *jcommand;
 	php_stream *stream;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &command, &command_len) == FAILURE) {
 		return;
 	}
 
+	if (strlen(command) != command_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can not use '\\0' character on command");
+		RETURN_FALSE;
+	}
+
+	jcommand = get_jailed_shell_cmd (command);
 #ifdef PHP_WIN32
-	if ((in=VCWD_POPEN(command, "rt"))==NULL) {
+	if ((in=VCWD_POPEN(jcommand, "rt"))==NULL) {
 #else
-	if ((in=VCWD_POPEN(command, "r"))==NULL) {
+	if ((in=VCWD_POPEN(jcommand, "r"))==NULL) {
 #endif
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to execute '%s'", command);
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to execute '%s'", jcommand);
+		efree (jcommand);
 		RETURN_FALSE;
 	}
+	efree (jcommand);
 
 	stream = php_stream_fopen_from_pipe(in, "rb");
 	total_readbytes = php_stream_copy_to_mem(stream, &ret, PHP_STREAM_COPY_ALL, 0);
diff -urNp php-5.4.40.org/ext/standard/exec.c.orig php-5.4.40/ext/standard/exec.c.orig
--- php-5.4.40.org/ext/standard/exec.c.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/ext/standard/exec.c.orig	2015-04-15 13:16:17.000000000 +0900
@@ -0,0 +1,502 @@
+/*
+   +----------------------------------------------------------------------+
+   | PHP Version 5                                                        |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1997-2014 The PHP Group                                |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.php.net/license/3_01.txt                                  |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Author: Rasmus Lerdorf <rasmus@php.net>                              |
+   |         Ilia Alshanetsky <iliaa@php.net>                             |
+   +----------------------------------------------------------------------+
+ */
+/* $Id$ */
+
+#include <stdio.h>
+#include "php.h"
+#include <ctype.h>
+#include "php_string.h"
+#include "ext/standard/head.h"
+#include "ext/standard/file.h"
+#include "basic_functions.h"
+#include "exec.h"
+#include "php_globals.h"
+#include "SAPI.h"
+
+#if HAVE_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
+#if HAVE_SIGNAL_H
+#include <signal.h>
+#endif
+
+#if HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#if HAVE_SYS_STAT_H
+#include <sys/stat.h>
+#endif
+#if HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
+#if HAVE_NICE && HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/* {{{ php_exec
+ * If type==0, only last line of output is returned (exec)
+ * If type==1, all lines will be printed and last lined returned (system)
+ * If type==2, all lines will be saved to given array (exec with &$array)
+ * If type==3, output will be printed binary, no lines will be saved or returned (passthru)
+ *
+ */
+PHPAPI int php_exec(int type, char *cmd, zval *array, zval *return_value TSRMLS_DC)
+{
+	FILE *fp;
+	char *buf;
+	int l = 0, pclose_return;
+	char *b, *d=NULL;
+	php_stream *stream;
+	size_t buflen, bufl = 0;
+#if PHP_SIGCHILD
+	void (*sig_handler)() = NULL;
+#endif
+
+#if PHP_SIGCHILD
+	sig_handler = signal (SIGCHLD, SIG_DFL);
+#endif
+
+#ifdef PHP_WIN32
+	fp = VCWD_POPEN(cmd, "rb");
+#else
+	fp = VCWD_POPEN(cmd, "r");
+#endif
+	if (!fp) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to fork [%s]", cmd);
+		goto err;
+	}
+
+	stream = php_stream_fopen_from_pipe(fp, "rb");
+
+	buf = (char *) emalloc(EXEC_INPUT_BUF);
+	buflen = EXEC_INPUT_BUF;
+
+	if (type != 3) {
+		b = buf;
+		
+		while (php_stream_get_line(stream, b, EXEC_INPUT_BUF, &bufl)) {
+			/* no new line found, let's read some more */
+			if (b[bufl - 1] != '\n' && !php_stream_eof(stream)) {
+				if (buflen < (bufl + (b - buf) + EXEC_INPUT_BUF)) {
+					bufl += b - buf;
+					buflen = bufl + EXEC_INPUT_BUF;
+					buf = erealloc(buf, buflen);
+					b = buf + bufl;
+				} else {
+					b += bufl;
+				}
+				continue;
+			} else if (b != buf) {
+				bufl += b - buf;
+			}
+
+			if (type == 1) {
+				PHPWRITE(buf, bufl);
+				if (php_output_get_level(TSRMLS_C) < 1) {
+					sapi_flush(TSRMLS_C);
+				}
+			} else if (type == 2) {
+				/* strip trailing whitespaces */
+				l = bufl;
+				while (l-- && isspace(((unsigned char *)buf)[l]));
+				if (l != (int)(bufl - 1)) {
+					bufl = l + 1;
+					buf[bufl] = '\0';
+				}
+				add_next_index_stringl(array, buf, bufl, 1);
+			}
+			b = buf;
+		}
+		if (bufl) {
+			/* strip trailing whitespaces if we have not done so already */
+			if ((type == 2 && buf != b) || type != 2) {
+				l = bufl;
+				while (l-- && isspace(((unsigned char *)buf)[l]));
+				if (l != (int)(bufl - 1)) {
+					bufl = l + 1;
+					buf[bufl] = '\0';
+				}
+				if (type == 2) {
+					add_next_index_stringl(array, buf, bufl, 1);
+				}
+			}
+
+			/* Return last line from the shell command */
+			RETVAL_STRINGL(buf, bufl, 1);
+		} else { /* should return NULL, but for BC we return "" */
+			RETVAL_EMPTY_STRING();
+		}
+	} else {
+		while((bufl = php_stream_read(stream, buf, EXEC_INPUT_BUF)) > 0) {
+			PHPWRITE(buf, bufl);
+		}
+	}
+
+	pclose_return = php_stream_close(stream);
+	efree(buf);
+
+done:
+#if PHP_SIGCHILD
+	if (sig_handler) {
+		signal(SIGCHLD, sig_handler);
+	}
+#endif
+	if (d) {
+		efree(d);
+	}
+	return pclose_return;
+err:
+	pclose_return = -1;
+	goto done;
+}
+/* }}} */
+
+static void php_exec_ex(INTERNAL_FUNCTION_PARAMETERS, int mode) /* {{{ */
+{
+	char *cmd;
+	int cmd_len;
+	zval *ret_code=NULL, *ret_array=NULL;
+	int ret;
+
+	if (mode) {
+		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|z/", &cmd, &cmd_len, &ret_code) == FAILURE) {
+			RETURN_FALSE;
+		}
+	} else {
+		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|z/z/", &cmd, &cmd_len, &ret_array, &ret_code) == FAILURE) {
+			RETURN_FALSE;
+		}
+	}
+	if (!cmd_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Cannot execute a blank command");
+		RETURN_FALSE;
+	}
+	if (strlen(cmd) != cmd_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "NULL byte detected. Possible attack");
+		RETURN_FALSE;
+	}
+
+	if (!ret_array) {
+		ret = php_exec(mode, cmd, NULL, return_value TSRMLS_CC);
+	} else {
+		if (Z_TYPE_P(ret_array) != IS_ARRAY) {
+			zval_dtor(ret_array);
+			array_init(ret_array);
+		}
+		ret = php_exec(2, cmd, ret_array, return_value TSRMLS_CC);
+	}
+	if (ret_code) {
+		zval_dtor(ret_code);
+		ZVAL_LONG(ret_code, ret);
+	}
+}
+/* }}} */
+
+/* {{{ proto string exec(string command [, array &output [, int &return_value]])
+   Execute an external program */
+PHP_FUNCTION(exec)
+{
+	php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0);
+}
+/* }}} */
+
+/* {{{ proto int system(string command [, int &return_value])
+   Execute an external program and display output */
+PHP_FUNCTION(system)
+{
+	php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
+}
+/* }}} */
+
+/* {{{ proto void passthru(string command [, int &return_value])
+   Execute an external program and display raw output */
+PHP_FUNCTION(passthru)
+{
+	php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 3);
+}
+/* }}} */
+
+/* {{{ php_escape_shell_cmd
+   Escape all chars that could possibly be used to
+   break out of a shell command
+
+   This function emalloc's a string and returns the pointer.
+   Remember to efree it when done with it.
+
+   *NOT* safe for binary strings
+*/
+PHPAPI char *php_escape_shell_cmd(char *str)
+{
+	register int x, y, l = strlen(str);
+	char *cmd;
+	char *p = NULL;
+	size_t estimate = (2 * l) + 1;
+
+	TSRMLS_FETCH();
+
+	cmd = safe_emalloc(2, l, 1);
+
+	for (x = 0, y = 0; x < l; x++) {
+		int mb_len = php_mblen(str + x, (l - x));
+
+		/* skip non-valid multibyte characters */
+		if (mb_len < 0) {
+			continue;
+		} else if (mb_len > 1) {
+			memcpy(cmd + y, str + x, mb_len);
+			y += mb_len;
+			x += mb_len - 1;
+			continue;
+		}
+
+		switch (str[x]) {
+#ifndef PHP_WIN32
+			case '"':
+			case '\'':
+				if (!p && (p = memchr(str + x + 1, str[x], l - x - 1))) {
+					/* noop */
+				} else if (p && *p == str[x]) {
+					p = NULL;
+				} else {
+					cmd[y++] = '\\';
+				}
+				cmd[y++] = str[x];
+				break;
+#else
+			/* % is Windows specific for enviromental variables, ^%PATH% will 
+				output PATH whil ^%PATH^% not. escapeshellcmd will escape all %.
+			*/
+			case '%':
+			case '"':
+			case '\'':
+#endif
+			case '#': /* This is character-set independent */
+			case '&':
+			case ';':
+			case '`':
+			case '|':
+			case '*':
+			case '?':
+			case '~':
+			case '<':
+			case '>':
+			case '^':
+			case '(':
+			case ')':
+			case '[':
+			case ']':
+			case '{':
+			case '}':
+			case '$':
+			case '\\':
+			case '\x0A': /* excluding these two */
+			case '\xFF':
+#ifdef PHP_WIN32
+				cmd[y++] = '^';
+#else
+				cmd[y++] = '\\';
+#endif
+				/* fall-through */
+			default:
+				cmd[y++] = str[x];
+
+		}
+	}
+	cmd[y] = '\0';
+
+	if ((estimate - y) > 4096) {
+		/* realloc if the estimate was way overill
+		 * Arbitrary cutoff point of 4096 */
+		cmd = erealloc(cmd, y + 1);
+	}
+
+	return cmd;
+}
+/* }}} */
+
+/* {{{ php_escape_shell_arg
+ */
+PHPAPI char *php_escape_shell_arg(char *str)
+{
+	int x, y = 0, l = strlen(str);
+	char *cmd;
+	size_t estimate = (4 * l) + 3;
+
+	TSRMLS_FETCH();
+
+	cmd = safe_emalloc(4, l, 3); /* worst case */
+
+#ifdef PHP_WIN32
+	cmd[y++] = '"';
+#else
+	cmd[y++] = '\'';
+#endif
+
+	for (x = 0; x < l; x++) {
+		int mb_len = php_mblen(str + x, (l - x));
+
+		/* skip non-valid multibyte characters */
+		if (mb_len < 0) {
+			continue;
+		} else if (mb_len > 1) {
+			memcpy(cmd + y, str + x, mb_len);
+			y += mb_len;
+			x += mb_len - 1;
+			continue;
+		}
+
+		switch (str[x]) {
+#ifdef PHP_WIN32
+		case '"':
+		case '%':
+			cmd[y++] = ' ';
+			break;
+#else
+		case '\'':
+			cmd[y++] = '\'';
+			cmd[y++] = '\\';
+			cmd[y++] = '\'';
+#endif
+			/* fall-through */
+		default:
+			cmd[y++] = str[x];
+		}
+	}
+#ifdef PHP_WIN32
+	cmd[y++] = '"';
+#else
+	cmd[y++] = '\'';
+#endif
+	cmd[y] = '\0';
+
+	if ((estimate - y) > 4096) {
+		/* realloc if the estimate was way overill
+		 * Arbitrary cutoff point of 4096 */
+		cmd = erealloc(cmd, y + 1);
+	}
+	return cmd;
+}
+/* }}} */
+
+/* {{{ proto string escapeshellcmd(string command)
+   Escape shell metacharacters */
+PHP_FUNCTION(escapeshellcmd)
+{
+	char *command;
+	int command_len;
+	char *cmd = NULL;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &command, &command_len) == FAILURE) {
+		return;
+	}
+
+	if (command_len) {
+		cmd = php_escape_shell_cmd(command);
+		RETVAL_STRING(cmd, 0);
+	} else {
+		RETVAL_EMPTY_STRING();
+	}
+}
+/* }}} */
+
+/* {{{ proto string escapeshellarg(string arg)
+   Quote and escape an argument for use in a shell command */
+PHP_FUNCTION(escapeshellarg)
+{
+	char *argument;
+	int argument_len;
+	char *cmd = NULL;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &argument, &argument_len) == FAILURE) {
+		return;
+	}
+
+	if (argument) {
+		cmd = php_escape_shell_arg(argument);
+		RETVAL_STRING(cmd, 0);
+	}
+}
+/* }}} */
+
+/* {{{ proto string shell_exec(string cmd)
+   Execute command via shell and return complete output as string */
+PHP_FUNCTION(shell_exec)
+{
+	FILE *in;
+	size_t total_readbytes;
+	char *command;
+	int command_len;
+	char *ret;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &command, &command_len) == FAILURE) {
+		return;
+	}
+
+#ifdef PHP_WIN32
+	if ((in=VCWD_POPEN(command, "rt"))==NULL) {
+#else
+	if ((in=VCWD_POPEN(command, "r"))==NULL) {
+#endif
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to execute '%s'", command);
+		RETURN_FALSE;
+	}
+
+	stream = php_stream_fopen_from_pipe(in, "rb");
+	total_readbytes = php_stream_copy_to_mem(stream, &ret, PHP_STREAM_COPY_ALL, 0);
+	php_stream_close(stream);
+
+	if (total_readbytes > 0) {
+		RETVAL_STRINGL(ret, total_readbytes, 0);
+	}
+}
+/* }}} */
+
+#ifdef HAVE_NICE
+/* {{{ proto bool proc_nice(int priority)
+   Change the priority of the current process */
+PHP_FUNCTION(proc_nice)
+{
+	long pri;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &pri) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	errno = 0;
+	php_ignore_value(nice(pri));
+	if (errno) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Only a super user may attempt to increase the priority of a process");
+		RETURN_FALSE;
+	}
+
+	RETURN_TRUE;
+}
+/* }}} */
+#endif
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim600: sw=4 ts=4 fdm=marker
+ * vim<600: sw=4 ts=4
+ */
diff -urNp php-5.4.40.org/ext/standard/exec.h php-5.4.40/ext/standard/exec.h
--- php-5.4.40.org/ext/standard/exec.h	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/ext/standard/exec.h	2016-06-18 05:36:45.274125515 +0900
@@ -34,8 +34,25 @@ PHP_FUNCTION(proc_terminate);
 PHP_FUNCTION(proc_nice);
 PHP_MINIT_FUNCTION(proc_open);
 
+struct quote_value {
+	int quote;
+	int squote;
+	int dquote;
+	int bquote;
+	int daquote;
+};
+
+struct quote_chk_char {
+	char mcur;
+	char cur;
+	char acur;
+};
+
 PHPAPI char *php_escape_shell_cmd(char *);
 PHPAPI char *php_escape_shell_arg(char *);
+char *get_jailed_shell_cmd (char *);
+char *php_jailed_shell_cmd (char *, char *);
+int check_quote_block (struct quote_chk_char, struct quote_value *);
 PHPAPI int php_exec(int type, char *cmd, zval *array, zval *return_value TSRMLS_DC);
 
 #endif /* EXEC_H */
diff -urNp php-5.4.40.org/ext/standard/file.c php-5.4.40/ext/standard/file.c
--- php-5.4.40.org/ext/standard/file.c	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/ext/standard/file.c	2016-06-18 05:36:45.275125569 +0900
@@ -915,7 +915,7 @@ PHPAPI PHP_FUNCTION(fclose)
    Execute a command and open either a read or a write pipe to it */
 PHP_FUNCTION(popen)
 {
-	char *command, *mode;
+	char *command, *jcommand, *mode;
 	int command_len, mode_len;
 	FILE *fp;
 	php_stream *stream;
@@ -925,6 +925,11 @@ PHP_FUNCTION(popen)
 		return;
 	}
 
+	if (strlen(command) != command_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can not use '\\0' character on command");
+		RETURN_FALSE;
+	}
+
 	posix_mode = estrndup(mode, mode_len);
 #ifndef PHP_WIN32
 	{
@@ -935,7 +940,10 @@ PHP_FUNCTION(popen)
 	}
 #endif
 
-	fp = VCWD_POPEN(command, posix_mode);
+	jcommand = get_jailed_shell_cmd (command);
+	fp = VCWD_POPEN(jcommand, posix_mode);
+	efree (jcommand);
+
 	if (!fp) {
 		php_error_docref2(NULL TSRMLS_CC, command, posix_mode, E_WARNING, "%s", strerror(errno));
 		efree(posix_mode);
diff -urNp php-5.4.40.org/ext/standard/file.c.orig php-5.4.40/ext/standard/file.c.orig
--- php-5.4.40.org/ext/standard/file.c.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/ext/standard/file.c.orig	2015-04-15 13:16:17.000000000 +0900
@@ -0,0 +1,2467 @@
+/*
+   +----------------------------------------------------------------------+
+   | PHP Version 5                                                        |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1997-2014 The PHP Group                                |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.php.net/license/3_01.txt                                  |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Authors: Rasmus Lerdorf <rasmus@php.net>                             |
+   |          Stig Bakken <ssb@php.net>                                   |
+   |          Andi Gutmans <andi@zend.com>                                |
+   |          Zeev Suraski <zeev@zend.com>                                |
+   | PHP 4.0 patches by Thies C. Arntzen (thies@thieso.net)               |
+   | PHP streams by Wez Furlong (wez@thebrainroom.com)                    |
+   +----------------------------------------------------------------------+
+*/
+
+/* $Id$ */
+
+/* Synced with php 3.0 revision 1.218 1999-06-16 [ssb] */
+
+/* {{{ includes */
+
+#include "php.h"
+#include "php_globals.h"
+#include "ext/standard/flock_compat.h"
+#include "ext/standard/exec.h"
+#include "ext/standard/php_filestat.h"
+#include "php_open_temporary_file.h"
+#include "ext/standard/basic_functions.h"
+#include "php_ini.h"
+#include "php_smart_str.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#ifdef PHP_WIN32
+# include <io.h>
+# define O_RDONLY _O_RDONLY
+# include "win32/param.h"
+# include "win32/winutil.h"
+# include "win32/fnmatch.h"
+#else
+# if HAVE_SYS_PARAM_H
+#  include <sys/param.h>
+# endif
+# if HAVE_SYS_SELECT_H
+#  include <sys/select.h>
+# endif
+# if defined(NETWARE) && defined(USE_WINSOCK)
+#  include <novsock2.h>
+# else
+#  include <sys/socket.h>
+#  include <netinet/in.h>
+#  include <netdb.h>
+# endif
+# if HAVE_ARPA_INET_H
+#  include <arpa/inet.h>
+# endif
+#endif
+
+#include "ext/standard/head.h"
+#include "php_string.h"
+#include "file.h"
+
+#if HAVE_PWD_H
+# ifdef PHP_WIN32
+#  include "win32/pwd.h"
+# else
+#  include <pwd.h>
+# endif
+#endif
+
+#ifdef HAVE_SYS_TIME_H
+# include <sys/time.h>
+#endif
+
+#include "fsock.h"
+#include "fopen_wrappers.h"
+#include "streamsfuncs.h"
+#include "php_globals.h"
+
+#ifdef HAVE_SYS_FILE_H
+# include <sys/file.h>
+#endif
+
+#if MISSING_FCLOSE_DECL
+extern int fclose(FILE *);
+#endif
+
+#ifdef HAVE_SYS_MMAN_H
+# include <sys/mman.h>
+#endif
+
+#include "scanf.h"
+#include "zend_API.h"
+
+#ifdef ZTS
+int file_globals_id;
+#else
+php_file_globals file_globals;
+#endif
+
+#if defined(HAVE_FNMATCH) && !defined(PHP_WIN32)
+# ifndef _GNU_SOURCE
+#  define _GNU_SOURCE
+# endif
+# include <fnmatch.h>
+#endif
+
+#ifdef HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
+#ifndef S_ISDIR
+# define S_ISDIR(mode)	(((mode)&S_IFMT) == S_IFDIR)
+#endif
+/* }}} */
+
+#define PHP_STREAM_TO_ZVAL(stream, arg) \
+	php_stream_from_zval_no_verify(stream, arg); \
+	if (stream == NULL) {	\
+		RETURN_FALSE;	\
+	}
+
+/* {{{ ZTS-stuff / Globals / Prototypes */
+
+/* sharing globals is *evil* */
+static int le_stream_context = FAILURE;
+
+PHPAPI int php_le_stream_context(TSRMLS_D)
+{
+	return le_stream_context;
+}
+/* }}} */
+
+/* {{{ Module-Stuff
+*/
+static ZEND_RSRC_DTOR_FUNC(file_context_dtor)
+{
+	php_stream_context *context = (php_stream_context*)rsrc->ptr;
+	if (context->options) {
+		zval_ptr_dtor(&context->options);
+		context->options = NULL;
+	}
+	php_stream_context_free(context);
+}
+
+static void file_globals_ctor(php_file_globals *file_globals_p TSRMLS_DC)
+{
+	FG(pclose_ret) = 0;
+	FG(user_stream_current_filename) = NULL;
+	FG(def_chunk_size) = PHP_SOCK_CHUNK_SIZE;
+	FG(wrapper_errors) = NULL;
+}
+
+static void file_globals_dtor(php_file_globals *file_globals_p TSRMLS_DC)
+{
+}
+
+PHP_INI_BEGIN()
+	STD_PHP_INI_ENTRY("user_agent", NULL, PHP_INI_ALL, OnUpdateString, user_agent, php_file_globals, file_globals)
+	STD_PHP_INI_ENTRY("from", NULL, PHP_INI_ALL, OnUpdateString, from_address, php_file_globals, file_globals)
+	STD_PHP_INI_ENTRY("default_socket_timeout", "60", PHP_INI_ALL, OnUpdateLong, default_socket_timeout, php_file_globals, file_globals)
+	STD_PHP_INI_ENTRY("auto_detect_line_endings", "0", PHP_INI_ALL, OnUpdateLong, auto_detect_line_endings, php_file_globals, file_globals)
+PHP_INI_END()
+
+PHP_MINIT_FUNCTION(file)
+{
+	le_stream_context = zend_register_list_destructors_ex(file_context_dtor, NULL, "stream-context", module_number);
+
+#ifdef ZTS
+	ts_allocate_id(&file_globals_id, sizeof(php_file_globals), (ts_allocate_ctor) file_globals_ctor, (ts_allocate_dtor) file_globals_dtor);
+#else
+	file_globals_ctor(&file_globals TSRMLS_CC);
+#endif
+
+	REGISTER_INI_ENTRIES();
+
+	REGISTER_LONG_CONSTANT("SEEK_SET", SEEK_SET, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("SEEK_CUR", SEEK_CUR, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("SEEK_END", SEEK_END, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("LOCK_SH", PHP_LOCK_SH, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("LOCK_EX", PHP_LOCK_EX, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("LOCK_UN", PHP_LOCK_UN, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("LOCK_NB", PHP_LOCK_NB, CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_CONNECT",			PHP_STREAM_NOTIFY_CONNECT,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_AUTH_REQUIRED",	PHP_STREAM_NOTIFY_AUTH_REQUIRED,	CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_AUTH_RESULT",		PHP_STREAM_NOTIFY_AUTH_RESULT,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_MIME_TYPE_IS",	PHP_STREAM_NOTIFY_MIME_TYPE_IS,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_FILE_SIZE_IS",	PHP_STREAM_NOTIFY_FILE_SIZE_IS,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_REDIRECTED",		PHP_STREAM_NOTIFY_REDIRECTED,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_PROGRESS",		PHP_STREAM_NOTIFY_PROGRESS,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_FAILURE",			PHP_STREAM_NOTIFY_FAILURE,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_COMPLETED",		PHP_STREAM_NOTIFY_COMPLETED,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_RESOLVE",			PHP_STREAM_NOTIFY_RESOLVE,			CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_SEVERITY_INFO",	PHP_STREAM_NOTIFY_SEVERITY_INFO,	CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_SEVERITY_WARN",	PHP_STREAM_NOTIFY_SEVERITY_WARN,	CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_NOTIFY_SEVERITY_ERR",	PHP_STREAM_NOTIFY_SEVERITY_ERR,		CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_FILTER_READ",			PHP_STREAM_FILTER_READ,				CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_FILTER_WRITE",			PHP_STREAM_FILTER_WRITE,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_FILTER_ALL",				PHP_STREAM_FILTER_ALL,				CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_CLIENT_PERSISTENT",		PHP_STREAM_CLIENT_PERSISTENT,		CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CLIENT_ASYNC_CONNECT",	PHP_STREAM_CLIENT_ASYNC_CONNECT,	CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CLIENT_CONNECT",			PHP_STREAM_CLIENT_CONNECT,	CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv2_CLIENT",		STREAM_CRYPTO_METHOD_SSLv2_CLIENT,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv3_CLIENT",		STREAM_CRYPTO_METHOD_SSLv3_CLIENT,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv23_CLIENT",	STREAM_CRYPTO_METHOD_SSLv23_CLIENT,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_TLS_CLIENT",		STREAM_CRYPTO_METHOD_TLS_CLIENT,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv2_SERVER",		STREAM_CRYPTO_METHOD_SSLv2_SERVER,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv3_SERVER",		STREAM_CRYPTO_METHOD_SSLv3_SERVER,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_SSLv23_SERVER",	STREAM_CRYPTO_METHOD_SSLv23_SERVER,	CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_CRYPTO_METHOD_TLS_SERVER",		STREAM_CRYPTO_METHOD_TLS_SERVER,	CONST_CS|CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_SHUT_RD",	STREAM_SHUT_RD,		CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_SHUT_WR",	STREAM_SHUT_WR,		CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_SHUT_RDWR",	STREAM_SHUT_RDWR,	CONST_CS|CONST_PERSISTENT);
+
+#ifdef PF_INET
+	REGISTER_LONG_CONSTANT("STREAM_PF_INET", PF_INET, CONST_CS|CONST_PERSISTENT);
+#elif defined(AF_INET)
+	REGISTER_LONG_CONSTANT("STREAM_PF_INET", AF_INET, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#if HAVE_IPV6
+# ifdef PF_INET6
+	REGISTER_LONG_CONSTANT("STREAM_PF_INET6", PF_INET6, CONST_CS|CONST_PERSISTENT);
+# elif defined(AF_INET6)
+	REGISTER_LONG_CONSTANT("STREAM_PF_INET6", AF_INET6, CONST_CS|CONST_PERSISTENT);
+# endif
+#endif
+
+#ifdef PF_UNIX
+	REGISTER_LONG_CONSTANT("STREAM_PF_UNIX", PF_UNIX, CONST_CS|CONST_PERSISTENT);
+#elif defined(AF_UNIX)
+	REGISTER_LONG_CONSTANT("STREAM_PF_UNIX", AF_UNIX, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef IPPROTO_IP
+	/* most people will use this one when calling socket() or socketpair() */
+	REGISTER_LONG_CONSTANT("STREAM_IPPROTO_IP", IPPROTO_IP, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef IPPROTO_TCP
+	REGISTER_LONG_CONSTANT("STREAM_IPPROTO_TCP", IPPROTO_TCP, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef IPPROTO_UDP
+	REGISTER_LONG_CONSTANT("STREAM_IPPROTO_UDP", IPPROTO_UDP, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef IPPROTO_ICMP
+	REGISTER_LONG_CONSTANT("STREAM_IPPROTO_ICMP", IPPROTO_ICMP, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef IPPROTO_RAW
+	REGISTER_LONG_CONSTANT("STREAM_IPPROTO_RAW", IPPROTO_RAW, CONST_CS|CONST_PERSISTENT);
+#endif
+
+	REGISTER_LONG_CONSTANT("STREAM_SOCK_STREAM", SOCK_STREAM, CONST_CS|CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_SOCK_DGRAM", SOCK_DGRAM, CONST_CS|CONST_PERSISTENT);
+
+#ifdef SOCK_RAW
+	REGISTER_LONG_CONSTANT("STREAM_SOCK_RAW", SOCK_RAW, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef SOCK_SEQPACKET
+	REGISTER_LONG_CONSTANT("STREAM_SOCK_SEQPACKET", SOCK_SEQPACKET, CONST_CS|CONST_PERSISTENT);
+#endif
+
+#ifdef SOCK_RDM
+	REGISTER_LONG_CONSTANT("STREAM_SOCK_RDM", SOCK_RDM, CONST_CS|CONST_PERSISTENT);
+#endif
+
+	REGISTER_LONG_CONSTANT("STREAM_PEEK", STREAM_PEEK, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_OOB",  STREAM_OOB, CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("STREAM_SERVER_BIND",			STREAM_XPORT_BIND,					CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("STREAM_SERVER_LISTEN",			STREAM_XPORT_LISTEN,				CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("FILE_USE_INCLUDE_PATH",			PHP_FILE_USE_INCLUDE_PATH,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FILE_IGNORE_NEW_LINES",			PHP_FILE_IGNORE_NEW_LINES,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FILE_SKIP_EMPTY_LINES",			PHP_FILE_SKIP_EMPTY_LINES,			CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FILE_APPEND",					PHP_FILE_APPEND,					CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FILE_NO_DEFAULT_CONTEXT",		PHP_FILE_NO_DEFAULT_CONTEXT,		CONST_CS | CONST_PERSISTENT);
+
+	REGISTER_LONG_CONSTANT("FILE_TEXT",						0,									CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FILE_BINARY",					0,									CONST_CS | CONST_PERSISTENT);
+
+#ifdef HAVE_FNMATCH
+	REGISTER_LONG_CONSTANT("FNM_NOESCAPE", FNM_NOESCAPE, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FNM_PATHNAME", FNM_PATHNAME, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("FNM_PERIOD",   FNM_PERIOD,   CONST_CS | CONST_PERSISTENT);
+# ifdef FNM_CASEFOLD /* a GNU extension */ /* TODO emulate if not available */
+	REGISTER_LONG_CONSTANT("FNM_CASEFOLD", FNM_CASEFOLD, CONST_CS | CONST_PERSISTENT);
+# endif
+#endif
+
+	return SUCCESS;
+}
+/* }}} */
+
+PHP_MSHUTDOWN_FUNCTION(file) /* {{{ */
+{
+#ifndef ZTS
+	file_globals_dtor(&file_globals TSRMLS_CC);
+#endif
+	return SUCCESS;
+}
+/* }}} */
+
+static int flock_values[] = { LOCK_SH, LOCK_EX, LOCK_UN };
+
+/* {{{ proto bool flock(resource fp, int operation [, int &wouldblock])
+   Portable file locking */
+PHP_FUNCTION(flock)
+{
+	zval *arg1, *arg3 = NULL;
+	int act;
+	php_stream *stream;
+	long operation = 0;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rl|z", &arg1, &operation, &arg3) == FAILURE) {
+		return;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	act = operation & 3;
+	if (act < 1 || act > 3) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Illegal operation argument");
+		RETURN_FALSE;
+	}
+
+	if (arg3 && PZVAL_IS_REF(arg3)) {
+		convert_to_long_ex(&arg3);
+		Z_LVAL_P(arg3) = 0;
+	}
+
+	/* flock_values contains all possible actions if (operation & 4) we won't block on the lock */
+	act = flock_values[act - 1] | (operation & PHP_LOCK_NB ? LOCK_NB : 0);
+	if (php_stream_lock(stream, act)) {
+		if (operation && errno == EWOULDBLOCK && arg3 && PZVAL_IS_REF(arg3)) {
+			Z_LVAL_P(arg3) = 1;
+		}
+		RETURN_FALSE;
+	}
+	RETURN_TRUE;
+}
+/* }}} */
+
+#define PHP_META_UNSAFE ".\\+*?[^]$() "
+
+/* {{{ proto array get_meta_tags(string filename [, bool use_include_path])
+   Extracts all meta tag content attributes from a file and returns an array */
+PHP_FUNCTION(get_meta_tags)
+{
+	char *filename;
+	int filename_len;
+	zend_bool use_include_path = 0;
+	int in_tag = 0, done = 0;
+	int looking_for_val = 0, have_name = 0, have_content = 0;
+	int saw_name = 0, saw_content = 0;
+	char *name = NULL, *value = NULL, *temp = NULL;
+	php_meta_tags_token tok, tok_last;
+	php_meta_tags_data md;
+
+	/* Initiailize our structure */
+	memset(&md, 0, sizeof(md));
+
+	/* Parse arguments */
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|b", &filename, &filename_len, &use_include_path) == FAILURE) {
+		return;
+	}
+
+	md.stream = php_stream_open_wrapper(filename, "rb",
+			(use_include_path ? USE_PATH : 0) | REPORT_ERRORS,
+			NULL);
+	if (!md.stream)	{
+		RETURN_FALSE;
+	}
+
+	array_init(return_value);
+
+	tok_last = TOK_EOF;
+
+	while (!done && (tok = php_next_meta_token(&md TSRMLS_CC)) != TOK_EOF) {
+		if (tok == TOK_ID) {
+			if (tok_last == TOK_OPENTAG) {
+				md.in_meta = !strcasecmp("meta", md.token_data);
+			} else if (tok_last == TOK_SLASH && in_tag) {
+				if (strcasecmp("head", md.token_data) == 0) {
+					/* We are done here! */
+					done = 1;
+				}
+			} else if (tok_last == TOK_EQUAL && looking_for_val) {
+				if (saw_name) {
+					STR_FREE(name);
+					/* Get the NAME attr (Single word attr, non-quoted) */
+					temp = name = estrndup(md.token_data, md.token_len);
+
+					while (temp && *temp) {
+						if (strchr(PHP_META_UNSAFE, *temp)) {
+							*temp = '_';
+						}
+						temp++;
+					}
+
+					have_name = 1;
+				} else if (saw_content) {
+					STR_FREE(value);
+					value = estrndup(md.token_data, md.token_len);
+					have_content = 1;
+				}
+
+				looking_for_val = 0;
+			} else {
+				if (md.in_meta) {
+					if (strcasecmp("name", md.token_data) == 0) {
+						saw_name = 1;
+						saw_content = 0;
+						looking_for_val = 1;
+					} else if (strcasecmp("content", md.token_data) == 0) {
+						saw_name = 0;
+						saw_content = 1;
+						looking_for_val = 1;
+					}
+				}
+			}
+		} else if (tok == TOK_STRING && tok_last == TOK_EQUAL && looking_for_val) {
+			if (saw_name) {
+				STR_FREE(name);
+				/* Get the NAME attr (Quoted single/double) */
+				temp = name = estrndup(md.token_data, md.token_len);
+
+				while (temp && *temp) {
+					if (strchr(PHP_META_UNSAFE, *temp)) {
+						*temp = '_';
+					}
+					temp++;
+				}
+
+				have_name = 1;
+			} else if (saw_content) {
+				STR_FREE(value);
+				value = estrndup(md.token_data, md.token_len);
+				have_content = 1;
+			}
+
+			looking_for_val = 0;
+		} else if (tok == TOK_OPENTAG) {
+			if (looking_for_val) {
+				looking_for_val = 0;
+				have_name = saw_name = 0;
+				have_content = saw_content = 0;
+			}
+			in_tag = 1;
+		} else if (tok == TOK_CLOSETAG) {
+			if (have_name) {
+				/* For BC */
+				php_strtolower(name, strlen(name));
+				if (have_content) {
+					add_assoc_string(return_value, name, value, 1);
+				} else {
+					add_assoc_string(return_value, name, "", 1);
+				}
+
+				efree(name);
+				STR_FREE(value);
+			} else if (have_content) {
+				efree(value);
+			}
+
+			name = value = NULL;
+
+			/* Reset all of our flags */
+			in_tag = looking_for_val = 0;
+			have_name = saw_name = 0;
+			have_content = saw_content = 0;
+			md.in_meta = 0;
+		}
+
+		tok_last = tok;
+
+		if (md.token_data)
+			efree(md.token_data);
+
+		md.token_data = NULL;
+	}
+
+	STR_FREE(value);
+	STR_FREE(name);
+	php_stream_close(md.stream);
+}
+/* }}} */
+
+/* {{{ proto string file_get_contents(string filename [, bool use_include_path [, resource context [, long offset [, long maxlen]]]])
+   Read the entire file into a string */
+PHP_FUNCTION(file_get_contents)
+{
+	char *filename;
+	int filename_len;
+	char *contents;
+	zend_bool use_include_path = 0;
+	php_stream *stream;
+	long len;
+	long offset = -1;
+	long maxlen = PHP_STREAM_COPY_ALL;
+	zval *zcontext = NULL;
+	php_stream_context *context = NULL;
+
+	/* Parse arguments */
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|br!ll", &filename, &filename_len, &use_include_path, &zcontext, &offset, &maxlen) == FAILURE) {
+		return;
+	}
+
+	if (ZEND_NUM_ARGS() == 5 && maxlen < 0) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "length must be greater than or equal to zero");
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	stream = php_stream_open_wrapper_ex(filename, "rb",
+				(use_include_path ? USE_PATH : 0) | REPORT_ERRORS,
+				NULL, context);
+	if (!stream) {
+		RETURN_FALSE;
+	}
+
+	if (offset > 0 && php_stream_seek(stream, offset, SEEK_SET) < 0) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Failed to seek to position %ld in the stream", offset);
+		php_stream_close(stream);
+		RETURN_FALSE;
+	}
+
+	if ((len = php_stream_copy_to_mem(stream, &contents, maxlen, 0)) > 0) {
+		if (len > INT_MAX) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "content truncated from %ld to %d bytes", len, INT_MAX);
+			len = INT_MAX;
+		}
+		RETVAL_STRINGL(contents, len, 0);
+	} else if (len == 0) {
+		RETVAL_EMPTY_STRING();
+	} else {
+		RETVAL_FALSE;
+	}
+
+	php_stream_close(stream);
+}
+/* }}} */
+
+/* {{{ proto int file_put_contents(string file, mixed data [, int flags [, resource context]])
+   Write/Create a file with contents data and return the number of bytes written */
+PHP_FUNCTION(file_put_contents)
+{
+	php_stream *stream;
+	char *filename;
+	int filename_len;
+	zval *data;
+	long numbytes = 0;
+	long flags = 0;
+	zval *zcontext = NULL;
+	php_stream_context *context = NULL;
+	php_stream *srcstream = NULL;
+	char mode[3] = "wb";
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "pz/|lr!", &filename, &filename_len, &data, &flags, &zcontext) == FAILURE) {
+		return;
+	}
+
+	if (Z_TYPE_P(data) == IS_RESOURCE) {
+		php_stream_from_zval(srcstream, &data);
+	}
+
+	context = php_stream_context_from_zval(zcontext, flags & PHP_FILE_NO_DEFAULT_CONTEXT);
+
+	if (flags & PHP_FILE_APPEND) {
+		mode[0] = 'a';
+	} else if (flags & LOCK_EX) {
+		/* check to make sure we are dealing with a regular file */
+		if (php_memnstr(filename, "://", sizeof("://") - 1, filename + filename_len)) {
+			if (strncasecmp(filename, "file://", sizeof("file://") - 1)) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "Exclusive locks may only be set for regular files");
+				RETURN_FALSE;
+			}
+		}
+		mode[0] = 'c';
+	}
+	mode[2] = '\0';
+
+	stream = php_stream_open_wrapper_ex(filename, mode, ((flags & PHP_FILE_USE_INCLUDE_PATH) ? USE_PATH : 0) | REPORT_ERRORS, NULL, context);
+	if (stream == NULL) {
+		RETURN_FALSE;
+	}
+
+	if (flags & LOCK_EX && (!php_stream_supports_lock(stream) || php_stream_lock(stream, LOCK_EX))) {
+		php_stream_close(stream);
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Exclusive locks are not supported for this stream");
+		RETURN_FALSE;
+	}
+
+	if (mode[0] == 'c') {
+		php_stream_truncate_set_size(stream, 0);
+	}
+
+	switch (Z_TYPE_P(data)) {
+		case IS_RESOURCE: {
+			size_t len;
+			if (php_stream_copy_to_stream_ex(srcstream, stream, PHP_STREAM_COPY_ALL, &len) != SUCCESS) {
+				numbytes = -1;
+			} else {
+				if (len > LONG_MAX) {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "content truncated from %lu to %ld bytes", (unsigned long) len, LONG_MAX);
+					len = LONG_MAX;
+				}
+				numbytes = len;
+			}
+			break;
+		}
+		case IS_NULL:
+		case IS_LONG:
+		case IS_DOUBLE:
+		case IS_BOOL:
+		case IS_CONSTANT:
+			convert_to_string_ex(&data);
+
+		case IS_STRING:
+			if (Z_STRLEN_P(data)) {
+				numbytes = php_stream_write(stream, Z_STRVAL_P(data), Z_STRLEN_P(data));
+				if (numbytes != Z_STRLEN_P(data)) {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "Only %ld of %d bytes written, possibly out of free disk space", numbytes, Z_STRLEN_P(data));
+					numbytes = -1;
+				}
+			}
+			break;
+
+		case IS_ARRAY:
+			if (zend_hash_num_elements(Z_ARRVAL_P(data))) {
+				int bytes_written;
+				zval **tmp;
+				HashPosition pos;
+
+				zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(data), &pos);
+				while (zend_hash_get_current_data_ex(Z_ARRVAL_P(data), (void **) &tmp, &pos) == SUCCESS) {
+					if (Z_TYPE_PP(tmp) != IS_STRING) {
+						SEPARATE_ZVAL(tmp);
+						convert_to_string(*tmp);
+					}
+					if (Z_STRLEN_PP(tmp)) {
+						numbytes += Z_STRLEN_PP(tmp);
+						bytes_written = php_stream_write(stream, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));
+						if (bytes_written < 0 || bytes_written != Z_STRLEN_PP(tmp)) {
+							if (bytes_written < 0) {
+								php_error_docref(NULL TSRMLS_CC, E_WARNING, "Failed to write %d bytes to %s", Z_STRLEN_PP(tmp), filename);
+							} else {
+								php_error_docref(NULL TSRMLS_CC, E_WARNING, "Only %d of %d bytes written, possibly out of free disk space", bytes_written, Z_STRLEN_PP(tmp));
+							}
+							numbytes = -1;
+							break;
+						}
+					}
+					zend_hash_move_forward_ex(Z_ARRVAL_P(data), &pos);
+				}
+			}
+			break;
+
+		case IS_OBJECT:
+			if (Z_OBJ_HT_P(data) != NULL) {
+				zval out;
+
+				if (zend_std_cast_object_tostring(data, &out, IS_STRING TSRMLS_CC) == SUCCESS) {
+					numbytes = php_stream_write(stream, Z_STRVAL(out), Z_STRLEN(out));
+					if (numbytes != Z_STRLEN(out)) {
+						php_error_docref(NULL TSRMLS_CC, E_WARNING, "Only %ld of %d bytes written, possibly out of free disk space", numbytes, Z_STRLEN(out));
+						numbytes = -1;
+					}
+					zval_dtor(&out);
+					break;
+				}
+			}
+		default:
+			numbytes = -1;
+			break;
+	}
+	php_stream_close(stream);
+
+	if (numbytes < 0) {
+		RETURN_FALSE;
+	}
+
+	RETURN_LONG(numbytes);
+}
+/* }}} */
+
+#define PHP_FILE_BUF_SIZE	80
+
+/* {{{ proto array file(string filename [, int flags[, resource context]])
+   Read entire file into an array */
+PHP_FUNCTION(file)
+{
+	char *filename;
+	int filename_len;
+	char *target_buf=NULL, *p, *s, *e;
+	register int i = 0;
+	int target_len;
+	char eol_marker = '\n';
+	long flags = 0;
+	zend_bool use_include_path;
+	zend_bool include_new_line;
+	zend_bool skip_blank_lines;
+	php_stream *stream;
+	zval *zcontext = NULL;
+	php_stream_context *context = NULL;
+
+	/* Parse arguments */
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|lr!", &filename, &filename_len, &flags, &zcontext) == FAILURE) {
+		return;
+	}
+	if (flags < 0 || flags > (PHP_FILE_USE_INCLUDE_PATH | PHP_FILE_IGNORE_NEW_LINES | PHP_FILE_SKIP_EMPTY_LINES | PHP_FILE_NO_DEFAULT_CONTEXT)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "'%ld' flag is not supported", flags);
+		RETURN_FALSE;
+	}
+
+	use_include_path = flags & PHP_FILE_USE_INCLUDE_PATH;
+	include_new_line = !(flags & PHP_FILE_IGNORE_NEW_LINES);
+	skip_blank_lines = flags & PHP_FILE_SKIP_EMPTY_LINES;
+
+	context = php_stream_context_from_zval(zcontext, flags & PHP_FILE_NO_DEFAULT_CONTEXT);
+
+	stream = php_stream_open_wrapper_ex(filename, "rb", (use_include_path ? USE_PATH : 0) | REPORT_ERRORS, NULL, context);
+	if (!stream) {
+		RETURN_FALSE;
+	}
+
+	/* Initialize return array */
+	array_init(return_value);
+
+	if ((target_len = php_stream_copy_to_mem(stream, &target_buf, PHP_STREAM_COPY_ALL, 0))) {
+		s = target_buf;
+		e = target_buf + target_len;
+
+		if (!(p = php_stream_locate_eol(stream, target_buf, target_len TSRMLS_CC))) {
+			p = e;
+			goto parse_eol;
+		}
+
+		if (stream->flags & PHP_STREAM_FLAG_EOL_MAC) {
+			eol_marker = '\r';
+		}
+
+		/* for performance reasons the code is duplicated, so that the if (include_new_line)
+		 * will not need to be done for every single line in the file. */
+		if (include_new_line) {
+			do {
+				p++;
+parse_eol:
+				add_index_stringl(return_value, i++, estrndup(s, p-s), p-s, 0);
+				s = p;
+			} while ((p = memchr(p, eol_marker, (e-p))));
+		} else {
+			do {
+				int windows_eol = 0;
+				if (p != target_buf && eol_marker == '\n' && *(p - 1) == '\r') {
+					windows_eol++;
+				}
+				if (skip_blank_lines && !(p-s-windows_eol)) {
+					s = ++p;
+					continue;
+				}
+				add_index_stringl(return_value, i++, estrndup(s, p-s-windows_eol), p-s-windows_eol, 0);
+				s = ++p;
+			} while ((p = memchr(p, eol_marker, (e-p))));
+		}
+
+		/* handle any left overs of files without new lines */
+		if (s != e) {
+			p = e;
+			goto parse_eol;
+		}
+	}
+
+	if (target_buf) {
+		efree(target_buf);
+	}
+	php_stream_close(stream);
+}
+/* }}} */
+
+/* {{{ proto string tempnam(string dir, string prefix)
+   Create a unique filename in a directory */
+PHP_FUNCTION(tempnam)
+{
+	char *dir, *prefix;
+	int dir_len, prefix_len;
+	size_t p_len;
+	char *opened_path;
+	char *p;
+	int fd;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ps", &dir, &dir_len, &prefix, &prefix_len) == FAILURE) {
+		return;
+	}
+
+	if (php_check_open_basedir(dir TSRMLS_CC)) {
+		RETURN_FALSE;
+	}
+
+	php_basename(prefix, prefix_len, NULL, 0, &p, &p_len TSRMLS_CC);
+	if (p_len > 64) {
+		p[63] = '\0';
+	}
+	
+	RETVAL_FALSE;
+
+	if ((fd = php_open_temporary_fd_ex(dir, p, &opened_path, 1 TSRMLS_CC)) >= 0) {
+		close(fd);
+		RETVAL_STRING(opened_path, 0);
+	}
+	efree(p);
+}
+/* }}} */
+
+/* {{{ proto resource tmpfile(void)
+   Create a temporary file that will be deleted automatically after use */
+PHP_NAMED_FUNCTION(php_if_tmpfile)
+{
+	php_stream *stream;
+
+	if (zend_parse_parameters_none() == FAILURE) {
+		return;
+	}
+
+	stream = php_stream_fopen_tmpfile();
+
+	if (stream) {
+		php_stream_to_zval(stream, return_value);
+	} else {
+		RETURN_FALSE;
+	}
+}
+/* }}} */
+
+/* {{{ proto resource fopen(string filename, string mode [, bool use_include_path [, resource context]])
+   Open a file or a URL and return a file pointer */
+PHP_NAMED_FUNCTION(php_if_fopen)
+{
+	char *filename, *mode;
+	int filename_len, mode_len;
+	zend_bool use_include_path = 0;
+	zval *zcontext = NULL;
+	php_stream *stream;
+	php_stream_context *context = NULL;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ps|br", &filename, &filename_len, &mode, &mode_len, &use_include_path, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	stream = php_stream_open_wrapper_ex(filename, mode, (use_include_path ? USE_PATH : 0) | REPORT_ERRORS, NULL, context);
+
+	if (stream == NULL) {
+		RETURN_FALSE;
+	}
+
+	php_stream_to_zval(stream, return_value);
+}
+/* }}} */
+
+/* {{{ proto bool fclose(resource fp)
+   Close an open file pointer */
+PHPAPI PHP_FUNCTION(fclose)
+{
+	zval *arg1;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	if ((stream->flags & PHP_STREAM_FLAG_NO_FCLOSE) != 0) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "%d is not a valid stream resource", stream->rsrc_id);
+		RETURN_FALSE;
+	}
+
+	if (!stream->is_persistent) {
+		php_stream_close(stream);
+	} else {
+		php_stream_pclose(stream);
+	}
+
+	RETURN_TRUE;
+}
+/* }}} */
+
+/* {{{ proto resource popen(string command, string mode)
+   Execute a command and open either a read or a write pipe to it */
+PHP_FUNCTION(popen)
+{
+	char *command, *mode;
+	int command_len, mode_len;
+	FILE *fp;
+	php_stream *stream;
+	char *posix_mode;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ps", &command, &command_len, &mode, &mode_len) == FAILURE) {
+		return;
+	}
+
+	posix_mode = estrndup(mode, mode_len);
+#ifndef PHP_WIN32
+	{
+		char *z = memchr(posix_mode, 'b', mode_len);
+		if (z) {
+			memmove(z, z + 1, mode_len - (z - posix_mode));
+		}
+	}
+#endif
+
+	fp = VCWD_POPEN(command, posix_mode);
+	if (!fp) {
+		php_error_docref2(NULL TSRMLS_CC, command, posix_mode, E_WARNING, "%s", strerror(errno));
+		efree(posix_mode);
+		RETURN_FALSE;
+	}
+
+	stream = php_stream_fopen_from_pipe(fp, mode);
+
+	if (stream == NULL)	{
+		php_error_docref2(NULL TSRMLS_CC, command, mode, E_WARNING, "%s", strerror(errno));
+		RETVAL_FALSE;
+	} else {
+		php_stream_to_zval(stream, return_value);
+	}
+
+	efree(posix_mode);
+}
+/* }}} */
+
+/* {{{ proto int pclose(resource fp)
+   Close a file pointer opened by popen() */
+PHP_FUNCTION(pclose)
+{
+	zval *arg1;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	zend_list_delete(stream->rsrc_id);
+	RETURN_LONG(FG(pclose_ret));
+}
+/* }}} */
+
+/* {{{ proto bool feof(resource fp)
+   Test for end-of-file on a file pointer */
+PHPAPI PHP_FUNCTION(feof)
+{
+	zval *arg1;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	if (php_stream_eof(stream)) {
+		RETURN_TRUE;
+	} else {
+		RETURN_FALSE;
+	}
+}
+/* }}} */
+
+/* {{{ proto string fgets(resource fp[, int length])
+   Get a line from file pointer */
+PHPAPI PHP_FUNCTION(fgets)
+{
+	zval *arg1;
+	long len = 1024;
+	char *buf = NULL;
+	int argc = ZEND_NUM_ARGS();
+	size_t line_len = 0;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|l", &arg1, &len) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	if (argc == 1) {
+		/* ask streams to give us a buffer of an appropriate size */
+		buf = php_stream_get_line(stream, NULL, 0, &line_len);
+		if (buf == NULL) {
+			goto exit_failed;
+		}
+	} else if (argc > 1) {
+		if (len <= 0) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Length parameter must be greater than 0");
+			RETURN_FALSE;
+		}
+
+		buf = ecalloc(len + 1, sizeof(char));
+		if (php_stream_get_line(stream, buf, len, &line_len) == NULL) {
+			goto exit_failed;
+		}
+	}
+
+	ZVAL_STRINGL(return_value, buf, line_len, 0);
+	/* resize buffer if it's much larger than the result.
+	 * Only needed if the user requested a buffer size. */
+	if (argc > 1 && Z_STRLEN_P(return_value) < len / 2) {
+		Z_STRVAL_P(return_value) = erealloc(buf, line_len + 1);
+	}
+	return;
+
+exit_failed:
+	RETVAL_FALSE;
+	if (buf) {
+		efree(buf);
+	}
+}
+/* }}} */
+
+/* {{{ proto string fgetc(resource fp)
+   Get a character from file pointer */
+PHPAPI PHP_FUNCTION(fgetc)
+{
+	zval *arg1;
+	char buf[2];
+	int result;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	result = php_stream_getc(stream);
+
+	if (result == EOF) {
+		RETVAL_FALSE;
+	} else {
+		buf[0] = result;
+		buf[1] = '\0';
+
+		RETURN_STRINGL(buf, 1, 1);
+	}
+}
+/* }}} */
+
+/* {{{ proto string fgetss(resource fp [, int length [, string allowable_tags]])
+   Get a line from file pointer and strip HTML tags */
+PHPAPI PHP_FUNCTION(fgetss)
+{
+	zval *fd;
+	long bytes = 0;
+	size_t len = 0;
+	size_t actual_len, retval_len;
+	char *buf = NULL, *retval;
+	php_stream *stream;
+	char *allowed_tags=NULL;
+	int allowed_tags_len=0;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|ls", &fd, &bytes, &allowed_tags, &allowed_tags_len) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &fd);
+
+	if (ZEND_NUM_ARGS() >= 2) {
+		if (bytes <= 0) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Length parameter must be greater than 0");
+			RETURN_FALSE;
+		}
+
+		len = (size_t) bytes;
+		buf = safe_emalloc(sizeof(char), (len + 1), 0);
+		/*needed because recv doesnt set null char at end*/
+		memset(buf, 0, len + 1);
+	}
+
+	if ((retval = php_stream_get_line(stream, buf, len, &actual_len)) == NULL)	{
+		if (buf != NULL) {
+			efree(buf);
+		}
+		RETURN_FALSE;
+	}
+
+	retval_len = php_strip_tags(retval, actual_len, &stream->fgetss_state, allowed_tags, allowed_tags_len);
+
+	RETURN_STRINGL(retval, retval_len, 0);
+}
+/* }}} */
+
+/* {{{ proto mixed fscanf(resource stream, string format [, string ...])
+   Implements a mostly ANSI compatible fscanf() */
+PHP_FUNCTION(fscanf)
+{
+	int result, format_len, type, argc = 0;
+	zval ***args = NULL;
+	zval *file_handle;
+	char *buf, *format;
+	size_t len;
+	void *what;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rs*", &file_handle, &format, &format_len, &args, &argc) == FAILURE) {
+		return;
+	}
+
+	what = zend_fetch_resource(&file_handle TSRMLS_CC, -1, "File-Handle", &type, 2, php_file_le_stream(), php_file_le_pstream());
+
+	/* we can't do a ZEND_VERIFY_RESOURCE(what), otherwise we end up
+	 * with a leak if we have an invalid filehandle. This needs changing
+	 * if the code behind ZEND_VERIFY_RESOURCE changed. - cc */
+	if (!what) {
+		if (args) {
+			efree(args);
+		}
+		RETURN_FALSE;
+	}
+
+	buf = php_stream_get_line((php_stream *) what, NULL, 0, &len);
+	if (buf == NULL) {
+		if (args) {
+			efree(args);
+		}
+		RETURN_FALSE;
+	}
+
+	result = php_sscanf_internal(buf, format, argc, args, 0, &return_value TSRMLS_CC);
+
+	if (args) {
+		efree(args);
+	}
+	efree(buf);
+
+	if (SCAN_ERROR_WRONG_PARAM_COUNT == result) {
+		WRONG_PARAM_COUNT;
+	}
+}
+/* }}} */
+
+/* {{{ proto int fwrite(resource fp, string str [, int length])
+   Binary-safe file write */
+PHPAPI PHP_FUNCTION(fwrite)
+{
+	zval *arg1;
+	char *arg2;
+	int arg2len;
+	int ret;
+	int num_bytes;
+	long arg3 = 0;
+	char *buffer = NULL;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rs|l", &arg1, &arg2, &arg2len, &arg3) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	if (ZEND_NUM_ARGS() == 2) {
+		num_bytes = arg2len;
+	} else {
+		num_bytes = MAX(0, MIN((int)arg3, arg2len));
+	}
+
+	if (!num_bytes) {
+		RETURN_LONG(0);
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	ret = php_stream_write(stream, buffer ? buffer : arg2, num_bytes);
+	if (buffer) {
+		efree(buffer);
+	}
+
+	RETURN_LONG(ret);
+}
+/* }}} */
+
+/* {{{ proto bool fflush(resource fp)
+   Flushes output */
+PHPAPI PHP_FUNCTION(fflush)
+{
+	zval *arg1;
+	int ret;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	ret = php_stream_flush(stream);
+	if (ret) {
+		RETURN_FALSE;
+	}
+	RETURN_TRUE;
+}
+/* }}} */
+
+/* {{{ proto bool rewind(resource fp)
+   Rewind the position of a file pointer */
+PHPAPI PHP_FUNCTION(rewind)
+{
+	zval *arg1;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	if (-1 == php_stream_rewind(stream)) {
+		RETURN_FALSE;
+	}
+	RETURN_TRUE;
+}
+/* }}} */
+
+/* {{{ proto int ftell(resource fp)
+   Get file pointer's read/write position */
+PHPAPI PHP_FUNCTION(ftell)
+{
+	zval *arg1;
+	long ret;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	ret = php_stream_tell(stream);
+	if (ret == -1)	{
+		RETURN_FALSE;
+	}
+	RETURN_LONG(ret);
+}
+/* }}} */
+
+/* {{{ proto int fseek(resource fp, int offset [, int whence])
+   Seek on a file pointer */
+PHPAPI PHP_FUNCTION(fseek)
+{
+	zval *arg1;
+	long arg2, whence = SEEK_SET;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rl|l", &arg1, &arg2, &whence) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	RETURN_LONG(php_stream_seek(stream, arg2, whence));
+}
+/* }}} */
+
+/* {{{ php_mkdir
+*/
+
+/* DEPRECATED APIs: Use php_stream_mkdir() instead */
+PHPAPI int php_mkdir_ex(char *dir, long mode, int options TSRMLS_DC)
+{
+	int ret;
+
+	if (php_check_open_basedir(dir TSRMLS_CC)) {
+		return -1;
+	}
+
+	if ((ret = VCWD_MKDIR(dir, (mode_t)mode)) < 0 && (options & REPORT_ERRORS)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s", strerror(errno));
+	}
+
+	return ret;
+}
+
+PHPAPI int php_mkdir(char *dir, long mode TSRMLS_DC)
+{
+	return php_mkdir_ex(dir, mode, REPORT_ERRORS TSRMLS_CC);
+}
+/* }}} */
+
+/* {{{ proto bool mkdir(string pathname [, int mode [, bool recursive [, resource context]]])
+   Create a directory */
+PHP_FUNCTION(mkdir)
+{
+	char *dir;
+	int dir_len;
+	zval *zcontext = NULL;
+	long mode = 0777;
+	zend_bool recursive = 0;
+	php_stream_context *context;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|lbr", &dir, &dir_len, &mode, &recursive, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	RETURN_BOOL(php_stream_mkdir(dir, mode, (recursive ? PHP_STREAM_MKDIR_RECURSIVE : 0) | REPORT_ERRORS, context));
+}
+/* }}} */
+
+/* {{{ proto bool rmdir(string dirname[, resource context])
+   Remove a directory */
+PHP_FUNCTION(rmdir)
+{
+	char *dir;
+	int dir_len;
+	zval *zcontext = NULL;
+	php_stream_context *context;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|r", &dir, &dir_len, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	RETURN_BOOL(php_stream_rmdir(dir, REPORT_ERRORS, context));
+}
+/* }}} */
+
+/* {{{ proto int readfile(string filename [, bool use_include_path[, resource context]])
+   Output a file or a URL */
+PHP_FUNCTION(readfile)
+{
+	char *filename;
+	int filename_len;
+	int size = 0;
+	zend_bool use_include_path = 0;
+	zval *zcontext = NULL;
+	php_stream *stream;
+	php_stream_context *context = NULL;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|br!", &filename, &filename_len, &use_include_path, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	stream = php_stream_open_wrapper_ex(filename, "rb", (use_include_path ? USE_PATH : 0) | REPORT_ERRORS, NULL, context);
+	if (stream) {
+		size = php_stream_passthru(stream);
+		php_stream_close(stream);
+		RETURN_LONG(size);
+	}
+
+	RETURN_FALSE;
+}
+/* }}} */
+
+/* {{{ proto int umask([int mask])
+   Return or change the umask */
+PHP_FUNCTION(umask)
+{
+	long arg1 = 0;
+	int oldumask;
+	
+	oldumask = umask(077);
+
+	if (BG(umask) == -1) {
+		BG(umask) = oldumask;
+	}
+	
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|l", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	if (ZEND_NUM_ARGS() == 0) {
+		umask(oldumask);
+	} else {
+		umask(arg1);
+	}
+
+	RETURN_LONG(oldumask);
+}
+/* }}} */
+
+/* {{{ proto int fpassthru(resource fp)
+   Output all remaining data from a file pointer */
+PHPAPI PHP_FUNCTION(fpassthru)
+{
+	zval *arg1;
+	int size;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &arg1) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	size = php_stream_passthru(stream);
+	RETURN_LONG(size);
+}
+/* }}} */
+
+/* {{{ proto bool rename(string old_name, string new_name[, resource context])
+   Rename a file */
+PHP_FUNCTION(rename)
+{
+	char *old_name, *new_name;
+	int old_name_len, new_name_len;
+	zval *zcontext = NULL;
+	php_stream_wrapper *wrapper;
+	php_stream_context *context;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "pp|r", &old_name, &old_name_len, &new_name, &new_name_len, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	wrapper = php_stream_locate_url_wrapper(old_name, NULL, 0 TSRMLS_CC);
+
+	if (!wrapper || !wrapper->wops) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to locate stream wrapper");
+		RETURN_FALSE;
+	}
+
+	if (!wrapper->wops->rename) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s wrapper does not support renaming", wrapper->wops->label ? wrapper->wops->label : "Source");
+		RETURN_FALSE;
+	}
+
+	if (wrapper != php_stream_locate_url_wrapper(new_name, NULL, 0 TSRMLS_CC)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Cannot rename a file across wrapper types");
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	RETURN_BOOL(wrapper->wops->rename(wrapper, old_name, new_name, 0, context TSRMLS_CC));
+}
+/* }}} */
+
+/* {{{ proto bool unlink(string filename[, context context])
+   Delete a file */
+PHP_FUNCTION(unlink)
+{
+	char *filename;
+	int filename_len;
+	php_stream_wrapper *wrapper;
+	zval *zcontext = NULL;
+	php_stream_context *context = NULL;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p|r", &filename, &filename_len, &zcontext) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	wrapper = php_stream_locate_url_wrapper(filename, NULL, 0 TSRMLS_CC);
+
+	if (!wrapper || !wrapper->wops) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to locate stream wrapper");
+		RETURN_FALSE;
+	}
+
+	if (!wrapper->wops->unlink) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s does not allow unlinking", wrapper->wops->label ? wrapper->wops->label : "Wrapper");
+		RETURN_FALSE;
+	}
+	RETURN_BOOL(wrapper->wops->unlink(wrapper, filename, REPORT_ERRORS, context TSRMLS_CC));
+}
+/* }}} */
+
+/* {{{ proto bool ftruncate(resource fp, int size)
+   Truncate file to 'size' length */
+PHP_NAMED_FUNCTION(php_if_ftruncate)
+{
+	zval *fp;
+	long size;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rl", &fp, &size) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &fp);
+
+	if (!php_stream_truncate_supported(stream)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can't truncate this stream!");
+		RETURN_FALSE;
+	}
+
+	RETURN_BOOL(0 == php_stream_truncate_set_size(stream, size));
+}
+/* }}} */
+
+/* {{{ proto array fstat(resource fp)
+   Stat() on a filehandle */
+PHP_NAMED_FUNCTION(php_if_fstat)
+{
+	zval *fp;
+	zval *stat_dev, *stat_ino, *stat_mode, *stat_nlink, *stat_uid, *stat_gid, *stat_rdev,
+		 *stat_size, *stat_atime, *stat_mtime, *stat_ctime, *stat_blksize, *stat_blocks;
+	php_stream *stream;
+	php_stream_statbuf stat_ssb;
+	char *stat_sb_names[13] = {
+		"dev", "ino", "mode", "nlink", "uid", "gid", "rdev",
+		"size", "atime", "mtime", "ctime", "blksize", "blocks"
+	};
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &fp) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &fp);
+
+	if (php_stream_stat(stream, &stat_ssb)) {
+		RETURN_FALSE;
+	}
+
+	array_init(return_value);
+
+	MAKE_LONG_ZVAL_INCREF(stat_dev, stat_ssb.sb.st_dev);
+	MAKE_LONG_ZVAL_INCREF(stat_ino, stat_ssb.sb.st_ino);
+	MAKE_LONG_ZVAL_INCREF(stat_mode, stat_ssb.sb.st_mode);
+	MAKE_LONG_ZVAL_INCREF(stat_nlink, stat_ssb.sb.st_nlink);
+	MAKE_LONG_ZVAL_INCREF(stat_uid, stat_ssb.sb.st_uid);
+	MAKE_LONG_ZVAL_INCREF(stat_gid, stat_ssb.sb.st_gid);
+#ifdef HAVE_ST_RDEV
+	MAKE_LONG_ZVAL_INCREF(stat_rdev, stat_ssb.sb.st_rdev);
+#else
+	MAKE_LONG_ZVAL_INCREF(stat_rdev, -1);
+#endif
+	MAKE_LONG_ZVAL_INCREF(stat_size, stat_ssb.sb.st_size);
+	MAKE_LONG_ZVAL_INCREF(stat_atime, stat_ssb.sb.st_atime);
+	MAKE_LONG_ZVAL_INCREF(stat_mtime, stat_ssb.sb.st_mtime);
+	MAKE_LONG_ZVAL_INCREF(stat_ctime, stat_ssb.sb.st_ctime);
+#ifdef HAVE_ST_BLKSIZE
+	MAKE_LONG_ZVAL_INCREF(stat_blksize, stat_ssb.sb.st_blksize);
+#else
+	MAKE_LONG_ZVAL_INCREF(stat_blksize,-1);
+#endif
+#ifdef HAVE_ST_BLOCKS
+	MAKE_LONG_ZVAL_INCREF(stat_blocks, stat_ssb.sb.st_blocks);
+#else
+	MAKE_LONG_ZVAL_INCREF(stat_blocks,-1);
+#endif
+	/* Store numeric indexes in propper order */
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_dev, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_ino, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_mode, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_nlink, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_uid, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_gid, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_rdev, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_size, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_atime, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_mtime, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_ctime, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_blksize, sizeof(zval *), NULL);
+	zend_hash_next_index_insert(HASH_OF(return_value), (void *)&stat_blocks, sizeof(zval *), NULL);
+
+	/* Store string indexes referencing the same zval*/
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[0], strlen(stat_sb_names[0])+1, (void *)&stat_dev, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[1], strlen(stat_sb_names[1])+1, (void *)&stat_ino, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[2], strlen(stat_sb_names[2])+1, (void *)&stat_mode, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[3], strlen(stat_sb_names[3])+1, (void *)&stat_nlink, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[4], strlen(stat_sb_names[4])+1, (void *)&stat_uid, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[5], strlen(stat_sb_names[5])+1, (void *)&stat_gid, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[6], strlen(stat_sb_names[6])+1, (void *)&stat_rdev, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[7], strlen(stat_sb_names[7])+1, (void *)&stat_size, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[8], strlen(stat_sb_names[8])+1, (void *)&stat_atime, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[9], strlen(stat_sb_names[9])+1, (void *)&stat_mtime, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[10], strlen(stat_sb_names[10])+1, (void *)&stat_ctime, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[11], strlen(stat_sb_names[11])+1, (void *)&stat_blksize, sizeof(zval *), NULL);
+	zend_hash_update(HASH_OF(return_value), stat_sb_names[12], strlen(stat_sb_names[12])+1, (void *)&stat_blocks, sizeof(zval *), NULL);
+}
+/* }}} */
+
+/* {{{ proto bool copy(string source_file, string destination_file [, resource context])
+   Copy a file */
+PHP_FUNCTION(copy)
+{
+	char *source, *target;
+	int source_len, target_len;
+	zval *zcontext = NULL;
+	php_stream_context *context;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "pp|r", &source, &source_len, &target, &target_len, &zcontext) == FAILURE) {
+		return;
+	}
+
+	if (php_check_open_basedir(source TSRMLS_CC)) {
+		RETURN_FALSE;
+	}
+
+	context = php_stream_context_from_zval(zcontext, 0);
+
+	if (php_copy_file_ctx(source, target, 0, context TSRMLS_CC) == SUCCESS) {
+		RETURN_TRUE;
+	} else {
+		RETURN_FALSE;
+	}
+}
+/* }}} */
+
+/* {{{ php_copy_file
+ */
+PHPAPI int php_copy_file(char *src, char *dest TSRMLS_DC)
+{
+	return php_copy_file_ctx(src, dest, 0, NULL TSRMLS_CC);
+}
+/* }}} */
+
+/* {{{ php_copy_file_ex
+ */
+PHPAPI int php_copy_file_ex(char *src, char *dest, int src_flg TSRMLS_DC)
+{
+	return php_copy_file_ctx(src, dest, 0, NULL TSRMLS_CC);
+}
+/* }}} */
+
+/* {{{ php_copy_file_ctx
+ */
+PHPAPI int php_copy_file_ctx(char *src, char *dest, int src_flg, php_stream_context *ctx TSRMLS_DC)
+{
+	php_stream *srcstream = NULL, *deststream = NULL;
+	int ret = FAILURE;
+	php_stream_statbuf src_s, dest_s;
+
+	switch (php_stream_stat_path_ex(src, 0, &src_s, ctx)) {
+		case -1:
+			/* non-statable stream */
+			goto safe_to_copy;
+			break;
+		case 0:
+			break;
+		default: /* failed to stat file, does not exist? */
+			return ret;
+	}
+	if (S_ISDIR(src_s.sb.st_mode)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "The first argument to copy() function cannot be a directory");
+		return FAILURE;
+	}
+
+	switch (php_stream_stat_path_ex(dest, PHP_STREAM_URL_STAT_QUIET | PHP_STREAM_URL_STAT_NOCACHE, &dest_s, ctx)) {
+		case -1:
+			/* non-statable stream */
+			goto safe_to_copy;
+			break;
+		case 0:
+			break;
+		default: /* failed to stat file, does not exist? */
+			return ret;
+	}
+	if (S_ISDIR(dest_s.sb.st_mode)) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "The second argument to copy() function cannot be a directory");
+		return FAILURE;
+	}
+	if (!src_s.sb.st_ino || !dest_s.sb.st_ino) {
+		goto no_stat;
+	}
+	if (src_s.sb.st_ino == dest_s.sb.st_ino && src_s.sb.st_dev == dest_s.sb.st_dev) {
+		return ret;
+	} else {
+		goto safe_to_copy;
+	}
+no_stat:
+	{
+		char *sp, *dp;
+		int res;
+
+		if ((sp = expand_filepath(src, NULL TSRMLS_CC)) == NULL) {
+			return ret;
+		}
+		if ((dp = expand_filepath(dest, NULL TSRMLS_CC)) == NULL) {
+			efree(sp);
+			goto safe_to_copy;
+		}
+
+		res =
+#ifndef PHP_WIN32
+			!strcmp(sp, dp);
+#else
+			!strcasecmp(sp, dp);
+#endif
+
+		efree(sp);
+		efree(dp);
+		if (res) {
+			return ret;
+		}
+	}
+safe_to_copy:
+
+	srcstream = php_stream_open_wrapper_ex(src, "rb", src_flg | REPORT_ERRORS, NULL, ctx);
+
+	if (!srcstream) {
+		return ret;
+	}
+
+	deststream = php_stream_open_wrapper_ex(dest, "wb", REPORT_ERRORS, NULL, ctx);
+
+	if (srcstream && deststream) {
+		ret = php_stream_copy_to_stream_ex(srcstream, deststream, PHP_STREAM_COPY_ALL, NULL);
+	}
+	if (srcstream) {
+		php_stream_close(srcstream);
+	}
+	if (deststream) {
+		php_stream_close(deststream);
+	}
+	return ret;
+}
+/* }}} */
+
+/* {{{ proto string fread(resource fp, int length)
+   Binary-safe file read */
+PHPAPI PHP_FUNCTION(fread)
+{
+	zval *arg1;
+	long len;
+	php_stream *stream;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rl", &arg1, &len) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &arg1);
+
+	if (len <= 0) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Length parameter must be greater than 0");
+		RETURN_FALSE;
+	}
+
+	Z_STRVAL_P(return_value) = emalloc(len + 1);
+	Z_STRLEN_P(return_value) = php_stream_read(stream, Z_STRVAL_P(return_value), len);
+
+	/* needed because recv/read/gzread doesnt put a null at the end*/
+	Z_STRVAL_P(return_value)[Z_STRLEN_P(return_value)] = 0;
+	Z_TYPE_P(return_value) = IS_STRING;
+}
+/* }}} */
+
+static const char *php_fgetcsv_lookup_trailing_spaces(const char *ptr, size_t len, const char delimiter TSRMLS_DC) /* {{{ */
+{
+	int inc_len;
+	unsigned char last_chars[2] = { 0, 0 };
+
+	while (len > 0) {
+		inc_len = (*ptr == '\0' ? 1: php_mblen(ptr, len));
+		switch (inc_len) {
+			case -2:
+			case -1:
+				inc_len = 1;
+				php_ignore_value(php_mblen(NULL, 0));
+				break;
+			case 0:
+				goto quit_loop;
+			case 1:
+			default:
+				last_chars[0] = last_chars[1];
+				last_chars[1] = *ptr;
+				break;
+		}
+		ptr += inc_len;
+		len -= inc_len;
+	}
+quit_loop:
+	switch (last_chars[1]) {
+		case '\n':
+			if (last_chars[0] == '\r') {
+				return ptr - 2;
+			}
+			/* break is omitted intentionally */
+		case '\r':
+			return ptr - 1;
+	}
+	return ptr;
+}
+/* }}} */
+
+#define FPUTCSV_FLD_CHK(c) memchr(Z_STRVAL(field), c, Z_STRLEN(field))
+
+/* {{{ proto int fputcsv(resource fp, array fields [, string delimiter [, string enclosure]])
+   Format line as CSV and write to file pointer */
+PHP_FUNCTION(fputcsv)
+{
+	char delimiter = ',';	/* allow this to be set as parameter */
+	char enclosure = '"';	/* allow this to be set as parameter */
+	const char escape_char = '\\';
+	php_stream *stream;
+	zval *fp = NULL, *fields = NULL;
+	int ret;
+	char *delimiter_str = NULL, *enclosure_str = NULL;
+	int delimiter_str_len = 0, enclosure_str_len = 0;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ra|ss",
+			&fp, &fields, &delimiter_str, &delimiter_str_len,
+			&enclosure_str, &enclosure_str_len) == FAILURE) {
+		return;
+	}
+
+	if (delimiter_str != NULL) {
+		/* Make sure that there is at least one character in string */
+		if (delimiter_str_len < 1) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "delimiter must be a character");
+			RETURN_FALSE;
+		} else if (delimiter_str_len > 1) {
+			php_error_docref(NULL TSRMLS_CC, E_NOTICE, "delimiter must be a single character");
+		}
+
+		/* use first character from string */
+		delimiter = *delimiter_str;
+	}
+
+	if (enclosure_str != NULL) {
+		if (enclosure_str_len < 1) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "enclosure must be a character");
+			RETURN_FALSE;
+		} else if (enclosure_str_len > 1) {
+			php_error_docref(NULL TSRMLS_CC, E_NOTICE, "enclosure must be a single character");
+		}
+		/* use first character from string */
+		enclosure = *enclosure_str;
+	}
+
+	PHP_STREAM_TO_ZVAL(stream, &fp);
+
+	ret = php_fputcsv(stream, fields, delimiter, enclosure, escape_char TSRMLS_CC);
+	RETURN_LONG(ret);
+}
+/* }}} */
+
+/* {{{ PHPAPI int php_fputcsv(php_stream *stream, zval *fields, char delimiter, char enclosure, char escape_char TSRMLS_DC) */
+PHPAPI int php_fputcsv(php_stream *stream, zval *fields, char delimiter, char enclosure, char escape_char TSRMLS_DC)
+{
+	int count, i = 0, ret;
+	zval **field_tmp = NULL, field;
+	smart_str csvline = {0};
+	HashPosition pos;
+
+	count = zend_hash_num_elements(Z_ARRVAL_P(fields));
+	zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(fields), &pos);
+	while (zend_hash_get_current_data_ex(Z_ARRVAL_P(fields), (void **) &field_tmp, &pos) == SUCCESS) {
+		field = **field_tmp;
+
+		if (Z_TYPE_PP(field_tmp) != IS_STRING) {
+			zval_copy_ctor(&field);
+			convert_to_string(&field);
+		}
+
+		/* enclose a field that contains a delimiter, an enclosure character, or a newline */
+		if (FPUTCSV_FLD_CHK(delimiter) ||
+			FPUTCSV_FLD_CHK(enclosure) ||
+			FPUTCSV_FLD_CHK(escape_char) ||
+			FPUTCSV_FLD_CHK('\n') ||
+			FPUTCSV_FLD_CHK('\r') ||
+			FPUTCSV_FLD_CHK('\t') ||
+			FPUTCSV_FLD_CHK(' ')
+		) {
+			char *ch = Z_STRVAL(field);
+			char *end = ch + Z_STRLEN(field);
+			int escaped = 0;
+
+			smart_str_appendc(&csvline, enclosure);
+			while (ch < end) {
+				if (*ch == escape_char) {
+					escaped = 1;
+				} else if (!escaped && *ch == enclosure) {
+					smart_str_appendc(&csvline, enclosure);
+				} else {
+					escaped = 0;
+				}
+				smart_str_appendc(&csvline, *ch);
+				ch++;
+			}
+			smart_str_appendc(&csvline, enclosure);
+		} else {
+			smart_str_appendl(&csvline, Z_STRVAL(field), Z_STRLEN(field));
+		}
+
+		if (++i != count) {
+			smart_str_appendl(&csvline, &delimiter, 1);
+		}
+		zend_hash_move_forward_ex(Z_ARRVAL_P(fields), &pos);
+
+		if (Z_TYPE_PP(field_tmp) != IS_STRING) {
+			zval_dtor(&field);
+		}
+	}
+
+	smart_str_appendc(&csvline, '\n');
+	smart_str_0(&csvline);
+
+	ret = php_stream_write(stream, csvline.c, csvline.len);
+
+	smart_str_free(&csvline);
+
+	return ret;
+}
+/* }}} */
+
+/* {{{ proto array fgetcsv(resource fp [,int length [, string delimiter [, string enclosure [, string escape]]]])
+   Get line from file pointer and parse for CSV fields */
+PHP_FUNCTION(fgetcsv)
+{
+	char delimiter = ',';	/* allow this to be set as parameter */
+	char enclosure = '"';	/* allow this to be set as parameter */
+	char escape = '\\';
+
+	/* first section exactly as php_fgetss */
+
+	long len = 0;
+	size_t buf_len;
+	char *buf;
+	php_stream *stream;
+
+	{
+		zval *fd, **len_zv = NULL;
+		char *delimiter_str = NULL;
+		int delimiter_str_len = 0;
+		char *enclosure_str = NULL;
+		int enclosure_str_len = 0;
+		char *escape_str = NULL;
+		int escape_str_len = 0;
+
+		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|Zsss",
+			&fd, &len_zv, &delimiter_str, &delimiter_str_len,
+			&enclosure_str, &enclosure_str_len,
+			&escape_str, &escape_str_len) == FAILURE
+		) {
+			return;
+		}
+
+		if (delimiter_str != NULL) {
+			/* Make sure that there is at least one character in string */
+			if (delimiter_str_len < 1) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "delimiter must be a character");
+				RETURN_FALSE;
+			} else if (delimiter_str_len > 1) {
+				php_error_docref(NULL TSRMLS_CC, E_NOTICE, "delimiter must be a single character");
+			}
+
+			/* use first character from string */
+			delimiter = delimiter_str[0];
+		}
+
+		if (enclosure_str != NULL) {
+			if (enclosure_str_len < 1) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "enclosure must be a character");
+				RETURN_FALSE;
+			} else if (enclosure_str_len > 1) {
+				php_error_docref(NULL TSRMLS_CC, E_NOTICE, "enclosure must be a single character");
+			}
+
+			/* use first character from string */
+			enclosure = enclosure_str[0];
+		}
+
+		if (escape_str != NULL) {
+			if (escape_str_len < 1) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "escape must be character");
+				RETURN_FALSE;
+			} else if (escape_str_len > 1) {
+				php_error_docref(NULL TSRMLS_CC, E_NOTICE, "escape must be a single character");
+			}
+
+			escape = escape_str[0];
+		}
+
+		if (len_zv != NULL && Z_TYPE_PP(len_zv) != IS_NULL) {
+			convert_to_long_ex(len_zv);
+			len = Z_LVAL_PP(len_zv);
+			if (len < 0) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "Length parameter may not be negative");
+				RETURN_FALSE;
+			} else if (len == 0) {
+				len = -1;
+			}
+		} else {
+			len = -1;
+		}
+
+		PHP_STREAM_TO_ZVAL(stream, &fd);
+	}
+
+	if (len < 0) {
+		if ((buf = php_stream_get_line(stream, NULL, 0, &buf_len)) == NULL) {
+			RETURN_FALSE;
+		}
+	} else {
+		buf = emalloc(len + 1);
+		if (php_stream_get_line(stream, buf, len + 1, &buf_len) == NULL) {
+			efree(buf);
+			RETURN_FALSE;
+		}
+	}
+
+	php_fgetcsv(stream, delimiter, enclosure, escape, buf_len, buf, return_value TSRMLS_CC);
+}
+/* }}} */
+
+PHPAPI void php_fgetcsv(php_stream *stream, char delimiter, char enclosure, char escape_char, size_t buf_len, char *buf, zval *return_value TSRMLS_DC) /* {{{ */
+{
+	char *temp, *tptr, *bptr, *line_end, *limit;
+	size_t temp_len, line_end_len;
+	int inc_len;
+	zend_bool first_field = 1;
+
+	/* initialize internal state */
+	php_ignore_value(php_mblen(NULL, 0));
+
+	/* Now into new section that parses buf for delimiter/enclosure fields */
+
+	/* Strip trailing space from buf, saving end of line in case required for enclosure field */
+
+	bptr = buf;
+	tptr = (char *)php_fgetcsv_lookup_trailing_spaces(buf, buf_len, delimiter TSRMLS_CC);
+	line_end_len = buf_len - (size_t)(tptr - buf);
+	line_end = limit = tptr;
+
+	/* reserve workspace for building each individual field */
+	temp_len = buf_len;
+	temp = emalloc(temp_len + line_end_len + 1);
+
+	/* Initialize return array */
+	array_init(return_value);
+
+	/* Main loop to read CSV fields */
+	/* NB this routine will return a single null entry for a blank line */
+
+	do {
+		char *comp_end, *hunk_begin;
+
+		tptr = temp;
+
+		inc_len = (bptr < limit ? (*bptr == '\0' ? 1: php_mblen(bptr, limit - bptr)): 0);
+		if (inc_len == 1) {
+			char *tmp = bptr;
+			while ((*tmp != delimiter) && isspace((int)*(unsigned char *)tmp)) {
+				tmp++;
+			}
+			if (*tmp == enclosure) {
+				bptr = tmp;
+			}
+		}
+
+		if (first_field && bptr == line_end) {
+			add_next_index_null(return_value);
+			break;
+		}
+		first_field = 0;
+		/* 2. Read field, leaving bptr pointing at start of next field */
+		if (inc_len != 0 && *bptr == enclosure) {
+			int state = 0;
+
+			bptr++;	/* move on to first character in field */
+			hunk_begin = bptr;
+
+			/* 2A. handle enclosure delimited field */
+			for (;;) {
+				switch (inc_len) {
+					case 0:
+						switch (state) {
+							case 2:
+								memcpy(tptr, hunk_begin, bptr - hunk_begin - 1);
+								tptr += (bptr - hunk_begin - 1);
+								hunk_begin = bptr;
+								goto quit_loop_2;
+
+							case 1:
+								memcpy(tptr, hunk_begin, bptr - hunk_begin);
+								tptr += (bptr - hunk_begin);
+								hunk_begin = bptr;
+								/* break is omitted intentionally */
+
+							case 0: {
+								char *new_buf;
+								size_t new_len;
+								char *new_temp;
+
+								if (hunk_begin != line_end) {
+									memcpy(tptr, hunk_begin, bptr - hunk_begin);
+									tptr += (bptr - hunk_begin);
+									hunk_begin = bptr;
+								}
+
+								/* add the embedded line end to the field */
+								memcpy(tptr, line_end, line_end_len);
+								tptr += line_end_len;
+
+								if (stream == NULL) {
+									goto quit_loop_2;
+								} else if ((new_buf = php_stream_get_line(stream, NULL, 0, &new_len)) == NULL) {
+									/* we've got an unterminated enclosure,
+									 * assign all the data from the start of
+									 * the enclosure to end of data to the
+									 * last element */
+									if ((size_t)temp_len > (size_t)(limit - buf)) {
+										goto quit_loop_2;
+									}
+									zval_dtor(return_value);
+									RETVAL_FALSE;
+									goto out;
+								}
+								temp_len += new_len;
+								new_temp = erealloc(temp, temp_len);
+								tptr = new_temp + (size_t)(tptr - temp);
+								temp = new_temp;
+
+								efree(buf);
+								buf_len = new_len;
+								bptr = buf = new_buf;
+								hunk_begin = buf;
+
+								line_end = limit = (char *)php_fgetcsv_lookup_trailing_spaces(buf, buf_len, delimiter TSRMLS_CC);
+								line_end_len = buf_len - (size_t)(limit - buf);
+
+								state = 0;
+							} break;
+						}
+						break;
+
+					case -2:
+					case -1:
+						php_ignore_value(php_mblen(NULL, 0));
+						/* break is omitted intentionally */
+					case 1:
+						/* we need to determine if the enclosure is
+						 * 'real' or is it escaped */
+						switch (state) {
+							case 1: /* escaped */
+								bptr++;
+								state = 0;
+								break;
+							case 2: /* embedded enclosure ? let's check it */
+								if (*bptr != enclosure) {
+									/* real enclosure */
+									memcpy(tptr, hunk_begin, bptr - hunk_begin - 1);
+									tptr += (bptr - hunk_begin - 1);
+									hunk_begin = bptr;
+									goto quit_loop_2;
+								}
+								memcpy(tptr, hunk_begin, bptr - hunk_begin);
+								tptr += (bptr - hunk_begin);
+								bptr++;
+								hunk_begin = bptr;
+								state = 0;
+								break;
+							default:
+								if (*bptr == enclosure) {
+									state = 2;
+								} else if (*bptr == escape_char) {
+									state = 1;
+								}
+								bptr++;
+								break;
+						}
+						break;
+
+					default:
+						switch (state) {
+							case 2:
+								/* real enclosure */
+								memcpy(tptr, hunk_begin, bptr - hunk_begin - 1);
+								tptr += (bptr - hunk_begin - 1);
+								hunk_begin = bptr;
+								goto quit_loop_2;
+							case 1:
+								bptr += inc_len;
+								memcpy(tptr, hunk_begin, bptr - hunk_begin);
+								tptr += (bptr - hunk_begin);
+								hunk_begin = bptr;
+								break;
+							default:
+								bptr += inc_len;
+								break;
+						}
+						break;
+				}
+				inc_len = (bptr < limit ? (*bptr == '\0' ? 1: php_mblen(bptr, limit - bptr)): 0);
+			}
+
+		quit_loop_2:
+			/* look up for a delimiter */
+			for (;;) {
+				switch (inc_len) {
+					case 0:
+						goto quit_loop_3;
+
+					case -2:
+					case -1:
+						inc_len = 1;
+						php_ignore_value(php_mblen(NULL, 0));
+						/* break is omitted intentionally */
+					case 1:
+						if (*bptr == delimiter) {
+							goto quit_loop_3;
+						}
+						break;
+					default:
+						break;
+				}
+				bptr += inc_len;
+				inc_len = (bptr < limit ? (*bptr == '\0' ? 1: php_mblen(bptr, limit - bptr)): 0);
+			}
+
+		quit_loop_3:
+			memcpy(tptr, hunk_begin, bptr - hunk_begin);
+			tptr += (bptr - hunk_begin);
+			bptr += inc_len;
+			comp_end = tptr;
+		} else {
+			/* 2B. Handle non-enclosure field */
+
+			hunk_begin = bptr;
+
+			for (;;) {
+				switch (inc_len) {
+					case 0:
+						goto quit_loop_4;
+					case -2:
+					case -1:
+						inc_len = 1;
+						php_ignore_value(php_mblen(NULL, 0));
+						/* break is omitted intentionally */
+					case 1:
+						if (*bptr == delimiter) {
+							goto quit_loop_4;
+						}
+						break;
+					default:
+						break;
+				}
+				bptr += inc_len;
+				inc_len = (bptr < limit ? (*bptr == '\0' ? 1: php_mblen(bptr, limit - bptr)): 0);
+			}
+		quit_loop_4:
+			memcpy(tptr, hunk_begin, bptr - hunk_begin);
+			tptr += (bptr - hunk_begin);
+
+			comp_end = (char *)php_fgetcsv_lookup_trailing_spaces(temp, tptr - temp, delimiter TSRMLS_CC);
+			if (*bptr == delimiter) {
+				bptr++;
+			}
+		}
+
+		/* 3. Now pass our field back to php */
+		*comp_end = '\0';
+		add_next_index_stringl(return_value, temp, comp_end - temp, 1);
+	} while (inc_len > 0);
+
+out:
+	efree(temp);
+	if (stream) {
+		efree(buf);
+	}
+}
+/* }}} */
+
+#if (!defined(__BEOS__) && !defined(NETWARE) && HAVE_REALPATH) || defined(ZTS)
+/* {{{ proto string realpath(string path)
+   Return the resolved path */
+PHP_FUNCTION(realpath)
+{
+	char *filename;
+	int filename_len;
+	char resolved_path_buff[MAXPATHLEN];
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "p", &filename, &filename_len) == FAILURE) {
+		return;
+	}
+
+	if (VCWD_REALPATH(filename, resolved_path_buff)) {
+		if (php_check_open_basedir(resolved_path_buff TSRMLS_CC)) {
+			RETURN_FALSE;
+		}
+
+#ifdef ZTS
+		if (VCWD_ACCESS(resolved_path_buff, F_OK)) {
+			RETURN_FALSE;
+		}
+#endif
+		RETURN_STRING(resolved_path_buff, 1);
+	} else {
+		RETURN_FALSE;
+	}
+}
+/* }}} */
+#endif
+
+/* See http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.2 */
+#define PHP_META_HTML401_CHARS "-_.:"
+
+/* {{{ php_next_meta_token
+   Tokenizes an HTML file for get_meta_tags */
+php_meta_tags_token php_next_meta_token(php_meta_tags_data *md TSRMLS_DC)
+{
+	int ch = 0, compliment;
+	char buff[META_DEF_BUFSIZE + 1];
+
+	memset((void *)buff, 0, META_DEF_BUFSIZE + 1);
+
+	while (md->ulc || (!php_stream_eof(md->stream) && (ch = php_stream_getc(md->stream)))) {
+		if (php_stream_eof(md->stream)) {
+			break;
+		}
+
+		if (md->ulc) {
+			ch = md->lc;
+			md->ulc = 0;
+		}
+
+		switch (ch) {
+			case '<':
+				return TOK_OPENTAG;
+				break;
+
+			case '>':
+				return TOK_CLOSETAG;
+				break;
+
+			case '=':
+				return TOK_EQUAL;
+				break;
+			case '/':
+				return TOK_SLASH;
+				break;
+
+			case '\'':
+			case '"':
+				compliment = ch;
+				md->token_len = 0;
+				while (!php_stream_eof(md->stream) && (ch = php_stream_getc(md->stream)) && ch != compliment && ch != '<' && ch != '>') {
+					buff[(md->token_len)++] = ch;
+
+					if (md->token_len == META_DEF_BUFSIZE) {
+						break;
+					}
+				}
+
+				if (ch == '<' || ch == '>') {
+					/* Was just an apostrohpe */
+					md->ulc = 1;
+					md->lc = ch;
+				}
+
+				/* We don't need to alloc unless we are in a meta tag */
+				if (md->in_meta) {
+					md->token_data = (char *) emalloc(md->token_len + 1);
+					memcpy(md->token_data, buff, md->token_len+1);
+				}
+
+				return TOK_STRING;
+				break;
+
+			case '\n':
+			case '\r':
+			case '\t':
+				break;
+
+			case ' ':
+				return TOK_SPACE;
+				break;
+
+			default:
+				if (isalnum(ch)) {
+					md->token_len = 0;
+					buff[(md->token_len)++] = ch;
+					while (!php_stream_eof(md->stream) && (ch = php_stream_getc(md->stream)) && (isalnum(ch) || strchr(PHP_META_HTML401_CHARS, ch))) {
+						buff[(md->token_len)++] = ch;
+
+						if (md->token_len == META_DEF_BUFSIZE) {
+							break;
+						}
+					}
+
+					/* This is ugly, but we have to replace ungetc */
+					if (!isalpha(ch) && ch != '-') {
+						md->ulc = 1;
+						md->lc = ch;
+					}
+
+					md->token_data = (char *) emalloc(md->token_len + 1);
+					memcpy(md->token_data, buff, md->token_len+1);
+
+					return TOK_ID;
+				} else {
+					return TOK_OTHER;
+				}
+				break;
+		}
+	}
+
+	return TOK_EOF;
+}
+/* }}} */
+
+#ifdef HAVE_FNMATCH
+/* {{{ proto bool fnmatch(string pattern, string filename [, int flags])
+   Match filename against pattern */
+PHP_FUNCTION(fnmatch)
+{
+	char *pattern, *filename;
+	int pattern_len, filename_len;
+	long flags = 0;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "pp|l", &pattern, &pattern_len, &filename, &filename_len, &flags) == FAILURE) {
+		return;
+	}
+
+	if (filename_len >= MAXPATHLEN) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Filename exceeds the maximum allowed length of %d characters", MAXPATHLEN);
+		RETURN_FALSE;
+	}
+	if (pattern_len >= MAXPATHLEN) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Pattern exceeds the maximum allowed length of %d characters", MAXPATHLEN);
+		RETURN_FALSE;
+	}
+
+	RETURN_BOOL( ! fnmatch( pattern, filename, flags ));
+}
+/* }}} */
+#endif
+
+/* {{{ proto string sys_get_temp_dir()
+   Returns directory path used for temporary files */
+PHP_FUNCTION(sys_get_temp_dir)
+{
+	if (zend_parse_parameters_none() == FAILURE) {
+		return;
+	}
+	RETURN_STRING((char *)php_get_temporary_directory(), 1);
+}
+/* }}} */
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim600: noet sw=4 ts=4 fdm=marker
+ * vim<600: noet sw=4 ts=4
+ */
diff -urNp php-5.4.40.org/ext/standard/proc_open.c php-5.4.40/ext/standard/proc_open.c
--- php-5.4.40.org/ext/standard/proc_open.c	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/ext/standard/proc_open.c	2016-06-18 05:36:45.276125624 +0900
@@ -438,7 +438,7 @@ struct php_proc_open_descriptor_item {
    Run a process with more control over it's file descriptors */
 PHP_FUNCTION(proc_open)
 {
-	char *command, *cwd=NULL;
+	char *command, *jcommand, *cwd=NULL;
 	int command_len, cwd_len = 0;
 	zval *descriptorspec;
 	zval *pipes;
@@ -485,7 +485,14 @@ PHP_FUNCTION(proc_open)
 		RETURN_FALSE;
 	}
 
-	command = pestrdup(command, is_persistent);
+	if (strlen(command) != command_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Can not use '\\0' character on command");
+		RETURN_FALSE;
+	}
+
+	jcommand = get_jailed_shell_cmd (command);
+	command = pestrdup(jcommand, is_persistent);
+	efree (jcommand);
 
 #ifdef PHP_WIN32
 	if (other_options) {
diff -urNp php-5.4.40.org/ext/standard/proc_open.c.orig php-5.4.40/ext/standard/proc_open.c.orig
--- php-5.4.40.org/ext/standard/proc_open.c.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/ext/standard/proc_open.c.orig	2015-04-15 13:16:17.000000000 +0900
@@ -0,0 +1,1003 @@
+/*
+   +----------------------------------------------------------------------+
+   | PHP Version 5                                                        |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1997-2014 The PHP Group                                |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.php.net/license/3_01.txt                                  |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Author: Wez Furlong <wez@thebrainroom.com>                           |
+   +----------------------------------------------------------------------+
+ */
+/* $Id$ */
+
+#if 0 && (defined(__linux__) || defined(sun) || defined(__IRIX__))
+# define _BSD_SOURCE 		/* linux wants this when XOPEN mode is on */
+# define _BSD_COMPAT		/* irix: uint */
+# define _XOPEN_SOURCE 500  /* turn on Unix98 */
+# define __EXTENSIONS__	1	/* Solaris: uint */
+#endif
+
+#include "php.h"
+#include <stdio.h>
+#include <ctype.h>
+#include "php_string.h"
+#include "ext/standard/head.h"
+#include "ext/standard/basic_functions.h"
+#include "ext/standard/file.h"
+#include "exec.h"
+#include "php_globals.h"
+#include "SAPI.h"
+
+#ifdef NETWARE
+#include <proc.h>
+#include <library.h>
+#endif
+
+#if HAVE_SYS_WAIT_H
+#include <sys/wait.h>
+#endif
+#if HAVE_SIGNAL_H
+#include <signal.h>
+#endif
+
+#if HAVE_SYS_STAT_H
+#include <sys/stat.h>
+#endif
+#if HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
+/* This symbol is defined in ext/standard/config.m4.
+ * Essentially, it is set if you HAVE_FORK || PHP_WIN32
+ * Other platforms may modify that configure check and add suitable #ifdefs
+ * around the alternate code.
+ * */
+#ifdef PHP_CAN_SUPPORT_PROC_OPEN
+
+#if 0 && HAVE_PTSNAME && HAVE_GRANTPT && HAVE_UNLOCKPT && HAVE_SYS_IOCTL_H && HAVE_TERMIOS_H
+# include <sys/ioctl.h>
+# include <termios.h>
+# define PHP_CAN_DO_PTS	1
+#endif
+
+#include "proc_open.h"
+
+static int le_proc_open;
+
+/* {{{ _php_array_to_envp */
+static php_process_env_t _php_array_to_envp(zval *environment, int is_persistent TSRMLS_DC)
+{
+	zval **element;
+	php_process_env_t env;
+	char *string_key, *data;
+#ifndef PHP_WIN32
+	char **ep;
+#endif
+	char *p;
+	uint string_length, cnt, l, sizeenv=0, el_len;
+	ulong num_key;
+	HashTable *target_hash;
+	HashPosition pos;
+
+	memset(&env, 0, sizeof(env));
+
+	if (!environment) {
+		return env;
+	}
+
+	cnt = zend_hash_num_elements(Z_ARRVAL_P(environment));
+
+	if (cnt < 1) {
+#ifndef PHP_WIN32
+		env.envarray = (char **) pecalloc(1, sizeof(char *), is_persistent);
+#endif
+		env.envp = (char *) pecalloc(4, 1, is_persistent);
+		return env;
+	}
+
+	target_hash = HASH_OF(environment);
+	if (!target_hash) {
+		return env;
+	}
+
+	/* first, we have to get the size of all the elements in the hash */
+	for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);
+			zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;
+			zend_hash_move_forward_ex(target_hash, &pos)) {
+
+		if (Z_TYPE_PP(element) != IS_STRING) {
+			zval tmp;
+
+			MAKE_COPY_ZVAL(element, &tmp);
+			convert_to_string(&tmp);
+			el_len = Z_STRLEN(tmp);
+
+			zval_dtor(&tmp);
+		} else {
+			el_len = Z_STRLEN_PP(element);
+		}
+		if (el_len == 0) {
+			continue;
+		}
+
+		sizeenv += el_len+1;
+
+		switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {
+			case HASH_KEY_IS_STRING:
+				if (string_length == 0) {
+					continue;
+				}
+				sizeenv += string_length;
+				break;
+		}
+	}
+
+#ifndef PHP_WIN32
+	ep = env.envarray = (char **) pecalloc(cnt + 1, sizeof(char *), is_persistent);
+#endif
+	p = env.envp = (char *) pecalloc(sizeenv + 4, 1, is_persistent);
+
+	for (zend_hash_internal_pointer_reset_ex(target_hash, &pos);
+			zend_hash_get_current_data_ex(target_hash, (void **) &element, &pos) == SUCCESS;
+			zend_hash_move_forward_ex(target_hash, &pos)) {
+		zval tmp;
+
+		if (Z_TYPE_PP(element) != IS_STRING) {
+			MAKE_COPY_ZVAL(element, &tmp);
+			convert_to_string(&tmp);
+		} else {
+			tmp = **element;
+		}
+
+		el_len = Z_STRLEN(tmp);
+
+		if (el_len == 0) {
+			goto next_element;
+		}
+
+		data = Z_STRVAL(tmp);
+		switch (zend_hash_get_current_key_ex(target_hash, &string_key, &string_length, &num_key, 0, &pos)) {
+			case HASH_KEY_IS_STRING:
+				if (string_length == 0) {
+					goto next_element;
+				}
+
+				l = string_length + el_len + 1;
+				memcpy(p, string_key, string_length);
+				strncat(p, "=", 1);
+				strncat(p, data, el_len);
+
+#ifndef PHP_WIN32
+				*ep = p;
+				++ep;
+#endif
+				p += l;
+				break;
+			case HASH_KEY_IS_LONG:
+				memcpy(p,data,el_len);
+#ifndef PHP_WIN32
+				*ep = p;
+				++ep;
+#endif
+				p += el_len + 1;
+				break;
+			case HASH_KEY_NON_EXISTANT:
+				break;
+		}
+
+next_element:
+		if (Z_TYPE_PP(element) != IS_STRING) {
+			zval_dtor(&tmp);
+		}
+	}
+
+	assert((uint)(p - env.envp) <= sizeenv);
+
+	zend_hash_internal_pointer_reset_ex(target_hash, &pos);
+
+	return env;
+}
+/* }}} */
+
+/* {{{ _php_free_envp */
+static void _php_free_envp(php_process_env_t env, int is_persistent)
+{
+#ifndef PHP_WIN32
+	if (env.envarray) {
+		pefree(env.envarray, is_persistent);
+	}
+#endif
+	if (env.envp) {
+		pefree(env.envp, is_persistent);
+	}
+}
+/* }}} */
+
+/* {{{ proc_open_rsrc_dtor */
+static void proc_open_rsrc_dtor(zend_rsrc_list_entry *rsrc TSRMLS_DC)
+{
+	struct php_process_handle *proc = (struct php_process_handle*)rsrc->ptr;
+	int i;
+#ifdef PHP_WIN32
+	DWORD wstatus;
+#elif HAVE_SYS_WAIT_H
+	int wstatus;
+	pid_t wait_pid;
+#endif
+
+	/* Close all handles to avoid a deadlock */
+	for (i = 0; i < proc->npipes; i++) {
+		if (proc->pipes[i] != 0) {
+			zend_list_delete(proc->pipes[i]);
+			proc->pipes[i] = 0;
+		}
+	}
+
+#ifdef PHP_WIN32
+	WaitForSingleObject(proc->childHandle, INFINITE);
+	GetExitCodeProcess(proc->childHandle, &wstatus);
+	FG(pclose_ret) = wstatus;
+	CloseHandle(proc->childHandle);
+
+#elif HAVE_SYS_WAIT_H
+
+	do {
+		wait_pid = waitpid(proc->child, &wstatus, 0);
+	} while (wait_pid == -1 && errno == EINTR);
+
+	if (wait_pid == -1) {
+		FG(pclose_ret) = -1;
+	} else {
+		if (WIFEXITED(wstatus))
+			wstatus = WEXITSTATUS(wstatus);
+		FG(pclose_ret) = wstatus;
+	}
+
+#else
+	FG(pclose_ret) = -1;
+#endif
+	_php_free_envp(proc->env, proc->is_persistent);
+	pefree(proc->command, proc->is_persistent);
+	pefree(proc, proc->is_persistent);
+
+}
+/* }}} */
+
+/* {{{ PHP_MINIT_FUNCTION(proc_open) */
+PHP_MINIT_FUNCTION(proc_open)
+{
+	le_proc_open = zend_register_list_destructors_ex(proc_open_rsrc_dtor, NULL, "process", module_number);
+	return SUCCESS;
+}
+/* }}} */
+
+/* {{{ proto bool proc_terminate(resource process [, long signal])
+   kill a process opened by proc_open */
+PHP_FUNCTION(proc_terminate)
+{
+	zval *zproc;
+	struct php_process_handle *proc;
+	long sig_no = SIGTERM;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|l", &zproc, &sig_no) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, "process", le_proc_open);
+
+#ifdef PHP_WIN32
+	if (TerminateProcess(proc->childHandle, 255)) {
+		RETURN_TRUE;
+	} else {
+		RETURN_FALSE;
+	}
+#else
+	if (kill(proc->child, sig_no) == 0) {
+		RETURN_TRUE;
+	} else {
+		RETURN_FALSE;
+	}
+#endif
+}
+/* }}} */
+
+/* {{{ proto int proc_close(resource process)
+   close a process opened by proc_open */
+PHP_FUNCTION(proc_close)
+{
+	zval *zproc;
+	struct php_process_handle *proc;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &zproc) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, "process", le_proc_open);
+
+	zend_list_delete(Z_LVAL_P(zproc));
+	RETURN_LONG(FG(pclose_ret));
+}
+/* }}} */
+
+/* {{{ proto array proc_get_status(resource process)
+   get information about a process opened by proc_open */
+PHP_FUNCTION(proc_get_status)
+{
+	zval *zproc;
+	struct php_process_handle *proc;
+#ifdef PHP_WIN32
+	DWORD wstatus;
+#elif HAVE_SYS_WAIT_H
+	int wstatus;
+	pid_t wait_pid;
+#endif
+	int running = 1, signaled = 0, stopped = 0;
+	int exitcode = -1, termsig = 0, stopsig = 0;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &zproc) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	ZEND_FETCH_RESOURCE(proc, struct php_process_handle *, &zproc, -1, "process", le_proc_open);
+
+	array_init(return_value);
+
+	add_assoc_string(return_value, "command", proc->command, 1);
+	add_assoc_long(return_value, "pid", (long) proc->child);
+
+#ifdef PHP_WIN32
+
+	GetExitCodeProcess(proc->childHandle, &wstatus);
+
+	running = wstatus == STILL_ACTIVE;
+	exitcode = running ? -1 : wstatus;
+
+#elif HAVE_SYS_WAIT_H
+
+	errno = 0;
+	wait_pid = waitpid(proc->child, &wstatus, WNOHANG|WUNTRACED);
+
+	if (wait_pid == proc->child) {
+		if (WIFEXITED(wstatus)) {
+			running = 0;
+			exitcode = WEXITSTATUS(wstatus);
+		}
+		if (WIFSIGNALED(wstatus)) {
+			running = 0;
+			signaled = 1;
+#ifdef NETWARE
+			termsig = WIFTERMSIG(wstatus);
+#else
+			termsig = WTERMSIG(wstatus);
+#endif
+		}
+		if (WIFSTOPPED(wstatus)) {
+			stopped = 1;
+			stopsig = WSTOPSIG(wstatus);
+		}
+	} else if (wait_pid == -1) {
+		running = 0;
+	}
+#endif
+
+	add_assoc_bool(return_value, "running", running);
+	add_assoc_bool(return_value, "signaled", signaled);
+	add_assoc_bool(return_value, "stopped", stopped);
+	add_assoc_long(return_value, "exitcode", exitcode);
+	add_assoc_long(return_value, "termsig", termsig);
+	add_assoc_long(return_value, "stopsig", stopsig);
+}
+/* }}} */
+
+/* {{{ handy definitions for portability/readability */
+#ifdef PHP_WIN32
+# define pipe(pair)		(CreatePipe(&pair[0], &pair[1], &security, 0) ? 0 : -1)
+
+# define COMSPEC_NT	"cmd.exe"
+
+static inline HANDLE dup_handle(HANDLE src, BOOL inherit, BOOL closeorig)
+{
+	HANDLE copy, self = GetCurrentProcess();
+
+	if (!DuplicateHandle(self, src, self, &copy, 0, inherit, DUPLICATE_SAME_ACCESS |
+				(closeorig ? DUPLICATE_CLOSE_SOURCE : 0)))
+		return NULL;
+	return copy;
+}
+
+static inline HANDLE dup_fd_as_handle(int fd)
+{
+	return dup_handle((HANDLE)_get_osfhandle(fd), TRUE, FALSE);
+}
+
+# define close_descriptor(fd)	CloseHandle(fd)
+#else
+# define close_descriptor(fd)	close(fd)
+#endif
+
+#define DESC_PIPE		1
+#define DESC_FILE		2
+#define DESC_PARENT_MODE_WRITE	8
+
+struct php_proc_open_descriptor_item {
+	int index; 							/* desired fd number in child process */
+	php_file_descriptor_t parentend, childend;	/* fds for pipes in parent/child */
+	int mode;							/* mode for proc_open code */
+	int mode_flags;						/* mode flags for opening fds */
+};
+/* }}} */
+
+/* {{{ proto resource proc_open(string command, array descriptorspec, array &pipes [, string cwd [, array env [, array other_options]]])
+   Run a process with more control over it's file descriptors */
+PHP_FUNCTION(proc_open)
+{
+	char *command, *cwd=NULL;
+	int command_len, cwd_len = 0;
+	zval *descriptorspec;
+	zval *pipes;
+	zval *environment = NULL;
+	zval *other_options = NULL;
+	php_process_env_t env;
+	int ndesc = 0;
+	int i;
+	zval **descitem = NULL;
+	HashPosition pos;
+	struct php_proc_open_descriptor_item descriptors[PHP_PROC_OPEN_MAX_DESCRIPTORS];
+#ifdef PHP_WIN32
+	PROCESS_INFORMATION pi;
+	HANDLE childHandle;
+	STARTUPINFO si;
+	BOOL newprocok;
+	SECURITY_ATTRIBUTES security;
+	DWORD dwCreateFlags = 0;
+	char *command_with_cmd;
+	UINT old_error_mode;
+#endif
+#ifdef NETWARE
+	char** child_argv = NULL;
+	char* command_dup = NULL;
+	char* orig_cwd = NULL;
+	int command_num_args = 0;
+	wiring_t channel;
+#endif
+	php_process_id_t child;
+	struct php_process_handle *proc;
+	int is_persistent = 0; /* TODO: ensure that persistent procs will work */
+#ifdef PHP_WIN32
+	int suppress_errors = 0;
+	int bypass_shell = 0;
+#endif
+#if PHP_CAN_DO_PTS
+	php_file_descriptor_t dev_ptmx = -1;	/* master */
+	php_file_descriptor_t slave_pty = -1;
+#endif
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "saz|s!a!a!", &command,
+				&command_len, &descriptorspec, &pipes, &cwd, &cwd_len, &environment,
+				&other_options) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	command = pestrdup(command, is_persistent);
+
+#ifdef PHP_WIN32
+	if (other_options) {
+		zval **item;
+		if (SUCCESS == zend_hash_find(Z_ARRVAL_P(other_options), "suppress_errors", sizeof("suppress_errors"), (void**)&item)) {
+			if ((Z_TYPE_PP(item) == IS_BOOL || Z_TYPE_PP(item) == IS_LONG) &&
+			    Z_LVAL_PP(item)) {
+				suppress_errors = 1;
+			}
+		}
+		if (SUCCESS == zend_hash_find(Z_ARRVAL_P(other_options), "bypass_shell", sizeof("bypass_shell"), (void**)&item)) {
+			if ((Z_TYPE_PP(item) == IS_BOOL || Z_TYPE_PP(item) == IS_LONG) &&
+			    Z_LVAL_PP(item)) {
+				bypass_shell = 1;
+			}
+		}
+	}
+#endif
+
+	command_len = strlen(command);
+
+	if (environment) {
+		env = _php_array_to_envp(environment, is_persistent TSRMLS_CC);
+	} else {
+		memset(&env, 0, sizeof(env));
+	}
+
+	memset(descriptors, 0, sizeof(descriptors));
+
+#ifdef PHP_WIN32
+	/* we use this to allow the child to inherit handles */
+	memset(&security, 0, sizeof(security));
+	security.nLength = sizeof(security);
+	security.bInheritHandle = TRUE;
+	security.lpSecurityDescriptor = NULL;
+#endif
+
+	/* walk the descriptor spec and set up files/pipes */
+	zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(descriptorspec), &pos);
+	while (zend_hash_get_current_data_ex(Z_ARRVAL_P(descriptorspec), (void **)&descitem, &pos) == SUCCESS) {
+		char *str_index;
+		ulong nindex;
+		zval **ztype;
+
+		str_index = NULL;
+		zend_hash_get_current_key_ex(Z_ARRVAL_P(descriptorspec), &str_index, NULL, &nindex, 0, &pos);
+
+		if (str_index) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "descriptor spec must be an integer indexed array");
+			goto exit_fail;
+		}
+
+		descriptors[ndesc].index = nindex;
+
+		if (Z_TYPE_PP(descitem) == IS_RESOURCE) {
+			/* should be a stream - try and dup the descriptor */
+			php_stream *stream;
+			int fd;
+
+			php_stream_from_zval(stream, descitem);
+
+			if (FAILURE == php_stream_cast(stream, PHP_STREAM_AS_FD, (void **)&fd, REPORT_ERRORS)) {
+				goto exit_fail;
+			}
+
+#ifdef PHP_WIN32
+			descriptors[ndesc].childend = dup_fd_as_handle(fd);
+			if (descriptors[ndesc].childend == NULL) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "unable to dup File-Handle for descriptor %d", nindex);
+				goto exit_fail;
+			}
+#else
+			descriptors[ndesc].childend = dup(fd);
+			if (descriptors[ndesc].childend < 0) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "unable to dup File-Handle for descriptor %ld - %s", nindex, strerror(errno));
+				goto exit_fail;
+			}
+#endif
+			descriptors[ndesc].mode = DESC_FILE;
+
+		} else if (Z_TYPE_PP(descitem) != IS_ARRAY) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Descriptor item must be either an array or a File-Handle");
+			goto exit_fail;
+		} else {
+
+			if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 0, (void **)&ztype) == SUCCESS) {
+				convert_to_string_ex(ztype);
+			} else {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "Missing handle qualifier in array");
+				goto exit_fail;
+			}
+
+			if (strcmp(Z_STRVAL_PP(ztype), "pipe") == 0) {
+				php_file_descriptor_t newpipe[2];
+				zval **zmode;
+
+				if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zmode) == SUCCESS) {
+					convert_to_string_ex(zmode);
+				} else {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "Missing mode parameter for 'pipe'");
+					goto exit_fail;
+				}
+
+				descriptors[ndesc].mode = DESC_PIPE;
+
+				if (0 != pipe(newpipe)) {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "unable to create pipe %s", strerror(errno));
+					goto exit_fail;
+				}
+
+				if (strncmp(Z_STRVAL_PP(zmode), "w", 1) != 0) {
+					descriptors[ndesc].parentend = newpipe[1];
+					descriptors[ndesc].childend = newpipe[0];
+					descriptors[ndesc].mode |= DESC_PARENT_MODE_WRITE;
+				} else {
+					descriptors[ndesc].parentend = newpipe[0];
+					descriptors[ndesc].childend = newpipe[1];
+				}
+#ifdef PHP_WIN32
+				/* don't let the child inherit the parent side of the pipe */
+				descriptors[ndesc].parentend = dup_handle(descriptors[ndesc].parentend, FALSE, TRUE);
+#endif
+				descriptors[ndesc].mode_flags = descriptors[ndesc].mode & DESC_PARENT_MODE_WRITE ? O_WRONLY : O_RDONLY;
+#ifdef PHP_WIN32
+				if (Z_STRLEN_PP(zmode) >= 2 && Z_STRVAL_PP(zmode)[1] == 'b')
+					descriptors[ndesc].mode_flags |= O_BINARY;
+#endif
+
+			} else if (strcmp(Z_STRVAL_PP(ztype), "file") == 0) {
+				zval **zfile, **zmode;
+				int fd;
+				php_stream *stream;
+
+				descriptors[ndesc].mode = DESC_FILE;
+
+				if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 1, (void **)&zfile) == SUCCESS) {
+					convert_to_string_ex(zfile);
+				} else {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "Missing file name parameter for 'file'");
+					goto exit_fail;
+				}
+
+				if (zend_hash_index_find(Z_ARRVAL_PP(descitem), 2, (void **)&zmode) == SUCCESS) {
+					convert_to_string_ex(zmode);
+				} else {
+					php_error_docref(NULL TSRMLS_CC, E_WARNING, "Missing mode parameter for 'file'");
+					goto exit_fail;
+				}
+
+				/* try a wrapper */
+				stream = php_stream_open_wrapper(Z_STRVAL_PP(zfile), Z_STRVAL_PP(zmode),
+						REPORT_ERRORS|STREAM_WILL_CAST, NULL);
+
+				/* force into an fd */
+				if (stream == NULL || FAILURE == php_stream_cast(stream,
+							PHP_STREAM_CAST_RELEASE|PHP_STREAM_AS_FD,
+							(void **)&fd, REPORT_ERRORS)) {
+					goto exit_fail;
+				}
+
+#ifdef PHP_WIN32
+				descriptors[ndesc].childend = dup_fd_as_handle(fd);
+				_close(fd);
+
+				/* simulate the append mode by fseeking to the end of the file
+				this introduces a potential race-condition, but it is the best we can do, though */
+				if (strchr(Z_STRVAL_PP(zmode), 'a')) {
+					SetFilePointer(descriptors[ndesc].childend, 0, NULL, FILE_END);
+				}
+#else
+				descriptors[ndesc].childend = fd;
+#endif
+			} else if (strcmp(Z_STRVAL_PP(ztype), "pty") == 0) {
+#if PHP_CAN_DO_PTS
+				if (dev_ptmx == -1) {
+					/* open things up */
+					dev_ptmx = open("/dev/ptmx", O_RDWR);
+					if (dev_ptmx == -1) {
+						php_error_docref(NULL TSRMLS_CC, E_WARNING, "failed to open /dev/ptmx, errno %d", errno);
+						goto exit_fail;
+					}
+					grantpt(dev_ptmx);
+					unlockpt(dev_ptmx);
+					slave_pty = open(ptsname(dev_ptmx), O_RDWR);
+
+					if (slave_pty == -1) {
+						php_error_docref(NULL TSRMLS_CC, E_WARNING, "failed to open slave pty, errno %d", errno);
+						goto exit_fail;
+					}
+				}
+				descriptors[ndesc].mode = DESC_PIPE;
+				descriptors[ndesc].childend = dup(slave_pty);
+				descriptors[ndesc].parentend = dup(dev_ptmx);
+				descriptors[ndesc].mode_flags = O_RDWR;
+#else
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "pty pseudo terminal not supported on this system");
+				goto exit_fail;
+#endif
+			} else {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s is not a valid descriptor spec/mode", Z_STRVAL_PP(ztype));
+				goto exit_fail;
+			}
+		}
+
+		zend_hash_move_forward_ex(Z_ARRVAL_P(descriptorspec), &pos);
+		if (++ndesc == PHP_PROC_OPEN_MAX_DESCRIPTORS)
+			break;
+	}
+
+#ifdef PHP_WIN32
+	if (cwd == NULL) {
+		char cur_cwd[MAXPATHLEN];
+		char *getcwd_result;
+		getcwd_result = VCWD_GETCWD(cur_cwd, MAXPATHLEN);
+		if (!getcwd_result) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Cannot get current directory");
+			goto exit_fail;
+		}
+	}
+
+	memset(&si, 0, sizeof(si));
+	si.cb = sizeof(si);
+	si.dwFlags = STARTF_USESTDHANDLES;
+
+	si.hStdInput = GetStdHandle(STD_INPUT_HANDLE);
+	si.hStdOutput = GetStdHandle(STD_OUTPUT_HANDLE);
+	si.hStdError = GetStdHandle(STD_ERROR_HANDLE);
+
+	/* redirect stdin/stdout/stderr if requested */
+	for (i = 0; i < ndesc; i++) {
+		switch(descriptors[i].index) {
+			case 0:
+				si.hStdInput = descriptors[i].childend;
+				break;
+			case 1:
+				si.hStdOutput = descriptors[i].childend;
+				break;
+			case 2:
+				si.hStdError = descriptors[i].childend;
+				break;
+		}
+	}
+
+
+	memset(&pi, 0, sizeof(pi));
+
+	if (suppress_errors) {
+		old_error_mode = SetErrorMode(SEM_FAILCRITICALERRORS|SEM_NOGPFAULTERRORBOX);
+	}
+
+	dwCreateFlags = NORMAL_PRIORITY_CLASS;
+	if(strcmp(sapi_module.name, "cli") != 0) {
+		dwCreateFlags |= CREATE_NO_WINDOW;
+	}
+
+	if (bypass_shell) {
+		newprocok = CreateProcess(NULL, command, &security, &security, TRUE, dwCreateFlags, env.envp, cwd, &si, &pi);
+	} else {
+		spprintf(&command_with_cmd, 0, "%s /c %s", COMSPEC_NT, command);
+
+		newprocok = CreateProcess(NULL, command_with_cmd, &security, &security, TRUE, dwCreateFlags, env.envp, cwd, &si, &pi);
+
+		efree(command_with_cmd);
+	}
+
+	if (suppress_errors) {
+		SetErrorMode(old_error_mode);
+	}
+
+	if (FALSE == newprocok) {
+		DWORD dw = GetLastError();
+
+		/* clean up all the descriptors */
+		for (i = 0; i < ndesc; i++) {
+			CloseHandle(descriptors[i].childend);
+			if (descriptors[i].parentend) {
+				CloseHandle(descriptors[i].parentend);
+			}
+		}
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "CreateProcess failed, error code - %u", dw);
+		goto exit_fail;
+	}
+
+	childHandle = pi.hProcess;
+	child       = pi.dwProcessId;
+	CloseHandle(pi.hThread);
+
+#elif defined(NETWARE)
+	if (cwd) {
+		orig_cwd = getcwd(NULL, PATH_MAX);
+		chdir2(cwd);
+	}
+	channel.infd = descriptors[0].childend;
+	channel.outfd = descriptors[1].childend;
+	channel.errfd = -1;
+	/* Duplicate the command as processing downwards will modify it*/
+	command_dup = strdup(command);
+	if (!command_dup) {
+		goto exit_fail;
+	}
+	/* get a number of args */
+	construct_argc_argv(command_dup, NULL, &command_num_args, NULL);
+	child_argv = (char**) malloc((command_num_args + 1) * sizeof(char*));
+	if(!child_argv) {
+		free(command_dup);
+		if (cwd && orig_cwd) {
+			chdir2(orig_cwd);
+			free(orig_cwd);
+		}
+	}
+	/* fill the child arg vector */
+	construct_argc_argv(command_dup, NULL, &command_num_args, child_argv);
+	child_argv[command_num_args] = NULL;
+	child = procve(child_argv[0], PROC_DETACHED|PROC_INHERIT_CWD, NULL, &channel, NULL, NULL, 0, NULL, (const char**)child_argv);
+	free(child_argv);
+	free(command_dup);
+	if (cwd && orig_cwd) {
+		chdir2(orig_cwd);
+		free(orig_cwd);
+	}
+	if (child < 0) {
+		/* failed to fork() */
+		/* clean up all the descriptors */
+		for (i = 0; i < ndesc; i++) {
+			close(descriptors[i].childend);
+			if (descriptors[i].parentend)
+				close(descriptors[i].parentend);
+		}
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "procve failed - %s", strerror(errno));
+		goto exit_fail;
+	}
+#elif HAVE_FORK
+	/* the unix way */
+	child = fork();
+
+	if (child == 0) {
+		/* this is the child process */
+
+#if PHP_CAN_DO_PTS
+		if (dev_ptmx >= 0) {
+			int my_pid = getpid();
+
+#ifdef TIOCNOTTY
+			/* detach from original tty. Might only need this if isatty(0) is true */
+			ioctl(0,TIOCNOTTY,NULL);
+#else
+			setsid();
+#endif
+			/* become process group leader */
+			setpgid(my_pid, my_pid);
+			tcsetpgrp(0, my_pid);
+		}
+#endif
+
+		/* close those descriptors that we just opened for the parent stuff,
+		 * dup new descriptors into required descriptors and close the original
+		 * cruft */
+		for (i = 0; i < ndesc; i++) {
+			switch (descriptors[i].mode & ~DESC_PARENT_MODE_WRITE) {
+				case DESC_PIPE:
+					close(descriptors[i].parentend);
+					break;
+			}
+			if (dup2(descriptors[i].childend, descriptors[i].index) < 0)
+				perror("dup2");
+			if (descriptors[i].childend != descriptors[i].index)
+				close(descriptors[i].childend);
+		}
+
+#if PHP_CAN_DO_PTS
+		if (dev_ptmx >= 0) {
+			close(dev_ptmx);
+			close(slave_pty);
+		}
+#endif
+
+		if (cwd) {
+			php_ignore_value(chdir(cwd));
+		}
+
+		if (env.envarray) {
+			execle("/bin/sh", "sh", "-c", command, NULL, env.envarray);
+		} else {
+			execl("/bin/sh", "sh", "-c", command, NULL);
+		}
+		_exit(127);
+
+	} else if (child < 0) {
+		/* failed to fork() */
+
+		/* clean up all the descriptors */
+		for (i = 0; i < ndesc; i++) {
+			close(descriptors[i].childend);
+			if (descriptors[i].parentend)
+				close(descriptors[i].parentend);
+		}
+
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "fork failed - %s", strerror(errno));
+
+		goto exit_fail;
+
+	}
+#else
+# error You lose (configure should not have let you get here)
+#endif
+	/* we forked/spawned and this is the parent */
+
+	proc = (struct php_process_handle*)pemalloc(sizeof(struct php_process_handle), is_persistent);
+	proc->is_persistent = is_persistent;
+	proc->command = command;
+	proc->npipes = ndesc;
+	proc->child = child;
+#ifdef PHP_WIN32
+	proc->childHandle = childHandle;
+#endif
+	proc->env = env;
+
+	if (pipes != NULL) {
+		zval_dtor(pipes);
+	}
+	array_init(pipes);
+
+#if PHP_CAN_DO_PTS
+	if (dev_ptmx >= 0) {
+		close(dev_ptmx);
+		close(slave_pty);
+	}
+#endif
+
+	/* clean up all the child ends and then open streams on the parent
+	 * ends, where appropriate */
+	for (i = 0; i < ndesc; i++) {
+		char *mode_string=NULL;
+		php_stream *stream = NULL;
+
+		close_descriptor(descriptors[i].childend);
+
+		switch (descriptors[i].mode & ~DESC_PARENT_MODE_WRITE) {
+			case DESC_PIPE:
+				switch(descriptors[i].mode_flags) {
+#ifdef PHP_WIN32
+					case O_WRONLY|O_BINARY:
+						mode_string = "wb";
+						break;
+					case O_RDONLY|O_BINARY:
+						mode_string = "rb";
+						break;
+#endif
+					case O_WRONLY:
+						mode_string = "w";
+						break;
+					case O_RDONLY:
+						mode_string = "r";
+						break;
+					case O_RDWR:
+						mode_string = "r+";
+						break;
+				}
+#ifdef PHP_WIN32
+				stream = php_stream_fopen_from_fd(_open_osfhandle((zend_intptr_t)descriptors[i].parentend,
+							descriptors[i].mode_flags), mode_string, NULL);
+#else
+				stream = php_stream_fopen_from_fd(descriptors[i].parentend, mode_string, NULL);
+# if defined(F_SETFD) && defined(FD_CLOEXEC)
+				/* mark the descriptor close-on-exec, so that it won't be inherited by potential other children */
+				fcntl(descriptors[i].parentend, F_SETFD, FD_CLOEXEC);
+# endif
+#endif
+				if (stream) {
+					zval *retfp;
+
+					/* nasty hack; don't copy it */
+					stream->flags |= PHP_STREAM_FLAG_NO_SEEK;
+
+					MAKE_STD_ZVAL(retfp);
+					php_stream_to_zval(stream, retfp);
+					add_index_zval(pipes, descriptors[i].index, retfp);
+
+					proc->pipes[i] = Z_LVAL_P(retfp);
+				}
+				break;
+			default:
+				proc->pipes[i] = 0;
+		}
+	}
+
+	ZEND_REGISTER_RESOURCE(return_value, proc, le_proc_open);
+	return;
+
+exit_fail:
+	_php_free_envp(env, is_persistent);
+	pefree(command, is_persistent);
+#if PHP_CAN_DO_PTS
+	if (dev_ptmx >= 0) {
+		close(dev_ptmx);
+	}
+	if (slave_pty >= 0) {
+		close(slave_pty);
+	}
+#endif
+	RETURN_FALSE;
+
+}
+/* }}} */
+
+#endif /* PHP_CAN_SUPPORT_PROC_OPEN */
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim600: sw=4 ts=4 fdm=marker
+ * vim<600: sw=4 ts=4
+ */
diff -urNp php-5.4.40.org/main/main.c php-5.4.40/main/main.c
--- php-5.4.40.org/main/main.c	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/main/main.c	2016-06-18 05:36:45.277125678 +0900
@@ -470,6 +470,10 @@ PHP_INI_MH(OnChangeBrowscap);
  * PHP_INCLUDE_PATH
  */
 
+#ifndef PHP_EXEC_DIR
+#	define PHP_EXEC_DIR ""
+#endif
+
  /* Windows and Netware use the internal mail */
 #if defined(PHP_WIN32) || defined(NETWARE)
 # define DEFAULT_SENDMAIL_PATH NULL
@@ -530,6 +534,8 @@ PHP_INI_BEGIN()
 	STD_PHP_INI_ENTRY("include_path",			PHP_INCLUDE_PATH,		PHP_INI_ALL,		OnUpdateStringUnempty,	include_path,			php_core_globals,	core_globals)
 	PHP_INI_ENTRY("max_execution_time",			"30",		PHP_INI_ALL,			OnUpdateTimeout)
 	STD_PHP_INI_ENTRY("open_basedir",			NULL,		PHP_INI_ALL,		OnUpdateBaseDir,			open_basedir,			php_core_globals,	core_globals)
+	STD_PHP_INI_ENTRY("exec_dir",				PHP_EXEC_DIR,			PHP_INI_SYSTEM,		OnUpdateString,			exec_dir,				php_core_globals,	core_globals)
+	STD_PHP_INI_ENTRY("safe_mode_exec_dir",				PHP_EXEC_DIR,			PHP_INI_SYSTEM,		OnUpdateString,			safe_mode_exec_dir,				php_core_globals,	core_globals)
 
 	STD_PHP_INI_BOOLEAN("file_uploads",			"1",		PHP_INI_SYSTEM,		OnUpdateBool,			file_uploads,			php_core_globals,	core_globals)
 	STD_PHP_INI_ENTRY("upload_max_filesize",	"2M",		PHP_INI_SYSTEM|PHP_INI_PERDIR,		OnUpdateLong,			upload_max_filesize,	php_core_globals,	core_globals)
diff -urNp php-5.4.40.org/main/php_config.h.in php-5.4.40/main/php_config.h.in
--- php-5.4.40.org/main/php_config.h.in	2015-04-15 13:20:30.000000000 +0900
+++ php-5.4.40/main/php_config.h.in	2016-06-18 05:36:45.278125732 +0900
@@ -2216,6 +2216,9 @@
 /* whether pwrite64 is default */
 #undef PHP_PWRITE_64
 
+/* */
+#undef PHP_EXEC_DIR
+
 /* Whether the system supports SHA256 salt */
 #undef PHP_SHA256_CRYPT
 
diff -urNp php-5.4.40.org/main/php_config.h.in.orig php-5.4.40/main/php_config.h.in.orig
--- php-5.4.40.org/main/php_config.h.in.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/main/php_config.h.in.orig	2015-04-15 13:20:30.000000000 +0900
@@ -0,0 +1,2523 @@
+/* main/php_config.h.in.  Generated from configure.in by autoheader.  */
+
+
+#if defined(__GNUC__) && __GNUC__ >= 4
+# define ZEND_API __attribute__ ((visibility("default")))
+# define ZEND_DLEXPORT __attribute__ ((visibility("default")))
+#else
+# define ZEND_API
+# define ZEND_DLEXPORT
+#endif
+
+#define ZEND_DLIMPORT
+
+#undef uint
+#undef ulong
+
+/* Define if you want to enable memory limit support */
+#define MEMORY_LIMIT 0
+
+
+/* */
+#undef AIX
+
+/* Whether to use native BeOS threads */
+#undef BETHREADS
+
+/* */
+#undef CDB_INCLUDE_FILE
+
+/* Define if system uses EBCDIC */
+#undef CHARSET_EBCDIC
+
+/* Whether to build bcmath as dynamic module */
+#undef COMPILE_DL_BCMATH
+
+/* Whether to build bz2 as dynamic module */
+#undef COMPILE_DL_BZ2
+
+/* Whether to build calendar as dynamic module */
+#undef COMPILE_DL_CALENDAR
+
+/* Whether to build ctype as dynamic module */
+#undef COMPILE_DL_CTYPE
+
+/* Whether to build curl as dynamic module */
+#undef COMPILE_DL_CURL
+
+/* Whether to build date as dynamic module */
+#undef COMPILE_DL_DATE
+
+/* Whether to build dba as dynamic module */
+#undef COMPILE_DL_DBA
+
+/* Whether to build dom as dynamic module */
+#undef COMPILE_DL_DOM
+
+/* Whether to build enchant as dynamic module */
+#undef COMPILE_DL_ENCHANT
+
+/* Whether to build ereg as dynamic module */
+#undef COMPILE_DL_EREG
+
+/* Whether to build exif as dynamic module */
+#undef COMPILE_DL_EXIF
+
+/* Whether to build fileinfo as dynamic module */
+#undef COMPILE_DL_FILEINFO
+
+/* Whether to build filter as dynamic module */
+#undef COMPILE_DL_FILTER
+
+/* Whether to build ftp as dynamic module */
+#undef COMPILE_DL_FTP
+
+/* Whether to build gd as dynamic module */
+#undef COMPILE_DL_GD
+
+/* Whether to build gettext as dynamic module */
+#undef COMPILE_DL_GETTEXT
+
+/* Whether to build gmp as dynamic module */
+#undef COMPILE_DL_GMP
+
+/* Whether to build hash as dynamic module */
+#undef COMPILE_DL_HASH
+
+/* Whether to build iconv as dynamic module */
+#undef COMPILE_DL_ICONV
+
+/* Whether to build imap as dynamic module */
+#undef COMPILE_DL_IMAP
+
+/* Whether to build interbase as dynamic module */
+#undef COMPILE_DL_INTERBASE
+
+/* Whether to build intl as dynamic module */
+#undef COMPILE_DL_INTL
+
+/* Whether to build json as dynamic module */
+#undef COMPILE_DL_JSON
+
+/* Whether to build ldap as dynamic module */
+#undef COMPILE_DL_LDAP
+
+/* Whether to build libxml as dynamic module */
+#undef COMPILE_DL_LIBXML
+
+/* Whether to build mbstring as dynamic module */
+#undef COMPILE_DL_MBSTRING
+
+/* Whether to build mcrypt as dynamic module */
+#undef COMPILE_DL_MCRYPT
+
+/* Whether to build mssql as dynamic module */
+#undef COMPILE_DL_MSSQL
+
+/* Whether to build mysql as dynamic module */
+#undef COMPILE_DL_MYSQL
+
+/* Whether to build mysqli as dynamic module */
+#undef COMPILE_DL_MYSQLI
+
+/* Whether to build mysqlnd as dynamic module */
+#undef COMPILE_DL_MYSQLND
+
+/* Whether to build oci8 as dynamic module */
+#undef COMPILE_DL_OCI8
+
+/* Whether to build odbc as dynamic module */
+#undef COMPILE_DL_ODBC
+
+/* Whether to build openssl as dynamic module */
+#undef COMPILE_DL_OPENSSL
+
+/* Whether to build pcntl as dynamic module */
+#undef COMPILE_DL_PCNTL
+
+/* Whether to build pcre as dynamic module */
+#undef COMPILE_DL_PCRE
+
+/* Whether to build pdo as dynamic module */
+#undef COMPILE_DL_PDO
+
+/* Whether to build pdo_dblib as dynamic module */
+#undef COMPILE_DL_PDO_DBLIB
+
+/* Whether to build pdo_firebird as dynamic module */
+#undef COMPILE_DL_PDO_FIREBIRD
+
+/* Whether to build pdo_mysql as dynamic module */
+#undef COMPILE_DL_PDO_MYSQL
+
+/* Whether to build pdo_oci as dynamic module */
+#undef COMPILE_DL_PDO_OCI
+
+/* Whether to build pdo_odbc as dynamic module */
+#undef COMPILE_DL_PDO_ODBC
+
+/* Whether to build pdo_pgsql as dynamic module */
+#undef COMPILE_DL_PDO_PGSQL
+
+/* Whether to build pdo_sqlite as dynamic module */
+#undef COMPILE_DL_PDO_SQLITE
+
+/* Whether to build pgsql as dynamic module */
+#undef COMPILE_DL_PGSQL
+
+/* Whether to build phar as dynamic module */
+#undef COMPILE_DL_PHAR
+
+/* Whether to build posix as dynamic module */
+#undef COMPILE_DL_POSIX
+
+/* Whether to build pspell as dynamic module */
+#undef COMPILE_DL_PSPELL
+
+/* Whether to build readline as dynamic module */
+#undef COMPILE_DL_READLINE
+
+/* Whether to build recode as dynamic module */
+#undef COMPILE_DL_RECODE
+
+/* Whether to build reflection as dynamic module */
+#undef COMPILE_DL_REFLECTION
+
+/* Whether to build session as dynamic module */
+#undef COMPILE_DL_SESSION
+
+/* Whether to build shmop as dynamic module */
+#undef COMPILE_DL_SHMOP
+
+/* Whether to build simplexml as dynamic module */
+#undef COMPILE_DL_SIMPLEXML
+
+/* Whether to build snmp as dynamic module */
+#undef COMPILE_DL_SNMP
+
+/* Whether to build soap as dynamic module */
+#undef COMPILE_DL_SOAP
+
+/* Whether to build sockets as dynamic module */
+#undef COMPILE_DL_SOCKETS
+
+/* Whether to build spl as dynamic module */
+#undef COMPILE_DL_SPL
+
+/* Whether to build sqlite3 as dynamic module */
+#undef COMPILE_DL_SQLITE3
+
+/* Whether to build standard as dynamic module */
+#undef COMPILE_DL_STANDARD
+
+/* Whether to build sybase_ct as dynamic module */
+#undef COMPILE_DL_SYBASE_CT
+
+/* Whether to build sysvmsg as dynamic module */
+#undef COMPILE_DL_SYSVMSG
+
+/* Whether to build sysvsem as dynamic module */
+#undef COMPILE_DL_SYSVSEM
+
+/* Whether to build sysvshm as dynamic module */
+#undef COMPILE_DL_SYSVSHM
+
+/* Whether to build tidy as dynamic module */
+#undef COMPILE_DL_TIDY
+
+/* Whether to build tokenizer as dynamic module */
+#undef COMPILE_DL_TOKENIZER
+
+/* Whether to build wddx as dynamic module */
+#undef COMPILE_DL_WDDX
+
+/* Whether to build xml as dynamic module */
+#undef COMPILE_DL_XML
+
+/* Whether to build xmlreader as dynamic module */
+#undef COMPILE_DL_XMLREADER
+
+/* Whether to build xmlrpc as dynamic module */
+#undef COMPILE_DL_XMLRPC
+
+/* Whether to build xmlwriter as dynamic module */
+#undef COMPILE_DL_XMLWRITER
+
+/* Whether to build xsl as dynamic module */
+#undef COMPILE_DL_XSL
+
+/* Whether to build zip as dynamic module */
+#undef COMPILE_DL_ZIP
+
+/* Whether to build zlib as dynamic module */
+#undef COMPILE_DL_ZLIB
+
+/* */
+#undef COOKIE_IO_FUNCTIONS_T
+
+/* */
+#undef COOKIE_SEEKER_USES_OFF64_T
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#undef CRAY_STACKSEG_END
+
+/* Define if crypt_r has uses CRYPTD */
+#undef CRYPT_R_CRYPTD
+
+/* Define if struct crypt_data requires _GNU_SOURCE */
+#undef CRYPT_R_GNU_SOURCE
+
+/* Define if crypt_r uses struct crypt_data */
+#undef CRYPT_R_STRUCT_CRYPT_DATA
+
+/* Define to 1 if using `alloca.c'. */
+#undef C_ALLOCA
+
+/* Define if the target system is darwin */
+#undef DARWIN
+
+/* */
+#undef DB1_INCLUDE_FILE
+
+/* */
+#undef DB1_VERSION
+
+/* */
+#undef DB2_INCLUDE_FILE
+
+/* */
+#undef DB3_INCLUDE_FILE
+
+/* */
+#undef DB4_INCLUDE_FILE
+
+/* */
+#undef DBA_CDB
+
+/* */
+#undef DBA_CDB_BUILTIN
+
+/* */
+#undef DBA_CDB_MAKE
+
+/* */
+#undef DBA_DB1
+
+/* */
+#undef DBA_DB2
+
+/* */
+#undef DBA_DB3
+
+/* */
+#undef DBA_DB4
+
+/* */
+#undef DBA_DBM
+
+/* */
+#undef DBA_FLATFILE
+
+/* */
+#undef DBA_GDBM
+
+/* */
+#undef DBA_INIFILE
+
+/* */
+#undef DBA_NDBM
+
+/* */
+#undef DBA_QDBM
+
+/* */
+#undef DBA_TCADB
+
+/* */
+#undef DBM_INCLUDE_FILE
+
+/* */
+#undef DBM_VERSION
+
+/* */
+#undef DEFAULT_SHORT_OPEN_TAG
+
+/* Define if dlsym() requires a leading underscore in symbol names. */
+#undef DLSYM_NEEDS_UNDERSCORE
+
+/* Whether to enable chroot() function */
+#undef ENABLE_CHROOT_FUNC
+
+/* */
+#undef ENABLE_GD_TTF
+
+/* */
+#undef ENCHANT_VERSION_STRING
+
+/* */
+#undef GDBM_INCLUDE_FILE
+
+/* Whether you use GNU Pth */
+#undef GNUPTH
+
+/* Whether 3 arg set_rebind_proc() */
+#undef HAVE_3ARG_SETREBINDPROC
+
+/* Define to 1 if you have the `acosh' function. */
+#undef HAVE_ACOSH
+
+/* */
+#undef HAVE_ADABAS
+
+/* whether the compiler supports __alignof__ */
+#undef HAVE_ALIGNOF
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#undef HAVE_ALLOCA
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#undef HAVE_ALLOCA_H
+
+/* Define to 1 if you have the `alphasort' function. */
+#undef HAVE_ALPHASORT
+
+/* Whether you have AOLserver */
+#undef HAVE_AOLSERVER
+
+/* */
+#undef HAVE_APACHE
+
+/* */
+#undef HAVE_APACHE_HOOKS
+
+/* Define to 1 if you have the <ApplicationServices/ApplicationServices.h>
+   header file. */
+#undef HAVE_APPLICATIONSERVICES_APPLICATIONSERVICES_H
+
+/* */
+#undef HAVE_AP_COMPAT_H
+
+/* */
+#undef HAVE_AP_CONFIG_H
+
+/* Define to 1 if you have the <arpa/inet.h> header file. */
+#undef HAVE_ARPA_INET_H
+
+/* Define to 1 if you have the <arpa/nameser.h> header file. */
+#undef HAVE_ARPA_NAMESER_H
+
+/* Define to 1 if you have the `asctime_r' function. */
+#undef HAVE_ASCTIME_R
+
+/* Define to 1 if you have the `asinh' function. */
+#undef HAVE_ASINH
+
+/* Define to 1 if you have the `asprintf' function. */
+#undef HAVE_ASPRINTF
+
+/* Define to 1 if you have the <assert.h> header file. */
+#undef HAVE_ASSERT_H
+
+/* Define to 1 if you have the `atanh' function. */
+#undef HAVE_ATANH
+
+/* whether atof() accepts INF */
+#undef HAVE_ATOF_ACCEPTS_INF
+
+/* whether atof() accepts NAN */
+#undef HAVE_ATOF_ACCEPTS_NAN
+
+/* Define to 1 if you have the `atoll' function. */
+#undef HAVE_ATOLL
+
+/* Define to 1 if you have the <atomic.h> header file. */
+#undef HAVE_ATOMIC_H
+
+/* whether the compiler supports __attribute__ ((__aligned__)) */
+#undef HAVE_ATTRIBUTE_ALIGNED
+
+/* Whether you have bcmath */
+#undef HAVE_BCMATH
+
+/* */
+#undef HAVE_BIND_TEXTDOMAIN_CODESET
+
+/* */
+#undef HAVE_BIRDSTEP
+
+/* Define if system has broken getcwd */
+#undef HAVE_BROKEN_GETCWD
+
+/* Define if your glibc borks on fopen with mode a+ */
+#undef HAVE_BROKEN_GLIBC_FOPEN_APPEND
+
+/* Whether we have librecode 3.5 */
+#undef HAVE_BROKEN_RECODE
+
+/* Konstantin Chuguev's iconv implementation */
+#undef HAVE_BSD_ICONV
+
+/* */
+#undef HAVE_BUILD_DEFS_H
+
+/* Define to 1 if gcc supports __sync_bool_compare_and_swap() a.o. */
+#undef HAVE_BUILTIN_ATOMIC
+
+/* */
+#undef HAVE_BUNDLED_PCRE
+
+/* */
+#undef HAVE_BZ2
+
+/* */
+#undef HAVE_CALENDAR
+
+/* Whether to compile with Caudium support */
+#undef HAVE_CAUDIUM
+
+/* Define to 1 if you have the `chroot' function. */
+#undef HAVE_CHROOT
+
+/* Define to 1 if you have the `clearenv' function. */
+#undef HAVE_CLEARENV
+
+/* */
+#undef HAVE_CLI0CLI_H
+
+/* */
+#undef HAVE_CLI0CORE_H
+
+/* */
+#undef HAVE_CLI0DEFS_H
+
+/* */
+#undef HAVE_CLI0ENV_H
+
+/* */
+#undef HAVE_CLI0EXT_H
+
+/* do we have clock_gettime? */
+#undef HAVE_CLOCK_GETTIME
+
+/* do we have clock_get_time? */
+#undef HAVE_CLOCK_GET_TIME
+
+/* Whether you have struct cmsghdr */
+#undef HAVE_CMSGHDR
+
+/* */
+#undef HAVE_CODBC
+
+/* */
+#undef HAVE_COLORCLOSESTHWB
+
+/* Whether you have a Continuity Server */
+#undef HAVE_CONTINUITY
+
+/* Define to 1 if you have the `CreateProcess' function. */
+#undef HAVE_CREATEPROCESS
+
+/* */
+#undef HAVE_CRYPT
+
+/* Define to 1 if you have the <crypt.h> header file. */
+#undef HAVE_CRYPT_H
+
+/* Define to 1 if you have the `crypt_r' function. */
+#undef HAVE_CRYPT_R
+
+/* Define to 1 if you have the `ctermid' function. */
+#undef HAVE_CTERMID
+
+/* Define to 1 if you have the `ctime_r' function. */
+#undef HAVE_CTIME_R
+
+/* */
+#undef HAVE_CTYPE
+
+/* */
+#undef HAVE_CURL
+
+/* */
+#undef HAVE_CURL_EASY_STRERROR
+
+/* Have cURL with GnuTLS support */
+#undef HAVE_CURL_GNUTLS
+
+/* */
+#undef HAVE_CURL_MULTI_STRERROR
+
+/* Have cURL with OpenSSL support */
+#undef HAVE_CURL_OPENSSL
+
+/* Have cURL with SSL support */
+#undef HAVE_CURL_SSL
+
+/* */
+#undef HAVE_CURL_VERSION_INFO
+
+/* Define to 1 if you have the `cuserid' function. */
+#undef HAVE_CUSERID
+
+/* */
+#undef HAVE_DBA
+
+/* Whether you want DBMaker */
+#undef HAVE_DBMAKER
+
+/* */
+#undef HAVE_DCNGETTEXT
+
+/* Define if the compiler supports Decimal32/64/128 types. */
+#undef HAVE_DECIMAL_FP_SUPPORT
+
+/* Whether system headers declare timezone */
+#undef HAVE_DECLARED_TIMEZONE
+
+/* Define to 1 if you have the declaration of `tzname', and to 0 if you don't.
+   */
+#undef HAVE_DECL_TZNAME
+
+/* do we have /dev/poll? */
+#undef HAVE_DEVPOLL
+
+/* Define if the target system has /dev/arandom device */
+#undef HAVE_DEV_ARANDOM
+
+/* Define if the target system has /dev/urandom device */
+#undef HAVE_DEV_URANDOM
+
+/* Define to 1 if you have the <dirent.h> header file. */
+#undef HAVE_DIRENT_H
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#undef HAVE_DLFCN_H
+
+/* */
+#undef HAVE_DLOPEN
+
+/* Whether you have dmalloc */
+#undef HAVE_DMALLOC
+
+/* */
+#undef HAVE_DNGETTEXT
+
+/* Define to 1 if you have the <dns.h> header file. */
+#undef HAVE_DNS_H
+
+/* */
+#undef HAVE_DNS_SEARCH
+
+/* */
+#undef HAVE_DN_EXPAND
+
+/* */
+#undef HAVE_DN_SKIPNAME
+
+/* */
+#undef HAVE_DOM
+
+/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */
+#undef HAVE_DOPRNT
+
+/* OpenSSL 0.9.7 or later */
+#undef HAVE_DSA_DEFAULT_METHOD
+
+/* Whether to enable DTrace support */
+#undef HAVE_DTRACE
+
+/* embedded MySQL support enabled */
+#undef HAVE_EMBEDDED_MYSQLI
+
+/* */
+#undef HAVE_EMPRESS
+
+/* */
+#undef HAVE_ENCHANT
+
+/* */
+#undef HAVE_ENCHANT_BROKER_SET_PARAM
+
+/* do we have epoll? */
+#undef HAVE_EPOLL
+
+/* Define to 1 if you have the <errno.h> header file. */
+#undef HAVE_ERRNO_H
+
+/* */
+#undef HAVE_ESOOB
+
+/* Whether you want EXIF (metadata from images) support */
+#undef HAVE_EXIF
+
+/* Define to 1 if you have the `fabsf' function. */
+#undef HAVE_FABSF
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#undef HAVE_FCNTL_H
+
+/* Define to 1 if you have the `finite' function. */
+#undef HAVE_FINITE
+
+/* Define to 1 if you have the `flock' function. */
+#undef HAVE_FLOCK
+
+/* Define to 1 if you have the `floorf' function. */
+#undef HAVE_FLOORF
+
+/* Define if flush should be called explicitly after a buffered io. */
+#undef HAVE_FLUSHIO
+
+/* Define to 1 if your system has a working POSIX `fnmatch' function. */
+#undef HAVE_FNMATCH
+
+/* */
+#undef HAVE_FOPENCOOKIE
+
+/* Define to 1 if you have the `fork' function. */
+#undef HAVE_FORK
+
+/* Define to 1 if you have the `fpclass' function. */
+#undef HAVE_FPCLASS
+
+/* whether fpsetprec is present and usable */
+#undef HAVE_FPSETPREC
+
+/* whether FPU control word can be manipulated by inline assembler */
+#undef HAVE_FPU_INLINE_ASM_X86
+
+/* whether floatingpoint.h defines fp_except */
+#undef HAVE_FP_EXCEPT
+
+/* */
+#undef HAVE_FREETDS
+
+/* Define to 1 if you have the `ftok' function. */
+#undef HAVE_FTOK
+
+/* Whether you want FTP support */
+#undef HAVE_FTP
+
+/* Define to 1 if you have the `funopen' function. */
+#undef HAVE_FUNOPEN
+
+/* Define to 1 if you have the `gai_strerror' function. */
+#undef HAVE_GAI_STRERROR
+
+/* Whether you have gcov */
+#undef HAVE_GCOV
+
+/* Define to 1 if you have the `gcvt' function. */
+#undef HAVE_GCVT
+
+/* */
+#undef HAVE_GDIMAGECOLORRESOLVE
+
+/* */
+#undef HAVE_GD_BUNDLED
+
+/* */
+#undef HAVE_GD_CACHE_CREATE
+
+/* */
+#undef HAVE_GD_DYNAMIC_CTX_EX
+
+/* */
+#undef HAVE_GD_FONTCACHESHUTDOWN
+
+/* */
+#undef HAVE_GD_FONTMUTEX
+
+/* */
+#undef HAVE_GD_FREEFONTCACHE
+
+/* */
+#undef HAVE_GD_GD2
+
+/* */
+#undef HAVE_GD_GIF_CREATE
+
+/* */
+#undef HAVE_GD_GIF_CTX
+
+/* */
+#undef HAVE_GD_GIF_READ
+
+/* */
+#undef HAVE_GD_IMAGEELLIPSE
+
+/* */
+#undef HAVE_GD_IMAGESETBRUSH
+
+/* */
+#undef HAVE_GD_IMAGESETTILE
+
+/* */
+#undef HAVE_GD_IMAGE_CONVOLUTION
+
+/* */
+#undef HAVE_GD_IMAGE_PIXELATE
+
+/* */
+#undef HAVE_GD_JPG
+
+/* */
+#undef HAVE_GD_PNG
+
+/* */
+#undef HAVE_GD_STRINGFT
+
+/* */
+#undef HAVE_GD_STRINGFTEX
+
+/* */
+#undef HAVE_GD_STRINGTTF
+
+/* */
+#undef HAVE_GD_WBMP
+
+/* */
+#undef HAVE_GD_WEBP
+
+/* */
+#undef HAVE_GD_XBM
+
+/* */
+#undef HAVE_GD_XPM
+
+/* Define if you have the getaddrinfo function */
+#undef HAVE_GETADDRINFO
+
+/* Define to 1 if you have the `getcwd' function. */
+#undef HAVE_GETCWD
+
+/* Define to 1 if you have the `getgrgid_r' function. */
+#undef HAVE_GETGRGID_R
+
+/* Define to 1 if you have the `getgrnam_r' function. */
+#undef HAVE_GETGRNAM_R
+
+/* Define to 1 if you have the `getgroups' function. */
+#undef HAVE_GETGROUPS
+
+/* */
+#undef HAVE_GETHOSTBYADDR
+
+/* Define to 1 if you have the `gethostname' function. */
+#undef HAVE_GETHOSTNAME
+
+/* Define to 1 if you have the `getloadavg' function. */
+#undef HAVE_GETLOADAVG
+
+/* Define to 1 if you have the `getlogin' function. */
+#undef HAVE_GETLOGIN
+
+/* Define to 1 if you have the `getopt' function. */
+#undef HAVE_GETOPT
+
+/* Define to 1 if you have the `getpgid' function. */
+#undef HAVE_GETPGID
+
+/* Define to 1 if you have the `getpid' function. */
+#undef HAVE_GETPID
+
+/* Define to 1 if you have the `getpriority' function. */
+#undef HAVE_GETPRIORITY
+
+/* Define to 1 if you have the `getprotobyname' function. */
+#undef HAVE_GETPROTOBYNAME
+
+/* Define to 1 if you have the `getprotobynumber' function. */
+#undef HAVE_GETPROTOBYNUMBER
+
+/* Define to 1 if you have the `getpwnam_r' function. */
+#undef HAVE_GETPWNAM_R
+
+/* Define to 1 if you have the `getpwuid_r' function. */
+#undef HAVE_GETPWUID_R
+
+/* Define to 1 if you have the `getrlimit' function. */
+#undef HAVE_GETRLIMIT
+
+/* Define to 1 if you have the `getrusage' function. */
+#undef HAVE_GETRUSAGE
+
+/* Define to 1 if you have the `getservbyname' function. */
+#undef HAVE_GETSERVBYNAME
+
+/* Define to 1 if you have the `getservbyport' function. */
+#undef HAVE_GETSERVBYPORT
+
+/* Define to 1 if you have the `getsid' function. */
+#undef HAVE_GETSID
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#undef HAVE_GETTIMEOFDAY
+
+/* Define to 1 if you have the `getwd' function. */
+#undef HAVE_GETWD
+
+/* */
+#undef HAVE_GICONV_H
+
+/* glibc's iconv implementation */
+#undef HAVE_GLIBC_ICONV
+
+/* Define to 1 if you have the `glob' function. */
+#undef HAVE_GLOB
+
+/* */
+#undef HAVE_GMP
+
+/* Define to 1 if you have the `gmtime_r' function. */
+#undef HAVE_GMTIME_R
+
+/* Define to 1 if you have the `grantpt' function. */
+#undef HAVE_GRANTPT
+
+/* Define to 1 if you have the <grp.h> header file. */
+#undef HAVE_GRP_H
+
+/* Have HASH Extension */
+#undef HAVE_HASH_EXT
+
+/* Define to 1 if you have the `hstrerror' function. */
+#undef HAVE_HSTRERROR
+
+/* */
+#undef HAVE_HTONL
+
+/* whether HUGE_VAL == INF */
+#undef HAVE_HUGE_VAL_INF
+
+/* whether HUGE_VAL + -HUGEVAL == NAN */
+#undef HAVE_HUGE_VAL_NAN
+
+/* Define to 1 if you have the `hypot' function. */
+#undef HAVE_HYPOT
+
+/* */
+#undef HAVE_IBASE
+
+/* */
+#undef HAVE_IBMDB2
+
+/* IBM iconv implementation */
+#undef HAVE_IBM_ICONV
+
+/* */
+#undef HAVE_ICONV
+
+/* Define to 1 if you have the <ieeefp.h> header file. */
+#undef HAVE_IEEEFP_H
+
+/* Define to 1 if you have the `if_indextoname' function. */
+#undef HAVE_IF_INDEXTONAME
+
+/* Define to 1 if you have the `if_nametoindex' function. */
+#undef HAVE_IF_NAMETOINDEX
+
+/* */
+#undef HAVE_IMAP
+
+/* */
+#undef HAVE_IMAP2000
+
+/* */
+#undef HAVE_IMAP2001
+
+/* */
+#undef HAVE_IMAP2004
+
+/* */
+#undef HAVE_IMAP_AUTH_GSS
+
+/* */
+#undef HAVE_IMAP_KRB
+
+/* */
+#undef HAVE_IMAP_MUTF7
+
+/* */
+#undef HAVE_IMAP_SSL
+
+/* */
+#undef HAVE_INET_ATON
+
+/* Define to 1 if you have the `inet_ntoa' function. */
+#undef HAVE_INET_NTOA
+
+/* Define to 1 if you have the `inet_ntop' function. */
+#undef HAVE_INET_NTOP
+
+/* Define to 1 if you have the `inet_pton' function. */
+#undef HAVE_INET_PTON
+
+/* Define to 1 if you have the `initgroups' function. */
+#undef HAVE_INITGROUPS
+
+/* Define if int32_t type is present. */
+#undef HAVE_INT32_T
+
+/* Whether intmax_t is available */
+#undef HAVE_INTMAX_T
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#undef HAVE_INTTYPES_H
+
+/* */
+#undef HAVE_IODBC
+
+/* */
+#undef HAVE_IODBC_H
+
+/* Whether to enable IPv6 support */
+#undef HAVE_IPV6
+
+/* Define to 1 if you have the `isascii' function. */
+#undef HAVE_ISASCII
+
+/* Define to 1 if you have the `isfinite' function. */
+#undef HAVE_ISFINITE
+
+/* Define to 1 if you have the `isinf' function. */
+#undef HAVE_ISINF
+
+/* Define to 1 if you have the `isnan' function. */
+#undef HAVE_ISNAN
+
+/* */
+#undef HAVE_ISQLEXT_H
+
+/* */
+#undef HAVE_ISQL_H
+
+/* whether to enable JavaScript Object Serialization support */
+#undef HAVE_JSON
+
+/* Define to 1 if you have the `kill' function. */
+#undef HAVE_KILL
+
+/* do we have kqueue? */
+#undef HAVE_KQUEUE
+
+/* Define to 1 if you have the <langinfo.h> header file. */
+#undef HAVE_LANGINFO_H
+
+/* Define to 1 if you have the `lchown' function. */
+#undef HAVE_LCHOWN
+
+/* */
+#undef HAVE_LDAP
+
+/* Define to 1 if you have the `ldap_parse_reference' function. */
+#undef HAVE_LDAP_PARSE_REFERENCE
+
+/* Define to 1 if you have the `ldap_parse_result' function. */
+#undef HAVE_LDAP_PARSE_RESULT
+
+/* LDAP SASL support */
+#undef HAVE_LDAP_SASL
+
+/* */
+#undef HAVE_LDAP_SASL_H
+
+/* */
+#undef HAVE_LDAP_SASL_SASL_H
+
+/* Define to 1 if you have the `ldap_start_tls_s' function. */
+#undef HAVE_LDAP_START_TLS_S
+
+/* */
+#undef HAVE_LIBBIND
+
+/* */
+#undef HAVE_LIBCRYPT
+
+/* */
+#undef HAVE_LIBDL
+
+/* */
+#undef HAVE_LIBDNET_STUB
+
+/* */
+#undef HAVE_LIBEDIT
+
+/* */
+#undef HAVE_LIBEXPAT
+
+/* */
+#undef HAVE_LIBFREETYPE
+
+/* */
+#undef HAVE_LIBGD
+
+/* */
+#undef HAVE_LIBGD13
+
+/* */
+#undef HAVE_LIBGD15
+
+/* */
+#undef HAVE_LIBGD20
+
+/* */
+#undef HAVE_LIBGD204
+
+/* */
+#undef HAVE_LIBICONV
+
+/* */
+#undef HAVE_LIBINTL
+
+/* Define to 1 if you have the `m' library (-lm). */
+#undef HAVE_LIBM
+
+/* */
+#undef HAVE_LIBMCRYPT
+
+/* Whether you have libmm */
+#undef HAVE_LIBMM
+
+/* */
+#undef HAVE_LIBNSL
+
+/* */
+#undef HAVE_LIBPAM
+
+/* */
+#undef HAVE_LIBRARYMANAGER_H
+
+/* */
+#undef HAVE_LIBREADLINE
+
+/* Whether we have librecode 3.5 or higher */
+#undef HAVE_LIBRECODE
+
+/* */
+#undef HAVE_LIBRESOLV
+
+/* */
+#undef HAVE_LIBRT
+
+/* */
+#undef HAVE_LIBSOCKET
+
+/* */
+#undef HAVE_LIBT1
+
+/* */
+#undef HAVE_LIBXML
+
+/* Define to 1 if you have the <limits.h> header file. */
+#undef HAVE_LIMITS_H
+
+/* Define to 1 if you have the `link' function. */
+#undef HAVE_LINK
+
+/* Define to 1 if you have the `localeconv' function. */
+#undef HAVE_LOCALECONV
+
+/* Define to 1 if you have the <locale.h> header file. */
+#undef HAVE_LOCALE_H
+
+/* Define to 1 if you have the `localtime_r' function. */
+#undef HAVE_LOCALTIME_R
+
+/* Define to 1 if you have the `lockf' function. */
+#undef HAVE_LOCKF
+
+/* Define to 1 if you have the `log1p' function. */
+#undef HAVE_LOG1P
+
+/* do we have SO_LISTENQxxx? */
+#undef HAVE_LQ_SO_LISTENQ
+
+/* do we have TCP_INFO? */
+#undef HAVE_LQ_TCP_INFO
+
+/* Define to 1 if you have the `lrand48' function. */
+#undef HAVE_LRAND48
+
+/* do we have mach_vm_read? */
+#undef HAVE_MACH_VM_READ
+
+/* Define to 1 if you have the `makedev' function. */
+#undef HAVE_MAKEDEV
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#undef HAVE_MALLOC_H
+
+/* Define to 1 if you have the `mblen' function. */
+#undef HAVE_MBLEN
+
+/* whether to have multibyte regex support */
+#undef HAVE_MBREGEX
+
+/* Define to 1 if you have the `mbrlen' function. */
+#undef HAVE_MBRLEN
+
+/* Define to 1 if you have the `mbsinit' function. */
+#undef HAVE_MBSINIT
+
+/* Define if your system has mbstate_t in wchar.h */
+#undef HAVE_MBSTATE_T
+
+/* whether to have multibyte string support */
+#undef HAVE_MBSTRING
+
+/* Define to 1 if you have the `memcpy' function. */
+#undef HAVE_MEMCPY
+
+/* Define to 1 if you have the `memmove' function. */
+#undef HAVE_MEMMOVE
+
+/* Define to 1 if you have the <memory.h> header file. */
+#undef HAVE_MEMORY_H
+
+/* Define to 1 if you have the `mempcpy' function. */
+#undef HAVE_MEMPCPY
+
+/* Define if the target system has support for memory allocation using
+   mmap(MAP_ANON) */
+#undef HAVE_MEM_MMAP_ANON
+
+/* Define if the target system has support for memory allocation using
+   mmap("/dev/zero") */
+#undef HAVE_MEM_MMAP_ZERO
+
+/* Define to 1 if you have the `mkfifo' function. */
+#undef HAVE_MKFIFO
+
+/* Define to 1 if you have the `mknod' function. */
+#undef HAVE_MKNOD
+
+/* Define to 1 if you have the `mkstemp' function. */
+#undef HAVE_MKSTEMP
+
+/* Define to 1 if you have the `mmap' function. */
+#undef HAVE_MMAP
+
+/* Define to 1 if you have the <monetary.h> header file. */
+#undef HAVE_MONETARY_H
+
+/* Define to 1 if you have the `mremap' function. */
+#undef HAVE_MREMAP
+
+/* */
+#undef HAVE_MSSQL
+
+/* Whether you have MySQL */
+#undef HAVE_MYSQL
+
+/* */
+#undef HAVE_MYSQLILIB
+
+/* Define to 1 if you have the `nanosleep' function. */
+#undef HAVE_NANOSLEEP
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+#undef HAVE_NDIR_H
+
+/* Define to 1 if you have the <netdb.h> header file. */
+#undef HAVE_NETDB_H
+
+/* Define to 1 if you have the <netinet/in.h> header file. */
+#undef HAVE_NETINET_IN_H
+
+/* Define to 1 if you have the <netinet/tcp.h> header file. */
+#undef HAVE_NETINET_TCP_H
+
+/* Whether utf8_mime2text() has new signature */
+#undef HAVE_NEW_MIME2TEXT
+
+/* */
+#undef HAVE_NGETTEXT
+
+/* Define to 1 if you have the `nice' function. */
+#undef HAVE_NICE
+
+/* Define to 1 if you have the `nl_langinfo' function. */
+#undef HAVE_NL_LANGINFO
+
+/* Whether you have a Netscape/iPlanet/Sun Webserver */
+#undef HAVE_NSAPI
+
+/* */
+#undef HAVE_NSLDAP
+
+/* */
+#undef HAVE_OCI8
+
+/* */
+#undef HAVE_OCICOLLASSIGN
+
+/* */
+#undef HAVE_OCIENVCREATE
+
+/* */
+#undef HAVE_OCIENVNLSCREATE
+
+/* */
+#undef HAVE_OCILOBISTEMPORARY
+
+/* */
+#undef HAVE_OCISTMTFETCH2
+
+/* */
+#undef HAVE_OCI_INSTANT_CLIENT
+
+/* */
+#undef HAVE_OCI_LOB_READ2
+
+/* */
+#undef HAVE_ODBC2
+
+/* */
+#undef HAVE_ODBCSDK_H
+
+/* */
+#undef HAVE_ODBC_H
+
+/* */
+#undef HAVE_ODBC_ROUTER
+
+/* */
+#undef HAVE_OLD_COMPAT_H
+
+/* whether you have old-style readdir_r */
+#undef HAVE_OLD_READDIR_R
+
+/* Define to 1 if the oniguruma library is available */
+#undef HAVE_ONIG
+
+/* Define to 1 if you have the <openssl/crypto.h> header file. */
+#undef HAVE_OPENSSL_CRYPTO_H
+
+/* */
+#undef HAVE_OPENSSL_EXT
+
+/* */
+#undef HAVE_ORALDAP
+
+/* */
+#undef HAVE_ORALDAP_10
+
+/* Whether struct _zend_object_value is packed */
+#undef HAVE_PACKED_OBJECT_VALUE
+
+/* */
+#undef HAVE_PCRE
+
+/* */
+#undef HAVE_PDO_DBLIB
+
+/* */
+#undef HAVE_PDO_FIREBIRD
+
+/* Whether to build PostgreSQL for PDO support or not */
+#undef HAVE_PDO_PGSQL
+
+/* */
+#undef HAVE_PDO_SQLITELIB
+
+/* Define to 1 if you have the `perror' function. */
+#undef HAVE_PERROR
+
+/* Whether to build PostgreSQL support or not */
+#undef HAVE_PGSQL
+
+/* Whether libpq is compiled with --enable-multibyte */
+#undef HAVE_PGSQL_WITH_MULTIBYTE_SUPPORT
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PGTRANSACTIONSTATUS
+
+/* Whether to have pg_config.h */
+#undef HAVE_PG_CONFIG_H
+
+/* PostgreSQL 8.1 or later */
+#undef HAVE_PG_LO_CREATE
+
+/* PostgreSQL 8.4 or later */
+#undef HAVE_PG_LO_IMPORT_WITH_OID
+
+/* */
+#undef HAVE_PHP_SESSION
+
+/* Whether you have phttpd */
+#undef HAVE_PHTTPD
+
+/* Define to 1 if you have the `poll' function. */
+#undef HAVE_POLL
+
+/* do we have port framework? */
+#undef HAVE_PORT
+
+/* whether to include POSIX-like functions */
+#undef HAVE_POSIX
+
+/* whether you have POSIX readdir_r */
+#undef HAVE_POSIX_READDIR_R
+
+/* PostgreSQL 7.0.x or later */
+#undef HAVE_PQCLIENTENCODING
+
+/* Broken libpq under windows */
+#undef HAVE_PQCMDTUPLES
+
+/* PostgreSQL 7.2.0 or later */
+#undef HAVE_PQESCAPE
+
+/* PostgreSQL 9.0 or later */
+#undef HAVE_PQESCAPELITERAL
+
+/* PostgreSQL 8.1.4 or later */
+#undef HAVE_PQESCAPE_BYTEA_CONN
+
+/* PostgreSQL 8.1.4 or later */
+#undef HAVE_PQESCAPE_CONN
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQEXECPARAMS
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQEXECPREPARED
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQFREEMEM
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQFTABLE
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQGETCOPYDATA
+
+/* Older PostgreSQL */
+#undef HAVE_PQOIDVALUE
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQPARAMETERSTATUS
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQPREPARE
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQPROTOCOLVERSION
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQPUTCOPYDATA
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQPUTCOPYEND
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQRESULTERRORFIELD
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQSENDPREPARE
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQSENDQUERYPARAMS
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQSENDQUERYPREPARED
+
+/* PostgreSQL 7.4 or later */
+#undef HAVE_PQSETERRORVERBOSITY
+
+/* PostgreSQL 7.0.x or later */
+#undef HAVE_PQSETNONBLOCKING
+
+/* PostgreSQL 7.3.0 or later */
+#undef HAVE_PQUNESCAPEBYTEA
+
+/* do we have prctl? */
+#undef HAVE_PRCTL
+
+/* */
+#undef HAVE_PREAD
+
+/* */
+#undef HAVE_PSPELL
+
+/* do we have ptrace? */
+#undef HAVE_PTRACE
+
+/* Whether ptrdiff_t is available */
+#undef HAVE_PTRDIFF_T
+
+/* Define to 1 if you have the `ptsname' function. */
+#undef HAVE_PTSNAME
+
+/* Define to 1 if you have the `putenv' function. */
+#undef HAVE_PUTENV
+
+/* Define to 1 if you have the <pwd.h> header file. */
+#undef HAVE_PWD_H
+
+/* */
+#undef HAVE_PWRITE
+
+/* Define to 1 if you have the `random' function. */
+#undef HAVE_RANDOM
+
+/* Define to 1 if you have the `rand_r' function. */
+#undef HAVE_RAND_R
+
+/* Define to 1 if you have the `realpath' function. */
+#undef HAVE_REALPATH
+
+/* Whether Reflection is enabled */
+#undef HAVE_REFLECTION
+
+/* 1 */
+#undef HAVE_REGEX_T_RE_MAGIC
+
+/* Define to 1 if you have the <resolv.h> header file. */
+#undef HAVE_RESOLV_H
+
+/* */
+#undef HAVE_RES_NSEARCH
+
+/* */
+#undef HAVE_RES_SEARCH
+
+/* */
+#undef HAVE_RFC822_OUTPUT_ADDRESS_LIST
+
+/* */
+#undef HAVE_RL_CALLBACK_READ_CHAR
+
+/* Define to 1 if you have the `rl_completion_matches' function. */
+#undef HAVE_RL_COMPLETION_MATCHES
+
+/* */
+#undef HAVE_RL_ON_NEW_LINE
+
+/* Whether you use Roxen */
+#undef HAVE_ROXEN
+
+/* */
+#undef HAVE_SAPDB
+
+/* Whether you have sockaddr_storage.ss_family */
+#undef HAVE_SA_SS_FAMILY
+
+/* Define to 1 if you have the `scandir' function. */
+#undef HAVE_SCANDIR
+
+/* do we have select? */
+#undef HAVE_SELECT
+
+/* */
+#undef HAVE_SEMUN
+
+/* Define to 1 if you have the `setegid' function. */
+#undef HAVE_SETEGID
+
+/* Define to 1 if you have the `setenv' function. */
+#undef HAVE_SETENV
+
+/* Define to 1 if you have the `seteuid' function. */
+#undef HAVE_SETEUID
+
+/* Define to 1 if you have the `setitimer' function. */
+#undef HAVE_SETITIMER
+
+/* Define to 1 if you have the `setlocale' function. */
+#undef HAVE_SETLOCALE
+
+/* Define to 1 if you have the `setpgid' function. */
+#undef HAVE_SETPGID
+
+/* Define to 1 if you have the `setpriority' function. */
+#undef HAVE_SETPRIORITY
+
+/* Define to 1 if you have the `setproctitle' function. */
+#undef HAVE_SETPROCTITLE
+
+/* Define to 1 if you have the `setsid' function. */
+#undef HAVE_SETSID
+
+/* Define to 1 if you have the `setsockopt' function. */
+#undef HAVE_SETSOCKOPT
+
+/* Define to 1 if you have the `setvbuf' function. */
+#undef HAVE_SETVBUF
+
+/* */
+#undef HAVE_SHMOP
+
+/* Define to 1 if you have the `shutdown' function. */
+#undef HAVE_SHUTDOWN
+
+/* */
+#undef HAVE_SHUTDOWN_SNMP_LOGGING
+
+/* Whether sigaction() is available */
+#undef HAVE_SIGACTION
+
+/* Define to 1 if you have the <signal.h> header file. */
+#undef HAVE_SIGNAL_H
+
+/* Define to 1 if you have the `sigprocmask' function. */
+#undef HAVE_SIGPROCMASK
+
+/* Define to 1 if you have the `sigsetjmp' function. */
+#undef HAVE_SIGSETJMP
+
+/* Define to 1 if you have the `sigtimedwait' function. */
+#undef HAVE_SIGTIMEDWAIT
+
+/* Define to 1 if you have the `sigwaitinfo' function. */
+#undef HAVE_SIGWAITINFO
+
+/* */
+#undef HAVE_SIMPLEXML
+
+/* Define to 1 if you have the `sin' function. */
+#undef HAVE_SIN
+
+/* */
+#undef HAVE_SNMP
+
+/* Define to 1 if you have the `snprintf' function. */
+#undef HAVE_SNPRINTF
+
+/* */
+#undef HAVE_SOAP
+
+/* Whether struct sockaddr has field sa_len */
+#undef HAVE_SOCKADDR_SA_LEN
+
+/* Whether you have struct sockaddr_storage */
+#undef HAVE_SOCKADDR_STORAGE
+
+/* Define if sockaddr_un in sys/un.h contains a sun_len component */
+#undef HAVE_SOCKADDR_UN_SUN_LEN
+
+/* */
+#undef HAVE_SOCKET
+
+/* Define to 1 if you have the `socketpair' function. */
+#undef HAVE_SOCKETPAIR
+
+/* */
+#undef HAVE_SOCKETS
+
+/* Whether you have socklen_t */
+#undef HAVE_SOCKLEN_T
+
+/* */
+#undef HAVE_SOLID
+
+/* */
+#undef HAVE_SOLID_30
+
+/* */
+#undef HAVE_SOLID_35
+
+/* Whether you want SPL (Standard PHP Library) support */
+#undef HAVE_SPL
+
+/* */
+#undef HAVE_SQLCLI1_H
+
+/* */
+#undef HAVE_SQLDATASOURCES
+
+/* */
+#undef HAVE_SQLEXT_H
+
+/* */
+#undef HAVE_SQLITE3
+
+/* have commercial sqlite3 with crypto support */
+#undef HAVE_SQLITE3_KEY
+
+/* */
+#undef HAVE_SQLTYPES_H
+
+/* */
+#undef HAVE_SQLUCODE_H
+
+/* */
+#undef HAVE_SQLUNIX_H
+
+/* */
+#undef HAVE_SQL_H
+
+/* Define to 1 if you have the `srand48' function. */
+#undef HAVE_SRAND48
+
+/* Define to 1 if you have the `srandom' function. */
+#undef HAVE_SRANDOM
+
+/* Whether ssize_t is available */
+#undef HAVE_SSIZE_T
+
+/* Define to 1 if you have the `statfs' function. */
+#undef HAVE_STATFS
+
+/* Define to 1 if you have the `statvfs' function. */
+#undef HAVE_STATVFS
+
+/* Define to 1 if you have the <stdarg.h> header file. */
+#undef HAVE_STDARG_H
+
+/* Define to 1 if you have the <stdarg.h> header file. */
+#undef HAVE_STDARG_PROTOTYPES
+
+/* Define to 1 if you have the <stdbool.h> header file. */
+#undef HAVE_STDBOOL_H
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#undef HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdio.h> header file. */
+#undef HAVE_STDIO_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#undef HAVE_STDLIB_H
+
+/* Define to 1 if you have the `std_syslog' function. */
+#undef HAVE_STD_SYSLOG
+
+/* */
+#undef HAVE_STMT_NEXT_RESULT
+
+/* Define to 1 if you have the `strcasecmp' function. */
+#undef HAVE_STRCASECMP
+
+/* Define to 1 if you have the `strcoll' function. */
+#undef HAVE_STRCOLL
+
+/* Define to 1 if you have the `strdup' function. */
+#undef HAVE_STRDUP
+
+/* Define to 1 if you have the `strerror' function. */
+#undef HAVE_STRERROR
+
+/* Define to 1 if you have the `strfmon' function. */
+#undef HAVE_STRFMON
+
+/* Define to 1 if you have the `strftime' function. */
+#undef HAVE_STRFTIME
+
+/* Define to 1 if you have the <strings.h> header file. */
+#undef HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#undef HAVE_STRING_H
+
+/* Define to 1 if you have the `strlcat' function. */
+#undef HAVE_STRLCAT
+
+/* Define to 1 if you have the `strlcpy' function. */
+#undef HAVE_STRLCPY
+
+/* Define to 1 if you have the `strndup' function. */
+#undef HAVE_STRNDUP
+
+/* Define to 1 if you have the `strnlen' function. */
+#undef HAVE_STRNLEN
+
+/* Define to 1 if you have the `strpbrk' function. */
+#undef HAVE_STRPBRK
+
+/* Define to 1 if you have the `strpncpy' function. */
+#undef HAVE_STRPNCPY
+
+/* Define to 1 if you have the `strptime' function. */
+#undef HAVE_STRPTIME
+
+/* whether strptime() declaration fails */
+#undef HAVE_STRPTIME_DECL_FAILS
+
+/* Define to 1 if you have the `strstr' function. */
+#undef HAVE_STRSTR
+
+/* Define to 1 if you have the `strtod' function. */
+#undef HAVE_STRTOD
+
+/* Define to 1 if you have the `strtok_r' function. */
+#undef HAVE_STRTOK_R
+
+/* Define to 1 if you have the `strtol' function. */
+#undef HAVE_STRTOL
+
+/* Define to 1 if you have the `strtoll' function. */
+#undef HAVE_STRTOLL
+
+/* Define to 1 if you have the `strtoul' function. */
+#undef HAVE_STRTOUL
+
+/* Define to 1 if you have the `strtoull' function. */
+#undef HAVE_STRTOULL
+
+/* whether you have struct flock */
+#undef HAVE_STRUCT_FLOCK
+
+/* Define to 1 if `st_blksize' is a member of `struct stat'. */
+#undef HAVE_STRUCT_STAT_ST_BLKSIZE
+
+/* Define to 1 if `st_blocks' is a member of `struct stat'. */
+#undef HAVE_STRUCT_STAT_ST_BLOCKS
+
+/* Define to 1 if `st_rdev' is a member of `struct stat'. */
+#undef HAVE_STRUCT_STAT_ST_RDEV
+
+/* Define to 1 if `tm_zone' is a member of `struct tm'. */
+#undef HAVE_STRUCT_TM_TM_ZONE
+
+/* Define to 1 if your `struct stat' has `st_blksize'. Deprecated, use
+   `HAVE_STRUCT_STAT_ST_BLKSIZE' instead. */
+#undef HAVE_ST_BLKSIZE
+
+/* Define to 1 if your `struct stat' has `st_blocks'. Deprecated, use
+   `HAVE_STRUCT_STAT_ST_BLOCKS' instead. */
+#undef HAVE_ST_BLOCKS
+
+/* Define to 1 if you have the <st.h> header file. */
+#undef HAVE_ST_H
+
+/* Define to 1 if your `struct stat' has `st_rdev'. Deprecated, use
+   `HAVE_STRUCT_STAT_ST_RDEV' instead. */
+#undef HAVE_ST_RDEV
+
+/* */
+#undef HAVE_SYBASE_CT
+
+/* Define to 1 if you have the `symlink' function. */
+#undef HAVE_SYMLINK
+
+/* Define if you have the __sync_fetch_and_add function */
+#undef HAVE_SYNC_FETCH_AND_ADD
+
+/* do we have sysconf? */
+#undef HAVE_SYSCONF
+
+/* Define to 1 if you have the <sysexits.h> header file. */
+#undef HAVE_SYSEXITS_H
+
+/* Define to 1 if you have the <syslog.h> header file. */
+#undef HAVE_SYSLOG_H
+
+/* FPM use systemd integration */
+#undef HAVE_SYSTEMD
+
+/* Define to 1 if you have the <systemd/sd-daemon.h> header file. */
+#undef HAVE_SYSTEMD_SD_DAEMON_H
+
+/* */
+#undef HAVE_SYSVMSG
+
+/* */
+#undef HAVE_SYSVSEM
+
+/* */
+#undef HAVE_SYSVSHM
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+#undef HAVE_SYS_DIR_H
+
+/* Define to 1 if you have the <sys/file.h> header file. */
+#undef HAVE_SYS_FILE_H
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#undef HAVE_SYS_IOCTL_H
+
+/* Define to 1 if you have the <sys/ipc.h> header file. */
+#undef HAVE_SYS_IPC_H
+
+/* Define to 1 if you have the <sys/loadavg.h> header file. */
+#undef HAVE_SYS_LOADAVG_H
+
+/* Define to 1 if you have the <sys/mkdev.h> header file. */
+#undef HAVE_SYS_MKDEV_H
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#undef HAVE_SYS_MMAN_H
+
+/* Define to 1 if you have the <sys/mount.h> header file. */
+#undef HAVE_SYS_MOUNT_H
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+#undef HAVE_SYS_NDIR_H
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#undef HAVE_SYS_PARAM_H
+
+/* Define to 1 if you have the <sys/poll.h> header file. */
+#undef HAVE_SYS_POLL_H
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#undef HAVE_SYS_RESOURCE_H
+
+/* Define to 1 if you have the <sys/sdt.h> header file. */
+#undef HAVE_SYS_SDT_H
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#undef HAVE_SYS_SELECT_H
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#undef HAVE_SYS_SOCKET_H
+
+/* Define to 1 if you have the <sys/sockio.h> header file. */
+#undef HAVE_SYS_SOCKIO_H
+
+/* Define to 1 if you have the <sys/statfs.h> header file. */
+#undef HAVE_SYS_STATFS_H
+
+/* Define to 1 if you have the <sys/statvfs.h> header file. */
+#undef HAVE_SYS_STATVFS_H
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#undef HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/sysexits.h> header file. */
+#undef HAVE_SYS_SYSEXITS_H
+
+/* Define to 1 if you have the <sys/times.h> header file. */
+#undef HAVE_SYS_TIMES_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#undef HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#undef HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#undef HAVE_SYS_UIO_H
+
+/* Define to 1 if you have the <sys/un.h> header file. */
+#undef HAVE_SYS_UN_H
+
+/* Define to 1 if you have the <sys/utsname.h> header file. */
+#undef HAVE_SYS_UTSNAME_H
+
+/* Define to 1 if you have the <sys/varargs.h> header file. */
+#undef HAVE_SYS_VARARGS_H
+
+/* Define to 1 if you have the <sys/vfs.h> header file. */
+#undef HAVE_SYS_VFS_H
+
+/* Define to 1 if you have the <sys/wait.h> header file. */
+#undef HAVE_SYS_WAIT_H
+
+/* Define to 1 if you have the `tempnam' function. */
+#undef HAVE_TEMPNAM
+
+/* Define to 1 if you have the <termios.h> header file. */
+#undef HAVE_TERMIOS_H
+
+/* */
+#undef HAVE_TIDY
+
+/* */
+#undef HAVE_TIDYOPTGETDOC
+
+/* do we have times? */
+#undef HAVE_TIMES
+
+/* Define to 1 if you have the <time.h> header file. */
+#undef HAVE_TIME_H
+
+/* whether you have tm_gmtoff in struct tm */
+#undef HAVE_TM_GMTOFF
+
+/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use
+   `HAVE_STRUCT_TM_TM_ZONE' instead. */
+#undef HAVE_TM_ZONE
+
+/* Whether you have a working ttyname_r */
+#undef HAVE_TTYNAME_R
+
+/* Define to 1 if you have the <tuxmodule.h> header file. */
+#undef HAVE_TUXMODULE_H
+
+/* Define to 1 if you don't have `tm_zone' but do have the external array
+   `tzname'. */
+#undef HAVE_TZNAME
+
+/* Define to 1 if you have the `tzset' function. */
+#undef HAVE_TZSET
+
+/* */
+#undef HAVE_UDBCEXT_H
+
+/* Define if uint32_t type is present. */
+#undef HAVE_UINT32_T
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#undef HAVE_UNISTD_H
+
+/* */
+#undef HAVE_UNIXODBC
+
+/* Define to 1 if you have the <unix.h> header file. */
+#undef HAVE_UNIX_H
+
+/* Define to 1 if you have the `unlockpt' function. */
+#undef HAVE_UNLOCKPT
+
+/* Define to 1 if you have the `unsetenv' function. */
+#undef HAVE_UNSETENV
+
+/* */
+#undef HAVE_UODBC
+
+/* Define to 1 if you have the `usleep' function. */
+#undef HAVE_USLEEP
+
+/* Define to 1 if you have the `utime' function. */
+#undef HAVE_UTIME
+
+/* Define to 1 if you have the `utimes' function. */
+#undef HAVE_UTIMES
+
+/* Define to 1 if you have the <utime.h> header file. */
+#undef HAVE_UTIME_H
+
+/* Define to 1 if `utime(file, NULL)' sets file's timestamp to the present. */
+#undef HAVE_UTIME_NULL
+
+/* Whether struct utsname has domainname */
+#undef HAVE_UTSNAME_DOMAINNAME
+
+/* Define to 1 if you have the `vasprintf' function. */
+#undef HAVE_VASPRINTF
+
+/* Define to 1 if you have the `vprintf' function. */
+#undef HAVE_VPRINTF
+
+/* Define to 1 if you have the `vsnprintf' function. */
+#undef HAVE_VSNPRINTF
+
+/* Define to 1 if you have the `wait3' function. */
+#undef HAVE_WAIT3
+
+/* */
+#undef HAVE_WAITPID
+
+/* Define to 1 if you have the <wchar.h> header file. */
+#undef HAVE_WCHAR_H
+
+/* */
+#undef HAVE_WDDX
+
+/* */
+#undef HAVE_XML
+
+/* Define to 1 if you have the <xmlparse.h> header file. */
+#undef HAVE_XMLPARSE_H
+
+/* */
+#undef HAVE_XMLREADER
+
+/* */
+#undef HAVE_XMLRPC
+
+/* Define to 1 if you have the <xmltok.h> header file. */
+#undef HAVE_XMLTOK_H
+
+/* */
+#undef HAVE_XMLWRITER
+
+/* */
+#undef HAVE_XSL
+
+/* */
+#undef HAVE_XSL_EXSLT
+
+/* */
+#undef HAVE_YP_GET_DEFAULT_DOMAIN
+
+/* */
+#undef HAVE_ZIP
+
+/* */
+#undef HAVE_ZLIB
+
+/* whether _controlfp is present usable */
+#undef HAVE__CONTROLFP
+
+/* whether _controlfp_s is present and usable */
+#undef HAVE__CONTROLFP_S
+
+/* whether _FPU_SETCW is present and usable */
+#undef HAVE__FPU_SETCW
+
+/* */
+#undef HPUX
+
+/* */
+#undef HSREGEX
+
+/* iconv() is aliased to libiconv() in -liconv */
+#undef ICONV_ALIASED_LIBICONV
+
+/* Whether iconv supports error no or not */
+#undef ICONV_SUPPORTS_ERRNO
+
+/* */
+#undef ISOLARIS
+
+/* */
+#undef LINUX
+
+/* Whether asctime_r is declared */
+#undef MISSING_ASCTIME_R_DECL
+
+/* Whether ctime_r is declared */
+#undef MISSING_CTIME_R_DECL
+
+/* */
+#undef MISSING_FCLOSE_DECL
+
+/* Whether gmtime_r is declared */
+#undef MISSING_GMTIME_R_DECL
+
+/* Whether localtime_r is declared */
+#undef MISSING_LOCALTIME_R_DECL
+
+/* */
+#undef MISSING_MSGHDR_MSGFLAGS
+
+/* Whether strtok_r is declared */
+#undef MISSING_STRTOK_R_DECL
+
+/* Whether mysqlnd is enabled */
+#undef MYSQLI_USE_MYSQLND
+
+/* Enable compressed protocol support */
+#undef MYSQLND_COMPRESSION_WANTED
+
+/* Enable SSL support */
+#undef MYSQLND_SSL_SUPPORTED
+
+/* Whether mysqlnd is enabled */
+#undef MYSQL_USE_MYSQLND
+
+/* */
+#undef NDBM_INCLUDE_FILE
+
+/* */
+#undef NEUTRINO
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+#undef NO_MINUS_C_MINUS_O
+
+/* Define to the address where bug reports for this package should be sent. */
+#undef PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#undef PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#undef PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#undef PACKAGE_TARNAME
+
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
+/* Define to the version of this package. */
+#undef PACKAGE_VERSION
+
+/* */
+#undef PDO_MYSQL_UNIX_ADDR
+
+/* Whether pdo_mysql uses mysqlnd */
+#undef PDO_USE_MYSQLND
+
+/* */
+#undef PHAR_HASH_OK
+
+/* */
+#undef PHAR_HAVE_OPENSSL
+
+/* */
+#undef PHP_APACHE_HAVE_CLIENT_FD
+
+/* Whether the system supports BlowFish salt */
+#undef PHP_BLOWFISH_CRYPT
+
+/* PHP build date */
+#undef PHP_BUILD_DATE
+
+/* Define if your system has fork/vfork/CreateProcess */
+#undef PHP_CAN_SUPPORT_PROC_OPEN
+
+/* */
+#undef PHP_CURL_URL_WRAPPERS
+
+/* Whether the system supports extended DES salt */
+#undef PHP_EXT_DES_CRYPT
+
+/* fpm group name */
+#undef PHP_FPM_GROUP
+
+/* fpm systemd service type */
+#undef PHP_FPM_SYSTEMD
+
+/* fpm user name */
+#undef PHP_FPM_USER
+
+/* Whether you have HP-UX 10.x */
+#undef PHP_HPUX_TIME_R
+
+/* Path to iconv.h */
+#undef PHP_ICONV_H_PATH
+
+/* Which iconv implementation to use */
+#undef PHP_ICONV_IMPL
+
+/* Whether you have IRIX-style functions */
+#undef PHP_IRIX_TIME_R
+
+/* Whether the system supports MD5 salt */
+#undef PHP_MD5_CRYPT
+
+/* */
+#undef PHP_MHASH_BC
+
+/* */
+#undef PHP_MYSQL_UNIX_SOCK_ADDR
+
+/* */
+#undef PHP_OCI8_DEF_DIR
+
+/* */
+#undef PHP_OCI8_DEF_SHARED_LIBADD
+
+/* define to 1 if oniguruma has an invalid entry for KOI8 encoding */
+#undef PHP_ONIG_BAD_KOI8_ENTRY
+
+/* Define to 1 if the bundled oniguruma is used */
+#undef PHP_ONIG_BUNDLED
+
+/* uname output */
+#undef PHP_OS
+
+/* */
+#undef PHP_PDO_OCI_CLIENT_VERSION
+
+/* whether pread64 is default */
+#undef PHP_PREAD_64
+
+/* whether pwrite64 is default */
+#undef PHP_PWRITE_64
+
+/* Whether the system supports SHA256 salt */
+#undef PHP_SHA256_CRYPT
+
+/* Whether the system supports SHA512 salt */
+#undef PHP_SHA512_CRYPT
+
+/* */
+#undef PHP_SIGCHILD
+
+/* Whether the system supports standard DES salt */
+#undef PHP_STD_DES_CRYPT
+
+/* uname -a output */
+#undef PHP_UNAME
+
+/* Whether PHP has to use its own crypt_r for blowfish, des and ext des */
+#undef PHP_USE_PHP_CRYPT_R
+
+/* whether write(2) works */
+#undef PHP_WRITE_STDOUT
+
+/* /proc/pid/mem interface */
+#undef PROC_MEM_FILE
+
+/* Whether to use Pthreads */
+#undef PTHREADS
+
+/* */
+#undef QDBM_INCLUDE_FILE
+
+/* */
+#undef REGEX
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#undef RETSIGTYPE
+
+/* Whether to use Roxen in ZTS mode */
+#undef ROXEN_USE_ZTS
+
+/* The size of `char', as computed by sizeof. */
+#undef SIZEOF_CHAR
+
+/* The size of `int', as computed by sizeof. */
+#undef SIZEOF_INT
+
+/* Size of intmax_t */
+#undef SIZEOF_INTMAX_T
+
+/* The size of `long', as computed by sizeof. */
+#undef SIZEOF_LONG
+
+/* The size of `long int', as computed by sizeof. */
+#undef SIZEOF_LONG_INT
+
+/* The size of `long long', as computed by sizeof. */
+#undef SIZEOF_LONG_LONG
+
+/* The size of `long long int', as computed by sizeof. */
+#undef SIZEOF_LONG_LONG_INT
+
+/* Size of ptrdiff_t */
+#undef SIZEOF_PTRDIFF_T
+
+/* The size of `short', as computed by sizeof. */
+#undef SIZEOF_SHORT
+
+/* The size of `size_t', as computed by sizeof. */
+#undef SIZEOF_SIZE_T
+
+/* Size of ssize_t */
+#undef SIZEOF_SSIZE_T
+
+/* */
+#undef SOLARIS
+
+/* have sqlite3 with column metadata enabled */
+#undef SQLITE_ENABLE_COLUMN_METADATA
+
+/* have sqlite3 with extension support */
+#undef SQLITE_OMIT_LOAD_EXTENSION
+
+/* Needed in sqlunix.h for wchar defs */
+#undef SS_FBX
+
+/* Needed in sqlunix.h */
+#undef SS_LINUX
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#undef STACK_DIRECTION
+
+/* Define to 1 if you have the ANSI C header files. */
+#undef STDC_HEADERS
+
+/* */
+#undef TCADB_INCLUDE_FILE
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#undef TIME_WITH_SYS_TIME
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+#undef TM_IN_SYS_TIME
+
+/* */
+#undef TSRM_ST
+
+/* */
+#undef UNDEF_THREADS_HACK
+
+/* */
+#undef UNIXWARE
+
+/* whether to check multibyte regex backtrack */
+#undef USE_COMBINATION_EXPLOSION_CHECK
+
+/* */
+#undef USE_GD_IMGSTRTTF
+
+/* */
+#undef USE_GD_JISX0208
+
+/* Define if cross-process locking is required by accept() */
+#undef USE_LOCKING
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# undef _ALL_SOURCE
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# undef _GNU_SOURCE
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# undef _POSIX_PTHREAD_SEMANTICS
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# undef _TANDEM_SOURCE
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# undef __EXTENSIONS__
+#endif
+
+
+/* */
+#undef USE_TRANSFER_TABLES
+
+/* whether you want Pi3Web support */
+#undef WITH_PI3WEB
+
+/* */
+#undef WITH_ZEUS
+
+/* Define if processor uses big-endian word */
+#undef WORDS_BIGENDIAN
+
+/* Whether sprintf is broken */
+#undef ZEND_BROKEN_SPRINTF
+
+/* */
+#undef ZEND_DEBUG
+
+/* Define if double cast to long preserves least significant bits */
+#undef ZEND_DVAL_TO_LVAL_CAST_OK
+
+/* */
+#undef ZEND_MM_ALIGNMENT
+
+/* */
+#undef ZEND_MM_ALIGNMENT_LOG2
+
+/* Use zend signal handling */
+#undef ZEND_SIGNALS
+
+/* virtual machine dispatch method */
+#undef ZEND_VM_KIND
+
+/* */
+#undef ZTS
+
+/* Define to 1 if on MINIX. */
+#undef _MINIX
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+#undef _POSIX_1_SOURCE
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+#undef _POSIX_SOURCE
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#undef const
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#undef gid_t
+
+/* */
+#undef in_addr_t
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#undef inline
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#undef size_t
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#undef uid_t
+
+/* Define to `unsigned int ' if <sys/types.h> does not define. */
+#undef uint
+
+/* Define to `unsigned long ' if <sys/types.h> does not define. */
+#undef ulong
+
+
+#ifndef ZEND_ACCONFIG_H_NO_C_PROTOS
+
+#ifdef HAVE_STDLIB_H
+# include <stdlib.h>
+#endif
+
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+
+#ifdef HAVE_SYS_SELECT_H
+#include <sys/select.h>
+#endif
+
+#ifdef HAVE_IEEEFP_H
+# include <ieeefp.h>
+#endif
+
+#ifdef HAVE_STRING_H
+# include <string.h>
+#else
+# include <strings.h>
+#endif
+
+#if ZEND_BROKEN_SPRINTF
+int zend_sprintf(char *buffer, const char *format, ...);
+#else
+# define zend_sprintf sprintf
+#endif
+
+#include <math.h>
+
+/* To enable the is_nan, is_infinite and is_finite PHP functions */
+#ifdef NETWARE
+	#define HAVE_ISNAN 1
+	#define HAVE_ISINF 1
+	#define HAVE_ISFINITE 1
+#endif
+
+#ifndef zend_isnan
+#ifdef HAVE_ISNAN
+#define zend_isnan(a) isnan(a)
+#elif defined(HAVE_FPCLASS)
+#define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
+#else
+#define zend_isnan(a) 0
+#endif
+#endif
+
+#ifdef HAVE_ISINF
+#define zend_isinf(a) isinf(a)
+#elif defined(INFINITY)
+/* Might not work, but is required by ISO C99 */
+#define zend_isinf(a) (((a)==INFINITY)?1:0)
+#elif defined(HAVE_FPCLASS)
+#define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
+#else
+#define zend_isinf(a) 0
+#endif
+
+#ifdef HAVE_FINITE
+#define zend_finite(a) finite(a)
+#elif defined(HAVE_ISFINITE) || defined(isfinite)
+#define zend_finite(a) isfinite(a)
+#elif defined(fpclassify)
+#define zend_finite(a) ((fpclassify((a))!=FP_INFINITE&&fpclassify((a))!=FP_NAN)?1:0)
+#else
+#define zend_finite(a) (zend_isnan(a) ? 0 : zend_isinf(a) ? 0 : 1)
+#endif
+
+#endif /* ifndef ZEND_ACCONFIG_H_NO_C_PROTOS */
+
+#ifdef NETWARE
+#ifdef USE_WINSOCK
+#/*This detection against winsock is of no use*/ undef HAVE_SOCKLEN_T
+#/*This detection against winsock is of no use*/ undef HAVE_SYS_SOCKET_H
+#endif
+#endif
+
+#undef PTHREADS
+
diff -urNp php-5.4.40.org/main/php_globals.h php-5.4.40/main/php_globals.h
--- php-5.4.40.org/main/php_globals.h	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/main/php_globals.h	2016-06-18 05:36:45.278125732 +0900
@@ -66,6 +66,9 @@ struct _php_core_globals {
 	char *unserialize_callback_func;
 	long serialize_precision;
 
+	char *exec_dir;
+	char *safe_mode_exec_dir;
+
 	long memory_limit;
 	long max_input_time;
 
diff -urNp php-5.4.40.org/php.ini-development php-5.4.40/php.ini-development
--- php-5.4.40.org/php.ini-development	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/php.ini-development	2016-06-18 05:36:45.279125787 +0900
@@ -291,6 +291,11 @@ unserialize_callback_func =
 ; are decoded with unserialize, the data will remain the same.
 serialize_precision = 17
 
+; only executables located in the exec_dir will be allowed to be executed
+; via the exec family of functions. This is only AnNyung LInux patch
+; see also https://github.com/OOPS-ORG-PHP/mod_execdir/
+exec_dir =
+
 ; open_basedir, if set, limits all file operations to the defined directory
 ; and below.  This directive makes most sense if used in a per-directory
 ; or per-virtualhost web server configuration file. This directive is
diff -urNp php-5.4.40.org/php.ini-development.orig php-5.4.40/php.ini-development.orig
--- php-5.4.40.org/php.ini-development.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/php.ini-development.orig	2015-04-15 13:16:17.000000000 +0900
@@ -0,0 +1,1831 @@
+[PHP]
+
+;;;;;;;;;;;;;;;;;;;
+; About php.ini   ;
+;;;;;;;;;;;;;;;;;;;
+; PHP's initialization file, generally called php.ini, is responsible for
+; configuring many of the aspects of PHP's behavior.
+
+; PHP attempts to find and load this configuration from a number of locations.
+; The following is a summary of its search order:
+; 1. SAPI module specific location.
+; 2. The PHPRC environment variable. (As of PHP 5.2.0)
+; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)
+; 4. Current working directory (except CLI)
+; 5. The web server's directory (for SAPI modules), or directory of PHP
+; (otherwise in Windows)
+; 6. The directory from the --with-config-file-path compile time option, or the
+; Windows directory (C:\windows or C:\winnt)
+; See the PHP docs for more specific information.
+; http://php.net/configuration.file
+
+; The syntax of the file is extremely simple.  Whitespace and lines
+; beginning with a semicolon are silently ignored (as you probably guessed).
+; Section headers (e.g. [Foo]) are also silently ignored, even though
+; they might mean something in the future.
+
+; Directives following the section heading [PATH=/www/mysite] only
+; apply to PHP files in the /www/mysite directory.  Directives
+; following the section heading [HOST=www.example.com] only apply to
+; PHP files served from www.example.com.  Directives set in these
+; special sections cannot be overridden by user-defined INI files or
+; at runtime. Currently, [PATH=] and [HOST=] sections only work under
+; CGI/FastCGI.
+; http://php.net/ini.sections
+
+; Directives are specified using the following syntax:
+; directive = value
+; Directive names are *case sensitive* - foo=bar is different from FOO=bar.
+; Directives are variables used to configure PHP or PHP extensions.
+; There is no name validation.  If PHP can't find an expected
+; directive because it is not set or is mistyped, a default value will be used.
+
+; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one
+; of the INI constants (On, Off, True, False, Yes, No and None) or an expression
+; (e.g. E_ALL & ~E_NOTICE), a quoted string ("bar"), or a reference to a
+; previously set variable or directive (e.g. ${foo})
+
+; Expressions in the INI file are limited to bitwise operators and parentheses:
+; |  bitwise OR
+; ^  bitwise XOR
+; &  bitwise AND
+; ~  bitwise NOT
+; !  boolean NOT
+
+; Boolean flags can be turned on using the values 1, On, True or Yes.
+; They can be turned off using the values 0, Off, False or No.
+
+; An empty string can be denoted by simply not writing anything after the equal
+; sign, or by using the None keyword:
+
+;  foo =         ; sets foo to an empty string
+;  foo = None    ; sets foo to an empty string
+;  foo = "None"  ; sets foo to the string 'None'
+
+; If you use constants in your value, and these constants belong to a
+; dynamically loaded extension (either a PHP extension or a Zend extension),
+; you may only use these constants *after* the line that loads the extension.
+
+;;;;;;;;;;;;;;;;;;;
+; About this file ;
+;;;;;;;;;;;;;;;;;;;
+; PHP comes packaged with two INI files. One that is recommended to be used
+; in production environments and one that is recommended to be used in
+; development environments.
+
+; php.ini-production contains settings which hold security, performance and
+; best practices at its core. But please be aware, these settings may break
+; compatibility with older or less security conscience applications. We
+; recommending using the production ini in production and testing environments.
+
+; php.ini-development is very similar to its production variant, except it's
+; much more verbose when it comes to errors. We recommending using the
+; development version only in development environments as errors shown to
+; application users can inadvertently leak otherwise secure information.
+
+; This is php.ini-development INI file.
+
+;;;;;;;;;;;;;;;;;;;
+; Quick Reference ;
+;;;;;;;;;;;;;;;;;;;
+; The following are all the settings which are different in either the production
+; or development versions of the INIs with respect to PHP's default behavior.
+; Please see the actual settings later in the document for more details as to why
+; we recommend these changes in PHP's behavior.
+
+; display_errors
+;   Default Value: On
+;   Development Value: On
+;   Production Value: Off
+
+; display_startup_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: Off
+
+; error_reporting
+;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
+;   Development Value: E_ALL
+;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
+
+; html_errors
+;   Default Value: On
+;   Development Value: On
+;   Production value: On
+
+; log_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: On
+
+; max_input_time
+;   Default Value: -1 (Unlimited)
+;   Development Value: 60 (60 seconds)
+;   Production Value: 60 (60 seconds)
+
+; output_buffering
+;   Default Value: Off
+;   Development Value: 4096
+;   Production Value: 4096
+
+; register_argc_argv
+;   Default Value: On
+;   Development Value: Off
+;   Production Value: Off
+
+; request_order
+;   Default Value: None
+;   Development Value: "GP"
+;   Production Value: "GP"
+
+; session.gc_divisor
+;   Default Value: 100
+;   Development Value: 1000
+;   Production Value: 1000
+
+; session.hash_bits_per_character
+;   Default Value: 4
+;   Development Value: 5
+;   Production Value: 5
+
+; short_open_tag
+;   Default Value: On
+;   Development Value: Off
+;   Production Value: Off
+
+; track_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: Off
+
+; url_rewriter.tags
+;   Default Value: "a=href,area=href,frame=src,form=,fieldset="
+;   Development Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+;   Production Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+
+; variables_order
+;   Default Value: "EGPCS"
+;   Development Value: "GPCS"
+;   Production Value: "GPCS"
+
+;;;;;;;;;;;;;;;;;;;;
+; php.ini Options  ;
+;;;;;;;;;;;;;;;;;;;;
+; Name for user-defined php.ini (.htaccess) files. Default is ".user.ini"
+;user_ini.filename = ".user.ini"
+
+; To disable this feature set this option to empty value
+;user_ini.filename =
+
+; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)
+;user_ini.cache_ttl = 300
+
+;;;;;;;;;;;;;;;;;;;;
+; Language Options ;
+;;;;;;;;;;;;;;;;;;;;
+
+; Enable the PHP scripting language engine under Apache.
+; http://php.net/engine
+engine = On
+
+; This directive determines whether or not PHP will recognize code between
+; <? and ?> tags as PHP source which should be processed as such. It is
+; generally recommended that <?php and ?> should be used and that this feature
+; should be disabled, as enabling it may result in issues when generating XML
+; documents, however this remains supported for backward compatibility reasons.
+; Note that this directive does not control the <?= shorthand tag, which can be
+; used regardless of this directive.
+; Default Value: On
+; Development Value: Off
+; Production Value: Off
+; http://php.net/short-open-tag
+short_open_tag = Off
+
+; Allow ASP-style <% %> tags.
+; http://php.net/asp-tags
+asp_tags = Off
+
+; The number of significant digits displayed in floating point numbers.
+; http://php.net/precision
+precision = 14
+
+; Output buffering is a mechanism for controlling how much output data
+; (excluding headers and cookies) PHP should keep internally before pushing that
+; data to the client. If your application's output exceeds this setting, PHP
+; will send that data in chunks of roughly the size you specify.
+; Turning on this setting and managing its maximum buffer size can yield some
+; interesting side-effects depending on your application and web server.
+; You may be able to send headers and cookies after you've already sent output
+; through print or echo. You also may see performance benefits if your server is
+; emitting less packets due to buffered output versus PHP streaming the output
+; as it gets it. On production servers, 4096 bytes is a good setting for performance
+; reasons.
+; Note: Output buffering can also be controlled via Output Buffering Control
+;   functions.
+; Possible Values:
+;   On = Enabled and buffer is unlimited. (Use with caution)
+;   Off = Disabled
+;   Integer = Enables the buffer and sets its maximum size in bytes.
+; Note: This directive is hardcoded to Off for the CLI SAPI
+; Default Value: Off
+; Development Value: 4096
+; Production Value: 4096
+; http://php.net/output-buffering
+output_buffering = 4096
+
+; You can redirect all of the output of your scripts to a function.  For
+; example, if you set output_handler to "mb_output_handler", character
+; encoding will be transparently converted to the specified encoding.
+; Setting any output handler automatically turns on output buffering.
+; Note: People who wrote portable scripts should not depend on this ini
+;   directive. Instead, explicitly set the output handler using ob_start().
+;   Using this ini directive may cause problems unless you know what script
+;   is doing.
+; Note: You cannot use both "mb_output_handler" with "ob_iconv_handler"
+;   and you cannot use both "ob_gzhandler" and "zlib.output_compression".
+; Note: output_handler must be empty if this is set 'On' !!!!
+;   Instead you must use zlib.output_handler.
+; http://php.net/output-handler
+;output_handler =
+
+; Transparent output compression using the zlib library
+; Valid values for this option are 'off', 'on', or a specific buffer size
+; to be used for compression (default is 4KB)
+; Note: Resulting chunk size may vary due to nature of compression. PHP
+;   outputs chunks that are few hundreds bytes each as a result of
+;   compression. If you prefer a larger chunk size for better
+;   performance, enable output_buffering in addition.
+; Note: You need to use zlib.output_handler instead of the standard
+;   output_handler, or otherwise the output will be corrupted.
+; http://php.net/zlib.output-compression
+zlib.output_compression = Off
+
+; http://php.net/zlib.output-compression-level
+;zlib.output_compression_level = -1
+
+; You cannot specify additional output handlers if zlib.output_compression
+; is activated here. This setting does the same as output_handler but in
+; a different order.
+; http://php.net/zlib.output-handler
+;zlib.output_handler =
+
+; Implicit flush tells PHP to tell the output layer to flush itself
+; automatically after every output block.  This is equivalent to calling the
+; PHP function flush() after each and every call to print() or echo() and each
+; and every HTML block.  Turning this option on has serious performance
+; implications and is generally recommended for debugging purposes only.
+; http://php.net/implicit-flush
+; Note: This directive is hardcoded to On for the CLI SAPI
+implicit_flush = Off
+
+; The unserialize callback function will be called (with the undefined class'
+; name as parameter), if the unserializer finds an undefined class
+; which should be instantiated. A warning appears if the specified function is
+; not defined, or if the function doesn't include/implement the missing class.
+; So only set this entry, if you really want to implement such a
+; callback-function.
+unserialize_callback_func =
+
+; When floats & doubles are serialized store serialize_precision significant
+; digits after the floating point. The default value ensures that when floats
+; are decoded with unserialize, the data will remain the same.
+serialize_precision = 17
+
+; open_basedir, if set, limits all file operations to the defined directory
+; and below.  This directive makes most sense if used in a per-directory
+; or per-virtualhost web server configuration file. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/open-basedir
+;open_basedir =
+
+; This directive allows you to disable certain functions for security reasons.
+; It receives a comma-delimited list of function names. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/disable-functions
+disable_functions =
+
+; This directive allows you to disable certain classes for security reasons.
+; It receives a comma-delimited list of class names. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/disable-classes
+disable_classes =
+
+; Colors for Syntax Highlighting mode.  Anything that's acceptable in
+; <span style="color: ???????"> would work.
+; http://php.net/syntax-highlighting
+;highlight.string  = #DD0000
+;highlight.comment = #FF9900
+;highlight.keyword = #007700
+;highlight.default = #0000BB
+;highlight.html    = #000000
+
+; If enabled, the request will be allowed to complete even if the user aborts
+; the request. Consider enabling it if executing long requests, which may end up
+; being interrupted by the user or a browser timing out. PHP's default behavior
+; is to disable this feature.
+; http://php.net/ignore-user-abort
+;ignore_user_abort = On
+
+; Determines the size of the realpath cache to be used by PHP. This value should
+; be increased on systems where PHP opens many files to reflect the quantity of
+; the file operations performed.
+; http://php.net/realpath-cache-size
+;realpath_cache_size = 16k
+
+; Duration of time, in seconds for which to cache realpath information for a given
+; file or directory. For systems with rarely changing files, consider increasing this
+; value.
+; http://php.net/realpath-cache-ttl
+;realpath_cache_ttl = 120
+
+; Enables or disables the circular reference collector.
+; http://php.net/zend.enable-gc
+zend.enable_gc = On
+
+; If enabled, scripts may be written in encodings that are incompatible with
+; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such
+; encodings.  To use this feature, mbstring extension must be enabled.
+; Default: Off
+;zend.multibyte = Off
+
+; Allows to set the default encoding for the scripts.  This value will be used
+; unless "declare(encoding=...)" directive appears at the top of the script.
+; Only affects if zend.multibyte is set.
+; Default: ""
+;zend.script_encoding =
+
+;;;;;;;;;;;;;;;;;
+; Miscellaneous ;
+;;;;;;;;;;;;;;;;;
+
+; Decides whether PHP may expose the fact that it is installed on the server
+; (e.g. by adding its signature to the Web server header).  It is no security
+; threat in any way, but it makes it possible to determine whether you use PHP
+; on your server or not.
+; http://php.net/expose-php
+expose_php = On
+
+;;;;;;;;;;;;;;;;;;;
+; Resource Limits ;
+;;;;;;;;;;;;;;;;;;;
+
+; Maximum execution time of each script, in seconds
+; http://php.net/max-execution-time
+; Note: This directive is hardcoded to 0 for the CLI SAPI
+max_execution_time = 30
+
+; Maximum amount of time each script may spend parsing request data. It's a good
+; idea to limit this time on productions servers in order to eliminate unexpectedly
+; long running scripts.
+; Note: This directive is hardcoded to -1 for the CLI SAPI
+; Default Value: -1 (Unlimited)
+; Development Value: 60 (60 seconds)
+; Production Value: 60 (60 seconds)
+; http://php.net/max-input-time
+max_input_time = 60
+
+; Maximum input variable nesting level
+; http://php.net/max-input-nesting-level
+;max_input_nesting_level = 64
+
+; How many GET/POST/COOKIE input variables may be accepted
+; max_input_vars = 1000
+
+; Maximum amount of memory a script may consume (128MB)
+; http://php.net/memory-limit
+memory_limit = 128M
+
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+; Error handling and logging ;
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+; This directive informs PHP of which errors, warnings and notices you would like
+; it to take action for. The recommended way of setting values for this
+; directive is through the use of the error level constants and bitwise
+; operators. The error level constants are below here for convenience as well as
+; some common settings and their meanings.
+; By default, PHP is set to take action on all errors, notices and warnings EXCEPT
+; those related to E_NOTICE and E_STRICT, which together cover best practices and
+; recommended coding standards in PHP. For performance reasons, this is the
+; recommend error reporting setting. Your production server shouldn't be wasting
+; resources complaining about best practices and coding standards. That's what
+; development servers and development settings are for.
+; Note: The php.ini-development file has this setting as E_ALL. This
+; means it pretty much reports everything which is exactly what you want during
+; development and early testing.
+;
+; Error Level Constants:
+; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)
+; E_ERROR           - fatal run-time errors
+; E_RECOVERABLE_ERROR  - almost fatal run-time errors
+; E_WARNING         - run-time warnings (non-fatal errors)
+; E_PARSE           - compile-time parse errors
+; E_NOTICE          - run-time notices (these are warnings which often result
+;                     from a bug in your code, but it's possible that it was
+;                     intentional (e.g., using an uninitialized variable and
+;                     relying on the fact it's automatically initialized to an
+;                     empty string)
+; E_STRICT          - run-time notices, enable to have PHP suggest changes
+;                     to your code which will ensure the best interoperability
+;                     and forward compatibility of your code
+; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
+; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
+;                     initial startup
+; E_COMPILE_ERROR   - fatal compile-time errors
+; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
+; E_USER_ERROR      - user-generated error message
+; E_USER_WARNING    - user-generated warning message
+; E_USER_NOTICE     - user-generated notice message
+; E_DEPRECATED      - warn about code that will not work in future versions
+;                     of PHP
+; E_USER_DEPRECATED - user-generated deprecation warnings
+;
+; Common Values:
+;   E_ALL (Show all errors, warnings and notices including coding standards.)
+;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)
+;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)
+;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)
+; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
+; Development Value: E_ALL
+; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
+; http://php.net/error-reporting
+error_reporting = E_ALL
+
+; This directive controls whether or not and where PHP will output errors,
+; notices and warnings too. Error output is very useful during development, but
+; it could be very dangerous in production environments. Depending on the code
+; which is triggering the error, sensitive information could potentially leak
+; out of your application such as database usernames and passwords or worse.
+; It's recommended that errors be logged on production servers rather than
+; having the errors sent to STDOUT.
+; Possible Values:
+;   Off = Do not display any errors
+;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
+;   On or stdout = Display errors to STDOUT
+; Default Value: On
+; Development Value: On
+; Production Value: Off
+; http://php.net/display-errors
+display_errors = On
+
+; The display of errors which occur during PHP's startup sequence are handled
+; separately from display_errors. PHP's default behavior is to suppress those
+; errors from clients. Turning the display of startup errors on can be useful in
+; debugging configuration problems. But, it's strongly recommended that you
+; leave this setting off on production servers.
+; Default Value: Off
+; Development Value: On
+; Production Value: Off
+; http://php.net/display-startup-errors
+display_startup_errors = On
+
+; Besides displaying errors, PHP can also log errors to locations such as a
+; server-specific log, STDERR, or a location specified by the error_log
+; directive found below. While errors should not be displayed on productions
+; servers they should still be monitored and logging is a great way to do that.
+; Default Value: Off
+; Development Value: On
+; Production Value: On
+; http://php.net/log-errors
+log_errors = On
+
+; Set maximum length of log_errors. In error_log information about the source is
+; added. The default is 1024 and 0 allows to not apply any maximum length at all.
+; http://php.net/log-errors-max-len
+log_errors_max_len = 1024
+
+; Do not log repeated messages. Repeated errors must occur in same file on same
+; line unless ignore_repeated_source is set true.
+; http://php.net/ignore-repeated-errors
+ignore_repeated_errors = Off
+
+; Ignore source of message when ignoring repeated messages. When this setting
+; is On you will not log errors with repeated messages from different files or
+; source lines.
+; http://php.net/ignore-repeated-source
+ignore_repeated_source = Off
+
+; If this parameter is set to Off, then memory leaks will not be shown (on
+; stdout or in the log). This has only effect in a debug compile, and if
+; error reporting includes E_WARNING in the allowed list
+; http://php.net/report-memleaks
+report_memleaks = On
+
+; This setting is on by default.
+;report_zend_debug = 0
+
+; Store the last error/warning message in $php_errormsg (boolean). Setting this value
+; to On can assist in debugging and is appropriate for development servers. It should
+; however be disabled on production servers.
+; Default Value: Off
+; Development Value: On
+; Production Value: Off
+; http://php.net/track-errors
+track_errors = On
+
+; Turn off normal error reporting and emit XML-RPC error XML
+; http://php.net/xmlrpc-errors
+;xmlrpc_errors = 0
+
+; An XML-RPC faultCode
+;xmlrpc_error_number = 0
+
+; When PHP displays or logs an error, it has the capability of formatting the
+; error message as HTML for easier reading. This directive controls whether
+; the error message is formatted as HTML or not.
+; Note: This directive is hardcoded to Off for the CLI SAPI
+; Default Value: On
+; Development Value: On
+; Production value: On
+; http://php.net/html-errors
+html_errors = On
+
+; If html_errors is set to On *and* docref_root is not empty, then PHP
+; produces clickable error messages that direct to a page describing the error
+; or function causing the error in detail.
+; You can download a copy of the PHP manual from http://php.net/docs
+; and change docref_root to the base URL of your local copy including the
+; leading '/'. You must also specify the file extension being used including
+; the dot. PHP's default behavior is to leave these settings empty, in which
+; case no links to documentation are generated.
+; Note: Never use this feature for production boxes.
+; http://php.net/docref-root
+; Examples
+;docref_root = "/phpmanual/"
+
+; http://php.net/docref-ext
+;docref_ext = .html
+
+; String to output before an error message. PHP's default behavior is to leave
+; this setting blank.
+; http://php.net/error-prepend-string
+; Example:
+;error_prepend_string = "<span style='color: #ff0000'>"
+
+; String to output after an error message. PHP's default behavior is to leave
+; this setting blank.
+; http://php.net/error-append-string
+; Example:
+;error_append_string = "</span>"
+
+; Log errors to specified file. PHP's default behavior is to leave this value
+; empty.
+; http://php.net/error-log
+; Example:
+;error_log = php_errors.log
+; Log errors to syslog (Event Log on Windows).
+;error_log = syslog
+
+;windows.show_crt_warning
+; Default value: 0
+; Development value: 0
+; Production value: 0
+
+;;;;;;;;;;;;;;;;;
+; Data Handling ;
+;;;;;;;;;;;;;;;;;
+
+; The separator used in PHP generated URLs to separate arguments.
+; PHP's default setting is "&".
+; http://php.net/arg-separator.output
+; Example:
+;arg_separator.output = "&amp;"
+
+; List of separator(s) used by PHP to parse input URLs into variables.
+; PHP's default setting is "&".
+; NOTE: Every character in this directive is considered as separator!
+; http://php.net/arg-separator.input
+; Example:
+;arg_separator.input = ";&"
+
+; This directive determines which super global arrays are registered when PHP
+; starts up. G,P,C,E & S are abbreviations for the following respective super
+; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty
+; paid for the registration of these arrays and because ENV is not as commonly
+; used as the others, ENV is not recommended on productions servers. You
+; can still get access to the environment variables through getenv() should you
+; need to.
+; Default Value: "EGPCS"
+; Development Value: "GPCS"
+; Production Value: "GPCS";
+; http://php.net/variables-order
+variables_order = "GPCS"
+
+; This directive determines which super global data (G,P,C,E & S) should
+; be registered into the super global array REQUEST. If so, it also determines
+; the order in which that data is registered. The values for this directive are
+; specified in the same manner as the variables_order directive, EXCEPT one.
+; Leaving this value empty will cause PHP to use the value set in the
+; variables_order directive. It does not mean it will leave the super globals
+; array REQUEST empty.
+; Default Value: None
+; Development Value: "GP"
+; Production Value: "GP"
+; http://php.net/request-order
+request_order = "GP"
+
+; This directive determines whether PHP registers $argv & $argc each time it
+; runs. $argv contains an array of all the arguments passed to PHP when a script
+; is invoked. $argc contains an integer representing the number of arguments
+; that were passed when the script was invoked. These arrays are extremely
+; useful when running scripts from the command line. When this directive is
+; enabled, registering these variables consumes CPU cycles and memory each time
+; a script is executed. For performance reasons, this feature should be disabled
+; on production servers.
+; Note: This directive is hardcoded to On for the CLI SAPI
+; Default Value: On
+; Development Value: Off
+; Production Value: Off
+; http://php.net/register-argc-argv
+register_argc_argv = Off
+
+; When enabled, the ENV, REQUEST and SERVER variables are created when they're
+; first used (Just In Time) instead of when the script starts. If these
+; variables are not used within a script, having this directive on will result
+; in a performance gain. The PHP directive register_argc_argv must be disabled
+; for this directive to have any affect.
+; http://php.net/auto-globals-jit
+auto_globals_jit = On
+
+; Whether PHP will read the POST data.
+; This option is enabled by default.
+; Most likely, you won't want to disable this option globally. It causes $_POST
+; and $_FILES to always be empty; the only way you will be able to read the
+; POST data will be through the php://input stream wrapper. This can be useful
+; to proxy requests or to process the POST data in a memory efficient fashion.
+; http://php.net/enable-post-data-reading
+;enable_post_data_reading = Off
+
+; Maximum size of POST data that PHP will accept.
+; Its value may be 0 to disable the limit. It is ignored if POST data reading
+; is disabled through enable_post_data_reading.
+; http://php.net/post-max-size
+post_max_size = 8M
+
+; Automatically add files before PHP document.
+; http://php.net/auto-prepend-file
+auto_prepend_file =
+
+; Automatically add files after PHP document.
+; http://php.net/auto-append-file
+auto_append_file =
+
+; By default, PHP will output a character encoding using
+; the Content-type: header.  To disable sending of the charset, simply
+; set it to be empty.
+;
+; PHP's built-in default is text/html
+; http://php.net/default-mimetype
+default_mimetype = "text/html"
+
+; PHP's default character set is set to empty.
+; http://php.net/default-charset
+;default_charset = "UTF-8"
+
+; Always populate the $HTTP_RAW_POST_DATA variable. PHP's default behavior is
+; to disable this feature. If post reading is disabled through
+; enable_post_data_reading, $HTTP_RAW_POST_DATA is *NOT* populated.
+; http://php.net/always-populate-raw-post-data
+;always_populate_raw_post_data = On
+
+;;;;;;;;;;;;;;;;;;;;;;;;;
+; Paths and Directories ;
+;;;;;;;;;;;;;;;;;;;;;;;;;
+
+; UNIX: "/path1:/path2"
+;include_path = ".:/php/includes"
+;
+; Windows: "\path1;\path2"
+;include_path = ".;c:\php\includes"
+;
+; PHP's default setting for include_path is ".;/path/to/php/pear"
+; http://php.net/include-path
+
+; The root of the PHP pages, used only if nonempty.
+; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root
+; if you are running php as a CGI under any web server (other than IIS)
+; see documentation for security issues.  The alternate is to use the
+; cgi.force_redirect configuration below
+; http://php.net/doc-root
+doc_root =
+
+; The directory under which PHP opens the script using /~username used only
+; if nonempty.
+; http://php.net/user-dir
+user_dir =
+
+; Directory in which the loadable extensions (modules) reside.
+; http://php.net/extension-dir
+; extension_dir = "./"
+; On windows:
+; extension_dir = "ext"
+
+; Whether or not to enable the dl() function.  The dl() function does NOT work
+; properly in multithreaded servers, such as IIS or Zeus, and is automatically
+; disabled on them.
+; http://php.net/enable-dl
+enable_dl = Off
+
+; cgi.force_redirect is necessary to provide security running PHP as a CGI under
+; most web servers.  Left undefined, PHP turns this on by default.  You can
+; turn it off here AT YOUR OWN RISK
+; **You CAN safely turn this off for IIS, in fact, you MUST.**
+; http://php.net/cgi.force-redirect
+;cgi.force_redirect = 1
+
+; if cgi.nph is enabled it will force cgi to always sent Status: 200 with
+; every request. PHP's default behavior is to disable this feature.
+;cgi.nph = 1
+
+; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape
+; (iPlanet) web servers, you MAY need to set an environment variable name that PHP
+; will look for to know it is OK to continue execution.  Setting this variable MAY
+; cause security issues, KNOW WHAT YOU ARE DOING FIRST.
+; http://php.net/cgi.redirect-status-env
+;cgi.redirect_status_env = 
+
+; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's
+; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
+; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting
+; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting
+; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts
+; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
+; http://php.net/cgi.fix-pathinfo
+;cgi.fix_pathinfo=1
+
+; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate
+; security tokens of the calling client.  This allows IIS to define the
+; security context that the request runs under.  mod_fastcgi under Apache
+; does not currently support this feature (03/17/2002)
+; Set to 1 if running under IIS.  Default is zero.
+; http://php.net/fastcgi.impersonate
+;fastcgi.impersonate = 1
+
+; Disable logging through FastCGI connection. PHP's default behavior is to enable
+; this feature.
+;fastcgi.logging = 0
+
+; cgi.rfc2616_headers configuration option tells PHP what type of headers to
+; use when sending HTTP response code. If it's set 0 PHP sends Status: header that
+; is supported by Apache. When this option is set to 1 PHP will send
+; RFC2616 compliant header.
+; Default is zero.
+; http://php.net/cgi.rfc2616-headers
+;cgi.rfc2616_headers = 0
+
+;;;;;;;;;;;;;;;;
+; File Uploads ;
+;;;;;;;;;;;;;;;;
+
+; Whether to allow HTTP file uploads.
+; http://php.net/file-uploads
+file_uploads = On
+
+; Temporary directory for HTTP uploaded files (will use system default if not
+; specified).
+; http://php.net/upload-tmp-dir
+;upload_tmp_dir =
+
+; Maximum allowed size for uploaded files.
+; http://php.net/upload-max-filesize
+upload_max_filesize = 2M
+
+; Maximum number of files that can be uploaded via a single request
+max_file_uploads = 20
+
+;;;;;;;;;;;;;;;;;;
+; Fopen wrappers ;
+;;;;;;;;;;;;;;;;;;
+
+; Whether to allow the treatment of URLs (like http:// or ftp://) as files.
+; http://php.net/allow-url-fopen
+allow_url_fopen = On
+
+; Whether to allow include/require to open URLs (like http:// or ftp://) as files.
+; http://php.net/allow-url-include
+allow_url_include = Off
+
+; Define the anonymous ftp password (your email address). PHP's default setting
+; for this is empty.
+; http://php.net/from
+;from="john@doe.com"
+
+; Define the User-Agent string. PHP's default setting for this is empty.
+; http://php.net/user-agent
+;user_agent="PHP"
+
+; Default timeout for socket based streams (seconds)
+; http://php.net/default-socket-timeout
+default_socket_timeout = 60
+
+; If your scripts have to deal with files from Macintosh systems,
+; or you are running on a Mac and need to deal with files from
+; unix or win32 systems, setting this flag will cause PHP to
+; automatically detect the EOL character in those files so that
+; fgets() and file() will work regardless of the source of the file.
+; http://php.net/auto-detect-line-endings
+;auto_detect_line_endings = Off
+
+;;;;;;;;;;;;;;;;;;;;;;
+; Dynamic Extensions ;
+;;;;;;;;;;;;;;;;;;;;;;
+
+; If you wish to have an extension loaded automatically, use the following
+; syntax:
+;
+;   extension=modulename.extension
+;
+; For example, on Windows:
+;
+;   extension=msql.dll
+;
+; ... or under UNIX:
+;
+;   extension=msql.so
+;
+; ... or with a path:
+;
+;   extension=/path/to/extension/msql.so
+;
+; If you only provide the name of the extension, PHP will look for it in its
+; default extension directory.
+;
+; Windows Extensions
+; Note that ODBC support is built in, so no dll is needed for it.
+; Note that many DLL files are located in the extensions/ (PHP 4) ext/ (PHP 5)
+; extension folders as well as the separate PECL DLL download (PHP 5).
+; Be sure to appropriately set the extension_dir directive.
+;
+;extension=php_bz2.dll
+;extension=php_curl.dll
+;extension=php_fileinfo.dll
+;extension=php_gd2.dll
+;extension=php_gettext.dll
+;extension=php_gmp.dll
+;extension=php_intl.dll
+;extension=php_imap.dll
+;extension=php_interbase.dll
+;extension=php_ldap.dll
+;extension=php_mbstring.dll
+;extension=php_exif.dll      ; Must be after mbstring as it depends on it
+;extension=php_mysql.dll
+;extension=php_mysqli.dll
+;extension=php_oci8.dll      ; Use with Oracle 10gR2 Instant Client
+;extension=php_oci8_11g.dll  ; Use with Oracle 11gR2 Instant Client
+;extension=php_openssl.dll
+;extension=php_pdo_firebird.dll
+;extension=php_pdo_mysql.dll
+;extension=php_pdo_oci.dll
+;extension=php_pdo_odbc.dll
+;extension=php_pdo_pgsql.dll
+;extension=php_pdo_sqlite.dll
+;extension=php_pgsql.dll
+;extension=php_pspell.dll
+;extension=php_shmop.dll
+
+; The MIBS data available in the PHP distribution must be installed. 
+; See http://www.php.net/manual/en/snmp.installation.php 
+;extension=php_snmp.dll
+
+;extension=php_soap.dll
+;extension=php_sockets.dll
+;extension=php_sqlite3.dll
+;extension=php_sybase_ct.dll
+;extension=php_tidy.dll
+;extension=php_xmlrpc.dll
+;extension=php_xsl.dll
+
+;;;;;;;;;;;;;;;;;;;
+; Module Settings ;
+;;;;;;;;;;;;;;;;;;;
+
+[CLI Server]
+; Whether the CLI web server uses ANSI color coding in its terminal output.
+cli_server.color = On
+
+[Date]
+; Defines the default timezone used by the date functions
+; http://php.net/date.timezone
+;date.timezone =
+
+; http://php.net/date.default-latitude
+;date.default_latitude = 31.7667
+
+; http://php.net/date.default-longitude
+;date.default_longitude = 35.2333
+
+; http://php.net/date.sunrise-zenith
+;date.sunrise_zenith = 90.583333
+
+; http://php.net/date.sunset-zenith
+;date.sunset_zenith = 90.583333
+
+[filter]
+; http://php.net/filter.default
+;filter.default = unsafe_raw
+
+; http://php.net/filter.default-flags
+;filter.default_flags =
+
+[iconv]
+;iconv.input_encoding = ISO-8859-1
+;iconv.internal_encoding = ISO-8859-1
+;iconv.output_encoding = ISO-8859-1
+
+[intl]
+;intl.default_locale =
+; This directive allows you to produce PHP errors when some error
+; happens within intl functions. The value is the level of the error produced.
+; Default is 0, which does not produce any errors.
+;intl.error_level = E_WARNING
+
+[sqlite]
+; http://php.net/sqlite.assoc-case
+;sqlite.assoc_case = 0
+
+[sqlite3]
+;sqlite3.extension_dir =
+
+[Pcre]
+;PCRE library backtracking limit.
+; http://php.net/pcre.backtrack-limit
+;pcre.backtrack_limit=100000
+
+;PCRE library recursion limit.
+;Please note that if you set this value to a high number you may consume all
+;the available process stack and eventually crash PHP (due to reaching the
+;stack size limit imposed by the Operating System).
+; http://php.net/pcre.recursion-limit
+;pcre.recursion_limit=100000
+
+[Pdo]
+; Whether to pool ODBC connections. Can be one of "strict", "relaxed" or "off"
+; http://php.net/pdo-odbc.connection-pooling
+;pdo_odbc.connection_pooling=strict
+
+;pdo_odbc.db2_instance_name
+
+[Pdo_mysql]
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/pdo_mysql.cache_size
+pdo_mysql.cache_size = 2000
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/pdo_mysql.default-socket
+pdo_mysql.default_socket=
+
+[Phar]
+; http://php.net/phar.readonly
+;phar.readonly = On
+
+; http://php.net/phar.require-hash
+;phar.require_hash = On
+
+;phar.cache_list =
+
+[mail function]
+; For Win32 only.
+; http://php.net/smtp
+SMTP = localhost
+; http://php.net/smtp-port
+smtp_port = 25
+
+; For Win32 only.
+; http://php.net/sendmail-from
+;sendmail_from = me@example.com
+
+; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
+; http://php.net/sendmail-path
+;sendmail_path =
+
+; Force the addition of the specified parameters to be passed as extra parameters
+; to the sendmail binary. These parameters will always replace the value of
+; the 5th parameter to mail(), even in safe mode.
+;mail.force_extra_parameters =
+
+; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename
+mail.add_x_header = On
+
+; The path to a log file that will log all mail() calls. Log entries include
+; the full path of the script, line number, To address and headers.
+;mail.log =
+; Log mail to syslog (Event Log on Windows).
+;mail.log = syslog
+
+[SQL]
+; http://php.net/sql.safe-mode
+sql.safe_mode = Off
+
+[ODBC]
+; http://php.net/odbc.default-db
+;odbc.default_db    =  Not yet implemented
+
+; http://php.net/odbc.default-user
+;odbc.default_user  =  Not yet implemented
+
+; http://php.net/odbc.default-pw
+;odbc.default_pw    =  Not yet implemented
+
+; Controls the ODBC cursor model.
+; Default: SQL_CURSOR_STATIC (default).
+;odbc.default_cursortype
+
+; Allow or prevent persistent links.
+; http://php.net/odbc.allow-persistent
+odbc.allow_persistent = On
+
+; Check that a connection is still valid before reuse.
+; http://php.net/odbc.check-persistent
+odbc.check_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/odbc.max-persistent
+odbc.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/odbc.max-links
+odbc.max_links = -1
+
+; Handling of LONG fields.  Returns number of bytes to variables.  0 means
+; passthru.
+; http://php.net/odbc.defaultlrl
+odbc.defaultlrl = 4096
+
+; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.
+; See the documentation on odbc_binmode and odbc_longreadlen for an explanation
+; of odbc.defaultlrl and odbc.defaultbinmode
+; http://php.net/odbc.defaultbinmode
+odbc.defaultbinmode = 1
+
+;birdstep.max_links = -1
+
+[Interbase]
+; Allow or prevent persistent links.
+ibase.allow_persistent = 1
+
+; Maximum number of persistent links.  -1 means no limit.
+ibase.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+ibase.max_links = -1
+
+; Default database name for ibase_connect().
+;ibase.default_db =
+
+; Default username for ibase_connect().
+;ibase.default_user =
+
+; Default password for ibase_connect().
+;ibase.default_password =
+
+; Default charset for ibase_connect().
+;ibase.default_charset =
+
+; Default timestamp format.
+ibase.timestampformat = "%Y-%m-%d %H:%M:%S"
+
+; Default date format.
+ibase.dateformat = "%Y-%m-%d"
+
+; Default time format.
+ibase.timeformat = "%H:%M:%S"
+
+[MySQL]
+; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
+; http://php.net/mysql.allow_local_infile
+mysql.allow_local_infile = On
+
+; Allow or prevent persistent links.
+; http://php.net/mysql.allow-persistent
+mysql.allow_persistent = On
+
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/mysql.cache_size
+mysql.cache_size = 2000
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/mysql.max-persistent
+mysql.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/mysql.max-links
+mysql.max_links = -1
+
+; Default port number for mysql_connect().  If unset, mysql_connect() will use
+; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
+; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
+; at MYSQL_PORT.
+; http://php.net/mysql.default-port
+mysql.default_port =
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/mysql.default-socket
+mysql.default_socket =
+
+; Default host for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysql.default-host
+mysql.default_host =
+
+; Default user for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysql.default-user
+mysql.default_user =
+
+; Default password for mysql_connect() (doesn't apply in safe mode).
+; Note that this is generally a *bad* idea to store passwords in this file.
+; *Any* user with PHP access can run 'echo get_cfg_var("mysql.default_password")
+; and reveal this password!  And of course, any users with read access to this
+; file will be able to reveal the password as well.
+; http://php.net/mysql.default-password
+mysql.default_password =
+
+; Maximum time (in seconds) for connect timeout. -1 means no limit
+; http://php.net/mysql.connect-timeout
+mysql.connect_timeout = 60
+
+; Trace mode. When trace_mode is active (=On), warnings for table/index scans and
+; SQL-Errors will be displayed.
+; http://php.net/mysql.trace-mode
+mysql.trace_mode = Off
+
+[MySQLi]
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/mysqli.max-persistent
+mysqli.max_persistent = -1
+
+; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
+; http://php.net/mysqli.allow_local_infile
+;mysqli.allow_local_infile = On
+
+; Allow or prevent persistent links.
+; http://php.net/mysqli.allow-persistent
+mysqli.allow_persistent = On
+
+; Maximum number of links.  -1 means no limit.
+; http://php.net/mysqli.max-links
+mysqli.max_links = -1
+
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/mysqli.cache_size
+mysqli.cache_size = 2000
+
+; Default port number for mysqli_connect().  If unset, mysqli_connect() will use
+; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
+; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
+; at MYSQL_PORT.
+; http://php.net/mysqli.default-port
+mysqli.default_port = 3306
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/mysqli.default-socket
+mysqli.default_socket =
+
+; Default host for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysqli.default-host
+mysqli.default_host =
+
+; Default user for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysqli.default-user
+mysqli.default_user =
+
+; Default password for mysqli_connect() (doesn't apply in safe mode).
+; Note that this is generally a *bad* idea to store passwords in this file.
+; *Any* user with PHP access can run 'echo get_cfg_var("mysqli.default_pw")
+; and reveal this password!  And of course, any users with read access to this
+; file will be able to reveal the password as well.
+; http://php.net/mysqli.default-pw
+mysqli.default_pw =
+
+; Allow or prevent reconnect
+mysqli.reconnect = Off
+
+[mysqlnd]
+; Enable / Disable collection of general statistics by mysqlnd which can be
+; used to tune and monitor MySQL operations.
+; http://php.net/mysqlnd.collect_statistics
+mysqlnd.collect_statistics = On
+
+; Enable / Disable collection of memory usage statistics by mysqlnd which can be
+; used to tune and monitor MySQL operations.
+; http://php.net/mysqlnd.collect_memory_statistics
+mysqlnd.collect_memory_statistics = On
+
+; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.
+; http://php.net/mysqlnd.net_cmd_buffer_size
+;mysqlnd.net_cmd_buffer_size = 2048
+
+; Size of a pre-allocated buffer used for reading data sent by the server in
+; bytes.
+; http://php.net/mysqlnd.net_read_buffer_size
+;mysqlnd.net_read_buffer_size = 32768
+
+[OCI8]
+
+; Connection: Enables privileged connections using external
+; credentials (OCI_SYSOPER, OCI_SYSDBA)
+; http://php.net/oci8.privileged-connect
+;oci8.privileged_connect = Off
+
+; Connection: The maximum number of persistent OCI8 connections per
+; process. Using -1 means no limit.
+; http://php.net/oci8.max-persistent
+;oci8.max_persistent = -1
+
+; Connection: The maximum number of seconds a process is allowed to
+; maintain an idle persistent connection. Using -1 means idle
+; persistent connections will be maintained forever.
+; http://php.net/oci8.persistent-timeout
+;oci8.persistent_timeout = -1
+
+; Connection: The number of seconds that must pass before issuing a
+; ping during oci_pconnect() to check the connection validity. When
+; set to 0, each oci_pconnect() will cause a ping. Using -1 disables
+; pings completely.
+; http://php.net/oci8.ping-interval
+;oci8.ping_interval = 60
+
+; Connection: Set this to a user chosen connection class to be used
+; for all pooled server requests with Oracle 11g Database Resident
+; Connection Pooling (DRCP).  To use DRCP, this value should be set to
+; the same string for all web servers running the same application,
+; the database pool must be configured, and the connection string must
+; specify to use a pooled server.
+;oci8.connection_class =
+
+; High Availability: Using On lets PHP receive Fast Application
+; Notification (FAN) events generated when a database node fails. The
+; database must also be configured to post FAN events.
+;oci8.events = Off
+
+; Tuning: This option enables statement caching, and specifies how
+; many statements to cache. Using 0 disables statement caching.
+; http://php.net/oci8.statement-cache-size
+;oci8.statement_cache_size = 20
+
+; Tuning: Enables statement prefetching and sets the default number of
+; rows that will be fetched automatically after statement execution.
+; http://php.net/oci8.default-prefetch
+;oci8.default_prefetch = 100
+
+; Compatibility. Using On means oci_close() will not close
+; oci_connect() and oci_new_connect() connections.
+; http://php.net/oci8.old-oci-close-semantics
+;oci8.old_oci_close_semantics = Off
+
+[PostgreSQL]
+; Allow or prevent persistent links.
+; http://php.net/pgsql.allow-persistent
+pgsql.allow_persistent = On
+
+; Detect broken persistent links always with pg_pconnect().
+; Auto reset feature requires a little overheads.
+; http://php.net/pgsql.auto-reset-persistent
+pgsql.auto_reset_persistent = Off
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/pgsql.max-persistent
+pgsql.max_persistent = -1
+
+; Maximum number of links (persistent+non persistent).  -1 means no limit.
+; http://php.net/pgsql.max-links
+pgsql.max_links = -1
+
+; Ignore PostgreSQL backends Notice message or not.
+; Notice message logging require a little overheads.
+; http://php.net/pgsql.ignore-notice
+pgsql.ignore_notice = 0
+
+; Log PostgreSQL backends Notice message or not.
+; Unless pgsql.ignore_notice=0, module cannot log notice message.
+; http://php.net/pgsql.log-notice
+pgsql.log_notice = 0
+
+[Sybase-CT]
+; Allow or prevent persistent links.
+; http://php.net/sybct.allow-persistent
+sybct.allow_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/sybct.max-persistent
+sybct.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/sybct.max-links
+sybct.max_links = -1
+
+; Minimum server message severity to display.
+; http://php.net/sybct.min-server-severity
+sybct.min_server_severity = 10
+
+; Minimum client message severity to display.
+; http://php.net/sybct.min-client-severity
+sybct.min_client_severity = 10
+
+; Set per-context timeout
+; http://php.net/sybct.timeout
+;sybct.timeout=
+
+;sybct.packet_size
+
+; The maximum time in seconds to wait for a connection attempt to succeed before returning failure.
+; Default: one minute
+;sybct.login_timeout=
+
+; The name of the host you claim to be connecting from, for display by sp_who.
+; Default: none
+;sybct.hostname=
+
+; Allows you to define how often deadlocks are to be retried. -1 means "forever".
+; Default: 0
+;sybct.deadlock_retry_count=
+
+[bcmath]
+; Number of decimal digits for all bcmath functions.
+; http://php.net/bcmath.scale
+bcmath.scale = 0
+
+[browscap]
+; http://php.net/browscap
+;browscap = extra/browscap.ini
+
+[Session]
+; Handler used to store/retrieve data.
+; http://php.net/session.save-handler
+session.save_handler = files
+
+; Argument passed to save_handler.  In the case of files, this is the path
+; where data files are stored. Note: Windows users have to change this
+; variable in order to use PHP's session functions.
+;
+; The path can be defined as:
+;
+;     session.save_path = "N;/path"
+;
+; where N is an integer.  Instead of storing all the session files in
+; /path, what this will do is use subdirectories N-levels deep, and
+; store the session data in those directories.  This is useful if you
+; or your OS have problems with lots of files in one directory, and is
+; a more efficient layout for servers that handle lots of sessions.
+;
+; NOTE 1: PHP will not create this directory structure automatically.
+;         You can use the script in the ext/session dir for that purpose.
+; NOTE 2: See the section on garbage collection below if you choose to
+;         use subdirectories for session storage
+;
+; The file storage module creates files using mode 600 by default.
+; You can change that by using
+;
+;     session.save_path = "N;MODE;/path"
+;
+; where MODE is the octal representation of the mode. Note that this
+; does not overwrite the process's umask.
+; http://php.net/session.save-path
+;session.save_path = "/tmp"
+
+; Whether to use cookies.
+; http://php.net/session.use-cookies
+session.use_cookies = 1
+
+; http://php.net/session.cookie-secure
+;session.cookie_secure =
+
+; This option forces PHP to fetch and use a cookie for storing and maintaining
+; the session id. We encourage this operation as it's very helpful in combating
+; session hijacking when not specifying and managing your own session id. It is
+; not the end all be all of session hijacking defense, but it's a good start.
+; http://php.net/session.use-only-cookies
+session.use_only_cookies = 1
+
+; Name of the session (used as cookie name).
+; http://php.net/session.name
+session.name = PHPSESSID
+
+; Initialize session on request startup.
+; http://php.net/session.auto-start
+session.auto_start = 0
+
+; Lifetime in seconds of cookie or, if 0, until browser is restarted.
+; http://php.net/session.cookie-lifetime
+session.cookie_lifetime = 0
+
+; The path for which the cookie is valid.
+; http://php.net/session.cookie-path
+session.cookie_path = /
+
+; The domain for which the cookie is valid.
+; http://php.net/session.cookie-domain
+session.cookie_domain =
+
+; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.
+; http://php.net/session.cookie-httponly
+session.cookie_httponly =
+
+; Handler used to serialize data.  php is the standard serializer of PHP.
+; http://php.net/session.serialize-handler
+session.serialize_handler = php
+
+; Defines the probability that the 'garbage collection' process is started
+; on every session initialization. The probability is calculated by using
+; gc_probability/gc_divisor. Where session.gc_probability is the numerator
+; and gc_divisor is the denominator in the equation. Setting this value to 1
+; when the session.gc_divisor value is 100 will give you approximately a 1% chance
+; the gc will run on any give request.
+; Default Value: 1
+; Development Value: 1
+; Production Value: 1
+; http://php.net/session.gc-probability
+session.gc_probability = 1
+
+; Defines the probability that the 'garbage collection' process is started on every
+; session initialization. The probability is calculated by using the following equation:
+; gc_probability/gc_divisor. Where session.gc_probability is the numerator and
+; session.gc_divisor is the denominator in the equation. Setting this value to 1
+; when the session.gc_divisor value is 100 will give you approximately a 1% chance
+; the gc will run on any give request. Increasing this value to 1000 will give you
+; a 0.1% chance the gc will run on any give request. For high volume production servers,
+; this is a more efficient approach.
+; Default Value: 100
+; Development Value: 1000
+; Production Value: 1000
+; http://php.net/session.gc-divisor
+session.gc_divisor = 1000
+
+; After this number of seconds, stored data will be seen as 'garbage' and
+; cleaned up by the garbage collection process.
+; http://php.net/session.gc-maxlifetime
+session.gc_maxlifetime = 1440
+
+; NOTE: If you are using the subdirectory option for storing session files
+;       (see session.save_path above), then garbage collection does *not*
+;       happen automatically.  You will need to do your own garbage
+;       collection through a shell script, cron entry, or some other method.
+;       For example, the following script would is the equivalent of
+;       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
+;          find /path/to/sessions -cmin +24 -type f | xargs rm
+
+; Check HTTP Referer to invalidate externally stored URLs containing ids.
+; HTTP_REFERER has to contain this substring for the session to be
+; considered as valid.
+; http://php.net/session.referer-check
+session.referer_check =
+
+; How many bytes to read from the file.
+; http://php.net/session.entropy-length
+;session.entropy_length = 32
+
+; Specified here to create the session id.
+; http://php.net/session.entropy-file
+; Defaults to /dev/urandom
+; On systems that don't have /dev/urandom but do have /dev/arandom, this will default to /dev/arandom
+; If neither are found at compile time, the default is no entropy file.
+; On windows, setting the entropy_length setting will activate the
+; Windows random source (using the CryptoAPI)
+;session.entropy_file = /dev/urandom
+
+; Set to {nocache,private,public,} to determine HTTP caching aspects
+; or leave this empty to avoid sending anti-caching headers.
+; http://php.net/session.cache-limiter
+session.cache_limiter = nocache
+
+; Document expires after n minutes.
+; http://php.net/session.cache-expire
+session.cache_expire = 180
+
+; trans sid support is disabled by default.
+; Use of trans sid may risk your users security.
+; Use this option with caution.
+; - User may send URL contains active session ID
+;   to other person via. email/irc/etc.
+; - URL that contains active session ID may be stored
+;   in publicly accessible computer.
+; - User may access your site with the same session ID
+;   always using URL stored in browser's history or bookmarks.
+; http://php.net/session.use-trans-sid
+session.use_trans_sid = 0
+
+; Select a hash function for use in generating session ids.
+; Possible Values
+;   0  (MD5 128 bits)
+;   1  (SHA-1 160 bits)
+; This option may also be set to the name of any hash function supported by
+; the hash extension. A list of available hashes is returned by the hash_algos()
+; function.
+; http://php.net/session.hash-function
+session.hash_function = 0
+
+; Define how many bits are stored in each character when converting
+; the binary hash data to something readable.
+; Possible values:
+;   4  (4 bits: 0-9, a-f)
+;   5  (5 bits: 0-9, a-v)
+;   6  (6 bits: 0-9, a-z, A-Z, "-", ",")
+; Default Value: 4
+; Development Value: 5
+; Production Value: 5
+; http://php.net/session.hash-bits-per-character
+session.hash_bits_per_character = 5
+
+; The URL rewriter will look for URLs in a defined set of HTML tags.
+; form/fieldset are special; if you include them here, the rewriter will
+; add a hidden <input> field with the info which is otherwise appended
+; to URLs.  If you want XHTML conformity, remove the form entry.
+; Note that all valid entries require a "=", even if no value follows.
+; Default Value: "a=href,area=href,frame=src,form=,fieldset="
+; Development Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+; Production Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+; http://php.net/url-rewriter.tags
+url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=fakeentry"
+
+; Enable upload progress tracking in $_SESSION
+; Default Value: On
+; Development Value: On
+; Production Value: On
+; http://php.net/session.upload-progress.enabled
+;session.upload_progress.enabled = On
+
+; Cleanup the progress information as soon as all POST data has been read
+; (i.e. upload completed).
+; Default Value: On
+; Development Value: On
+; Production Value: On
+; http://php.net/session.upload-progress.cleanup
+;session.upload_progress.cleanup = On
+
+; A prefix used for the upload progress key in $_SESSION
+; Default Value: "upload_progress_"
+; Development Value: "upload_progress_"
+; Production Value: "upload_progress_"
+; http://php.net/session.upload-progress.prefix
+;session.upload_progress.prefix = "upload_progress_"
+
+; The index name (concatenated with the prefix) in $_SESSION
+; containing the upload progress information
+; Default Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; Development Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; Production Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; http://php.net/session.upload-progress.name
+;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"
+
+; How frequently the upload progress should be updated.
+; Given either in percentages (per-file), or in bytes
+; Default Value: "1%"
+; Development Value: "1%"
+; Production Value: "1%"
+; http://php.net/session.upload-progress.freq
+;session.upload_progress.freq =  "1%"
+
+; The minimum delay between updates, in seconds
+; Default Value: 1
+; Development Value: 1
+; Production Value: 1
+; http://php.net/session.upload-progress.min-freq
+;session.upload_progress.min_freq = "1"
+
+[MSSQL]
+; Allow or prevent persistent links.
+mssql.allow_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+mssql.max_persistent = -1
+
+; Maximum number of links (persistent+non persistent).  -1 means no limit.
+mssql.max_links = -1
+
+; Minimum error severity to display.
+mssql.min_error_severity = 10
+
+; Minimum message severity to display.
+mssql.min_message_severity = 10
+
+; Compatibility mode with old versions of PHP 3.0.
+mssql.compatability_mode = Off
+
+; Connect timeout
+;mssql.connect_timeout = 5
+
+; Query timeout
+;mssql.timeout = 60
+
+; Valid range 0 - 2147483647.  Default = 4096.
+;mssql.textlimit = 4096
+
+; Valid range 0 - 2147483647.  Default = 4096.
+;mssql.textsize = 4096
+
+; Limits the number of records in each batch.  0 = all records in one batch.
+;mssql.batchsize = 0
+
+; Specify how datetime and datetim4 columns are returned
+; On => Returns data converted to SQL server settings
+; Off => Returns values as YYYY-MM-DD hh:mm:ss
+;mssql.datetimeconvert = On
+
+; Use NT authentication when connecting to the server
+mssql.secure_connection = Off
+
+; Specify max number of processes. -1 = library default
+; msdlib defaults to 25
+; FreeTDS defaults to 4096
+;mssql.max_procs = -1
+
+; Specify client character set.
+; If empty or not set the client charset from freetds.conf is used
+; This is only used when compiled with FreeTDS
+;mssql.charset = "ISO-8859-1"
+
+[Assertion]
+; Assert(expr); active by default.
+; http://php.net/assert.active
+;assert.active = On
+
+; Issue a PHP warning for each failed assertion.
+; http://php.net/assert.warning
+;assert.warning = On
+
+; Don't bail out by default.
+; http://php.net/assert.bail
+;assert.bail = Off
+
+; User-function to be called if an assertion fails.
+; http://php.net/assert.callback
+;assert.callback = 0
+
+; Eval the expression with current error_reporting().  Set to true if you want
+; error_reporting(0) around the eval().
+; http://php.net/assert.quiet-eval
+;assert.quiet_eval = 0
+
+[COM]
+; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs
+; http://php.net/com.typelib-file
+;com.typelib_file =
+
+; allow Distributed-COM calls
+; http://php.net/com.allow-dcom
+;com.allow_dcom = true
+
+; autoregister constants of a components typlib on com_load()
+; http://php.net/com.autoregister-typelib
+;com.autoregister_typelib = true
+
+; register constants casesensitive
+; http://php.net/com.autoregister-casesensitive
+;com.autoregister_casesensitive = false
+
+; show warnings on duplicate constant registrations
+; http://php.net/com.autoregister-verbose
+;com.autoregister_verbose = true
+
+; The default character set code-page to use when passing strings to and from COM objects.
+; Default: system ANSI code page
+;com.code_page=
+
+[mbstring]
+; language for internal character representation.
+; http://php.net/mbstring.language
+;mbstring.language = Japanese
+
+; internal/script encoding.
+; Some encoding cannot work as internal encoding.
+; (e.g. SJIS, BIG5, ISO-2022-*)
+; http://php.net/mbstring.internal-encoding
+;mbstring.internal_encoding = EUC-JP
+
+; http input encoding.
+; http://php.net/mbstring.http-input
+;mbstring.http_input = auto
+
+; http output encoding. mb_output_handler must be
+; registered as output buffer to function
+; http://php.net/mbstring.http-output
+;mbstring.http_output = SJIS
+
+; enable automatic encoding translation according to
+; mbstring.internal_encoding setting. Input chars are
+; converted to internal encoding by setting this to On.
+; Note: Do _not_ use automatic encoding translation for
+;       portable libs/applications.
+; http://php.net/mbstring.encoding-translation
+;mbstring.encoding_translation = Off
+
+; automatic encoding detection order.
+; auto means
+; http://php.net/mbstring.detect-order
+;mbstring.detect_order = auto
+
+; substitute_character used when character cannot be converted
+; one from another
+; http://php.net/mbstring.substitute-character
+;mbstring.substitute_character = none;
+
+; overload(replace) single byte functions by mbstring functions.
+; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),
+; etc. Possible values are 0,1,2,4 or combination of them.
+; For example, 7 for overload everything.
+; 0: No overload
+; 1: Overload mail() function
+; 2: Overload str*() functions
+; 4: Overload ereg*() functions
+; http://php.net/mbstring.func-overload
+;mbstring.func_overload = 0
+
+; enable strict encoding detection.
+;mbstring.strict_detection = Off
+
+; This directive specifies the regex pattern of content types for which mb_output_handler()
+; is activated.
+; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml)
+;mbstring.http_output_conv_mimetype=
+
+[gd]
+; Tell the jpeg decode to ignore warnings and try to create
+; a gd image. The warning will then be displayed as notices
+; disabled by default
+; http://php.net/gd.jpeg-ignore-warning
+;gd.jpeg_ignore_warning = 0
+
+[exif]
+; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.
+; With mbstring support this will automatically be converted into the encoding
+; given by corresponding encode setting. When empty mbstring.internal_encoding
+; is used. For the decode settings you can distinguish between motorola and
+; intel byte order. A decode setting cannot be empty.
+; http://php.net/exif.encode-unicode
+;exif.encode_unicode = ISO-8859-15
+
+; http://php.net/exif.decode-unicode-motorola
+;exif.decode_unicode_motorola = UCS-2BE
+
+; http://php.net/exif.decode-unicode-intel
+;exif.decode_unicode_intel    = UCS-2LE
+
+; http://php.net/exif.encode-jis
+;exif.encode_jis =
+
+; http://php.net/exif.decode-jis-motorola
+;exif.decode_jis_motorola = JIS
+
+; http://php.net/exif.decode-jis-intel
+;exif.decode_jis_intel    = JIS
+
+[Tidy]
+; The path to a default tidy configuration file to use when using tidy
+; http://php.net/tidy.default-config
+;tidy.default_config = /usr/local/lib/php/default.tcfg
+
+; Should tidy clean and repair output automatically?
+; WARNING: Do not use this option if you are generating non-html content
+; such as dynamic images
+; http://php.net/tidy.clean-output
+tidy.clean_output = Off
+
+[soap]
+; Enables or disables WSDL caching feature.
+; http://php.net/soap.wsdl-cache-enabled
+soap.wsdl_cache_enabled=1
+
+; Sets the directory name where SOAP extension will put cache files.
+; http://php.net/soap.wsdl-cache-dir
+soap.wsdl_cache_dir="/tmp"
+
+; (time to live) Sets the number of second while cached file will be used
+; instead of original one.
+; http://php.net/soap.wsdl-cache-ttl
+soap.wsdl_cache_ttl=86400
+
+; Sets the size of the cache limit. (Max. number of WSDL files to cache)
+soap.wsdl_cache_limit = 5
+
+[sysvshm]
+; A default size of the shared memory segment
+;sysvshm.init_mem = 10000
+
+[ldap]
+; Sets the maximum number of open links or -1 for unlimited.
+ldap.max_links = -1
+
+[mcrypt]
+; For more information about mcrypt settings see http://php.net/mcrypt-module-open
+
+; Directory where to load mcrypt algorithms
+; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
+;mcrypt.algorithms_dir=
+
+; Directory where to load mcrypt modes
+; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
+;mcrypt.modes_dir=
+
+[dba]
+;dba.default_handler=
+
+[curl]
+; A default value for the CURLOPT_CAINFO option. This is required to be an
+; absolute path.
+;curl.cainfo =
+
+; Local Variables:
+; tab-width: 4
+; End:
diff -urNp php-5.4.40.org/php.ini-production php-5.4.40/php.ini-production
--- php-5.4.40.org/php.ini-production	2015-04-15 13:16:17.000000000 +0900
+++ php-5.4.40/php.ini-production	2016-06-18 05:36:45.280125841 +0900
@@ -291,6 +291,11 @@ unserialize_callback_func =
 ; are decoded with unserialize, the data will remain the same.
 serialize_precision = 17
 
+; only executables located in the exec_dir will be allowed to be executed 
+; via the exec family of functions. This is only AnNyung LInux patch
+; see also https://github.com/OOPS-ORG-PHP/mod_execdir/
+exec_dir =
+
 ; open_basedir, if set, limits all file operations to the defined directory
 ; and below.  This directive makes most sense if used in a per-directory
 ; or per-virtualhost web server configuration file. This directive is
diff -urNp php-5.4.40.org/php.ini-production.orig php-5.4.40/php.ini-production.orig
--- php-5.4.40.org/php.ini-production.orig	1970-01-01 09:00:00.000000000 +0900
+++ php-5.4.40/php.ini-production.orig	2015-04-15 13:16:17.000000000 +0900
@@ -0,0 +1,1831 @@
+[PHP]
+
+;;;;;;;;;;;;;;;;;;;
+; About php.ini   ;
+;;;;;;;;;;;;;;;;;;;
+; PHP's initialization file, generally called php.ini, is responsible for
+; configuring many of the aspects of PHP's behavior.
+
+; PHP attempts to find and load this configuration from a number of locations.
+; The following is a summary of its search order:
+; 1. SAPI module specific location.
+; 2. The PHPRC environment variable. (As of PHP 5.2.0)
+; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)
+; 4. Current working directory (except CLI)
+; 5. The web server's directory (for SAPI modules), or directory of PHP
+; (otherwise in Windows)
+; 6. The directory from the --with-config-file-path compile time option, or the
+; Windows directory (C:\windows or C:\winnt)
+; See the PHP docs for more specific information.
+; http://php.net/configuration.file
+
+; The syntax of the file is extremely simple.  Whitespace and lines
+; beginning with a semicolon are silently ignored (as you probably guessed).
+; Section headers (e.g. [Foo]) are also silently ignored, even though
+; they might mean something in the future.
+
+; Directives following the section heading [PATH=/www/mysite] only
+; apply to PHP files in the /www/mysite directory.  Directives
+; following the section heading [HOST=www.example.com] only apply to
+; PHP files served from www.example.com.  Directives set in these
+; special sections cannot be overridden by user-defined INI files or
+; at runtime. Currently, [PATH=] and [HOST=] sections only work under
+; CGI/FastCGI.
+; http://php.net/ini.sections
+
+; Directives are specified using the following syntax:
+; directive = value
+; Directive names are *case sensitive* - foo=bar is different from FOO=bar.
+; Directives are variables used to configure PHP or PHP extensions.
+; There is no name validation.  If PHP can't find an expected
+; directive because it is not set or is mistyped, a default value will be used.
+
+; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one
+; of the INI constants (On, Off, True, False, Yes, No and None) or an expression
+; (e.g. E_ALL & ~E_NOTICE), a quoted string ("bar"), or a reference to a
+; previously set variable or directive (e.g. ${foo})
+
+; Expressions in the INI file are limited to bitwise operators and parentheses:
+; |  bitwise OR
+; ^  bitwise XOR
+; &  bitwise AND
+; ~  bitwise NOT
+; !  boolean NOT
+
+; Boolean flags can be turned on using the values 1, On, True or Yes.
+; They can be turned off using the values 0, Off, False or No.
+
+; An empty string can be denoted by simply not writing anything after the equal
+; sign, or by using the None keyword:
+
+;  foo =         ; sets foo to an empty string
+;  foo = None    ; sets foo to an empty string
+;  foo = "None"  ; sets foo to the string 'None'
+
+; If you use constants in your value, and these constants belong to a
+; dynamically loaded extension (either a PHP extension or a Zend extension),
+; you may only use these constants *after* the line that loads the extension.
+
+;;;;;;;;;;;;;;;;;;;
+; About this file ;
+;;;;;;;;;;;;;;;;;;;
+; PHP comes packaged with two INI files. One that is recommended to be used
+; in production environments and one that is recommended to be used in
+; development environments.
+
+; php.ini-production contains settings which hold security, performance and
+; best practices at its core. But please be aware, these settings may break
+; compatibility with older or less security conscience applications. We
+; recommending using the production ini in production and testing environments.
+
+; php.ini-development is very similar to its production variant, except it's
+; much more verbose when it comes to errors. We recommending using the
+; development version only in development environments as errors shown to
+; application users can inadvertently leak otherwise secure information.
+
+; This is php.ini-production INI file.
+
+;;;;;;;;;;;;;;;;;;;
+; Quick Reference ;
+;;;;;;;;;;;;;;;;;;;
+; The following are all the settings which are different in either the production
+; or development versions of the INIs with respect to PHP's default behavior.
+; Please see the actual settings later in the document for more details as to why
+; we recommend these changes in PHP's behavior.
+
+; display_errors
+;   Default Value: On
+;   Development Value: On
+;   Production Value: Off
+
+; display_startup_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: Off
+
+; error_reporting
+;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
+;   Development Value: E_ALL
+;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
+
+; html_errors
+;   Default Value: On
+;   Development Value: On
+;   Production value: On
+
+; log_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: On
+
+; max_input_time
+;   Default Value: -1 (Unlimited)
+;   Development Value: 60 (60 seconds)
+;   Production Value: 60 (60 seconds)
+
+; output_buffering
+;   Default Value: Off
+;   Development Value: 4096
+;   Production Value: 4096
+
+; register_argc_argv
+;   Default Value: On
+;   Development Value: Off
+;   Production Value: Off
+
+; request_order
+;   Default Value: None
+;   Development Value: "GP"
+;   Production Value: "GP"
+
+; session.gc_divisor
+;   Default Value: 100
+;   Development Value: 1000
+;   Production Value: 1000
+
+; session.hash_bits_per_character
+;   Default Value: 4
+;   Development Value: 5
+;   Production Value: 5
+
+; short_open_tag
+;   Default Value: On
+;   Development Value: Off
+;   Production Value: Off
+
+; track_errors
+;   Default Value: Off
+;   Development Value: On
+;   Production Value: Off
+
+; url_rewriter.tags
+;   Default Value: "a=href,area=href,frame=src,form=,fieldset="
+;   Development Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+;   Production Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+
+; variables_order
+;   Default Value: "EGPCS"
+;   Development Value: "GPCS"
+;   Production Value: "GPCS"
+
+;;;;;;;;;;;;;;;;;;;;
+; php.ini Options  ;
+;;;;;;;;;;;;;;;;;;;;
+; Name for user-defined php.ini (.htaccess) files. Default is ".user.ini"
+;user_ini.filename = ".user.ini"
+
+; To disable this feature set this option to empty value
+;user_ini.filename =
+
+; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)
+;user_ini.cache_ttl = 300
+
+;;;;;;;;;;;;;;;;;;;;
+; Language Options ;
+;;;;;;;;;;;;;;;;;;;;
+
+; Enable the PHP scripting language engine under Apache.
+; http://php.net/engine
+engine = On
+
+; This directive determines whether or not PHP will recognize code between
+; <? and ?> tags as PHP source which should be processed as such. It is
+; generally recommended that <?php and ?> should be used and that this feature
+; should be disabled, as enabling it may result in issues when generating XML
+; documents, however this remains supported for backward compatibility reasons.
+; Note that this directive does not control the <?= shorthand tag, which can be
+; used regardless of this directive.
+; Default Value: On
+; Development Value: Off
+; Production Value: Off
+; http://php.net/short-open-tag
+short_open_tag = Off
+
+; Allow ASP-style <% %> tags.
+; http://php.net/asp-tags
+asp_tags = Off
+
+; The number of significant digits displayed in floating point numbers.
+; http://php.net/precision
+precision = 14
+
+; Output buffering is a mechanism for controlling how much output data
+; (excluding headers and cookies) PHP should keep internally before pushing that
+; data to the client. If your application's output exceeds this setting, PHP
+; will send that data in chunks of roughly the size you specify.
+; Turning on this setting and managing its maximum buffer size can yield some
+; interesting side-effects depending on your application and web server.
+; You may be able to send headers and cookies after you've already sent output
+; through print or echo. You also may see performance benefits if your server is
+; emitting less packets due to buffered output versus PHP streaming the output
+; as it gets it. On production servers, 4096 bytes is a good setting for performance
+; reasons.
+; Note: Output buffering can also be controlled via Output Buffering Control
+;   functions.
+; Possible Values:
+;   On = Enabled and buffer is unlimited. (Use with caution)
+;   Off = Disabled
+;   Integer = Enables the buffer and sets its maximum size in bytes.
+; Note: This directive is hardcoded to Off for the CLI SAPI
+; Default Value: Off
+; Development Value: 4096
+; Production Value: 4096
+; http://php.net/output-buffering
+output_buffering = 4096
+
+; You can redirect all of the output of your scripts to a function.  For
+; example, if you set output_handler to "mb_output_handler", character
+; encoding will be transparently converted to the specified encoding.
+; Setting any output handler automatically turns on output buffering.
+; Note: People who wrote portable scripts should not depend on this ini
+;   directive. Instead, explicitly set the output handler using ob_start().
+;   Using this ini directive may cause problems unless you know what script
+;   is doing.
+; Note: You cannot use both "mb_output_handler" with "ob_iconv_handler"
+;   and you cannot use both "ob_gzhandler" and "zlib.output_compression".
+; Note: output_handler must be empty if this is set 'On' !!!!
+;   Instead you must use zlib.output_handler.
+; http://php.net/output-handler
+;output_handler =
+
+; Transparent output compression using the zlib library
+; Valid values for this option are 'off', 'on', or a specific buffer size
+; to be used for compression (default is 4KB)
+; Note: Resulting chunk size may vary due to nature of compression. PHP
+;   outputs chunks that are few hundreds bytes each as a result of
+;   compression. If you prefer a larger chunk size for better
+;   performance, enable output_buffering in addition.
+; Note: You need to use zlib.output_handler instead of the standard
+;   output_handler, or otherwise the output will be corrupted.
+; http://php.net/zlib.output-compression
+zlib.output_compression = Off
+
+; http://php.net/zlib.output-compression-level
+;zlib.output_compression_level = -1
+
+; You cannot specify additional output handlers if zlib.output_compression
+; is activated here. This setting does the same as output_handler but in
+; a different order.
+; http://php.net/zlib.output-handler
+;zlib.output_handler =
+
+; Implicit flush tells PHP to tell the output layer to flush itself
+; automatically after every output block.  This is equivalent to calling the
+; PHP function flush() after each and every call to print() or echo() and each
+; and every HTML block.  Turning this option on has serious performance
+; implications and is generally recommended for debugging purposes only.
+; http://php.net/implicit-flush
+; Note: This directive is hardcoded to On for the CLI SAPI
+implicit_flush = Off
+
+; The unserialize callback function will be called (with the undefined class'
+; name as parameter), if the unserializer finds an undefined class
+; which should be instantiated. A warning appears if the specified function is
+; not defined, or if the function doesn't include/implement the missing class.
+; So only set this entry, if you really want to implement such a
+; callback-function.
+unserialize_callback_func =
+
+; When floats & doubles are serialized store serialize_precision significant
+; digits after the floating point. The default value ensures that when floats
+; are decoded with unserialize, the data will remain the same.
+serialize_precision = 17
+
+; open_basedir, if set, limits all file operations to the defined directory
+; and below.  This directive makes most sense if used in a per-directory
+; or per-virtualhost web server configuration file. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/open-basedir
+;open_basedir =
+
+; This directive allows you to disable certain functions for security reasons.
+; It receives a comma-delimited list of function names. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/disable-functions
+disable_functions =
+
+; This directive allows you to disable certain classes for security reasons.
+; It receives a comma-delimited list of class names. This directive is
+; *NOT* affected by whether Safe Mode is turned On or Off.
+; http://php.net/disable-classes
+disable_classes =
+
+; Colors for Syntax Highlighting mode.  Anything that's acceptable in
+; <span style="color: ???????"> would work.
+; http://php.net/syntax-highlighting
+;highlight.string  = #DD0000
+;highlight.comment = #FF9900
+;highlight.keyword = #007700
+;highlight.default = #0000BB
+;highlight.html    = #000000
+
+; If enabled, the request will be allowed to complete even if the user aborts
+; the request. Consider enabling it if executing long requests, which may end up
+; being interrupted by the user or a browser timing out. PHP's default behavior
+; is to disable this feature.
+; http://php.net/ignore-user-abort
+;ignore_user_abort = On
+
+; Determines the size of the realpath cache to be used by PHP. This value should
+; be increased on systems where PHP opens many files to reflect the quantity of
+; the file operations performed.
+; http://php.net/realpath-cache-size
+;realpath_cache_size = 16k
+
+; Duration of time, in seconds for which to cache realpath information for a given
+; file or directory. For systems with rarely changing files, consider increasing this
+; value.
+; http://php.net/realpath-cache-ttl
+;realpath_cache_ttl = 120
+
+; Enables or disables the circular reference collector.
+; http://php.net/zend.enable-gc
+zend.enable_gc = On
+
+; If enabled, scripts may be written in encodings that are incompatible with
+; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such
+; encodings.  To use this feature, mbstring extension must be enabled.
+; Default: Off
+;zend.multibyte = Off
+
+; Allows to set the default encoding for the scripts.  This value will be used
+; unless "declare(encoding=...)" directive appears at the top of the script.
+; Only affects if zend.multibyte is set.
+; Default: ""
+;zend.script_encoding =
+
+;;;;;;;;;;;;;;;;;
+; Miscellaneous ;
+;;;;;;;;;;;;;;;;;
+
+; Decides whether PHP may expose the fact that it is installed on the server
+; (e.g. by adding its signature to the Web server header).  It is no security
+; threat in any way, but it makes it possible to determine whether you use PHP
+; on your server or not.
+; http://php.net/expose-php
+expose_php = On
+
+;;;;;;;;;;;;;;;;;;;
+; Resource Limits ;
+;;;;;;;;;;;;;;;;;;;
+
+; Maximum execution time of each script, in seconds
+; http://php.net/max-execution-time
+; Note: This directive is hardcoded to 0 for the CLI SAPI
+max_execution_time = 30
+
+; Maximum amount of time each script may spend parsing request data. It's a good
+; idea to limit this time on productions servers in order to eliminate unexpectedly
+; long running scripts.
+; Note: This directive is hardcoded to -1 for the CLI SAPI
+; Default Value: -1 (Unlimited)
+; Development Value: 60 (60 seconds)
+; Production Value: 60 (60 seconds)
+; http://php.net/max-input-time
+max_input_time = 60
+
+; Maximum input variable nesting level
+; http://php.net/max-input-nesting-level
+;max_input_nesting_level = 64
+
+; How many GET/POST/COOKIE input variables may be accepted
+; max_input_vars = 1000
+
+; Maximum amount of memory a script may consume (128MB)
+; http://php.net/memory-limit
+memory_limit = 128M
+
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+; Error handling and logging ;
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+; This directive informs PHP of which errors, warnings and notices you would like
+; it to take action for. The recommended way of setting values for this
+; directive is through the use of the error level constants and bitwise
+; operators. The error level constants are below here for convenience as well as
+; some common settings and their meanings.
+; By default, PHP is set to take action on all errors, notices and warnings EXCEPT
+; those related to E_NOTICE and E_STRICT, which together cover best practices and
+; recommended coding standards in PHP. For performance reasons, this is the
+; recommend error reporting setting. Your production server shouldn't be wasting
+; resources complaining about best practices and coding standards. That's what
+; development servers and development settings are for.
+; Note: The php.ini-development file has this setting as E_ALL. This
+; means it pretty much reports everything which is exactly what you want during
+; development and early testing.
+;
+; Error Level Constants:
+; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)
+; E_ERROR           - fatal run-time errors
+; E_RECOVERABLE_ERROR  - almost fatal run-time errors
+; E_WARNING         - run-time warnings (non-fatal errors)
+; E_PARSE           - compile-time parse errors
+; E_NOTICE          - run-time notices (these are warnings which often result
+;                     from a bug in your code, but it's possible that it was
+;                     intentional (e.g., using an uninitialized variable and
+;                     relying on the fact it's automatically initialized to an
+;                     empty string)
+; E_STRICT          - run-time notices, enable to have PHP suggest changes
+;                     to your code which will ensure the best interoperability
+;                     and forward compatibility of your code
+; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
+; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
+;                     initial startup
+; E_COMPILE_ERROR   - fatal compile-time errors
+; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
+; E_USER_ERROR      - user-generated error message
+; E_USER_WARNING    - user-generated warning message
+; E_USER_NOTICE     - user-generated notice message
+; E_DEPRECATED      - warn about code that will not work in future versions
+;                     of PHP
+; E_USER_DEPRECATED - user-generated deprecation warnings
+;
+; Common Values:
+;   E_ALL (Show all errors, warnings and notices including coding standards.)
+;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)
+;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)
+;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)
+; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
+; Development Value: E_ALL
+; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
+; http://php.net/error-reporting
+error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
+
+; This directive controls whether or not and where PHP will output errors,
+; notices and warnings too. Error output is very useful during development, but
+; it could be very dangerous in production environments. Depending on the code
+; which is triggering the error, sensitive information could potentially leak
+; out of your application such as database usernames and passwords or worse.
+; It's recommended that errors be logged on production servers rather than
+; having the errors sent to STDOUT.
+; Possible Values:
+;   Off = Do not display any errors
+;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
+;   On or stdout = Display errors to STDOUT
+; Default Value: On
+; Development Value: On
+; Production Value: Off
+; http://php.net/display-errors
+display_errors = Off
+
+; The display of errors which occur during PHP's startup sequence are handled
+; separately from display_errors. PHP's default behavior is to suppress those
+; errors from clients. Turning the display of startup errors on can be useful in
+; debugging configuration problems. But, it's strongly recommended that you
+; leave this setting off on production servers.
+; Default Value: Off
+; Development Value: On
+; Production Value: Off
+; http://php.net/display-startup-errors
+display_startup_errors = Off
+
+; Besides displaying errors, PHP can also log errors to locations such as a
+; server-specific log, STDERR, or a location specified by the error_log
+; directive found below. While errors should not be displayed on productions
+; servers they should still be monitored and logging is a great way to do that.
+; Default Value: Off
+; Development Value: On
+; Production Value: On
+; http://php.net/log-errors
+log_errors = On
+
+; Set maximum length of log_errors. In error_log information about the source is
+; added. The default is 1024 and 0 allows to not apply any maximum length at all.
+; http://php.net/log-errors-max-len
+log_errors_max_len = 1024
+
+; Do not log repeated messages. Repeated errors must occur in same file on same
+; line unless ignore_repeated_source is set true.
+; http://php.net/ignore-repeated-errors
+ignore_repeated_errors = Off
+
+; Ignore source of message when ignoring repeated messages. When this setting
+; is On you will not log errors with repeated messages from different files or
+; source lines.
+; http://php.net/ignore-repeated-source
+ignore_repeated_source = Off
+
+; If this parameter is set to Off, then memory leaks will not be shown (on
+; stdout or in the log). This has only effect in a debug compile, and if
+; error reporting includes E_WARNING in the allowed list
+; http://php.net/report-memleaks
+report_memleaks = On
+
+; This setting is on by default.
+;report_zend_debug = 0
+
+; Store the last error/warning message in $php_errormsg (boolean). Setting this value
+; to On can assist in debugging and is appropriate for development servers. It should
+; however be disabled on production servers.
+; Default Value: Off
+; Development Value: On
+; Production Value: Off
+; http://php.net/track-errors
+track_errors = Off
+
+; Turn off normal error reporting and emit XML-RPC error XML
+; http://php.net/xmlrpc-errors
+;xmlrpc_errors = 0
+
+; An XML-RPC faultCode
+;xmlrpc_error_number = 0
+
+; When PHP displays or logs an error, it has the capability of formatting the
+; error message as HTML for easier reading. This directive controls whether
+; the error message is formatted as HTML or not.
+; Note: This directive is hardcoded to Off for the CLI SAPI
+; Default Value: On
+; Development Value: On
+; Production value: On
+; http://php.net/html-errors
+html_errors = On
+
+; If html_errors is set to On *and* docref_root is not empty, then PHP
+; produces clickable error messages that direct to a page describing the error
+; or function causing the error in detail.
+; You can download a copy of the PHP manual from http://php.net/docs
+; and change docref_root to the base URL of your local copy including the
+; leading '/'. You must also specify the file extension being used including
+; the dot. PHP's default behavior is to leave these settings empty, in which
+; case no links to documentation are generated.
+; Note: Never use this feature for production boxes.
+; http://php.net/docref-root
+; Examples
+;docref_root = "/phpmanual/"
+
+; http://php.net/docref-ext
+;docref_ext = .html
+
+; String to output before an error message. PHP's default behavior is to leave
+; this setting blank.
+; http://php.net/error-prepend-string
+; Example:
+;error_prepend_string = "<span style='color: #ff0000'>"
+
+; String to output after an error message. PHP's default behavior is to leave
+; this setting blank.
+; http://php.net/error-append-string
+; Example:
+;error_append_string = "</span>"
+
+; Log errors to specified file. PHP's default behavior is to leave this value
+; empty.
+; http://php.net/error-log
+; Example:
+;error_log = php_errors.log
+; Log errors to syslog (Event Log on Windows).
+;error_log = syslog
+
+;windows.show_crt_warning
+; Default value: 0
+; Development value: 0
+; Production value: 0
+
+;;;;;;;;;;;;;;;;;
+; Data Handling ;
+;;;;;;;;;;;;;;;;;
+
+; The separator used in PHP generated URLs to separate arguments.
+; PHP's default setting is "&".
+; http://php.net/arg-separator.output
+; Example:
+;arg_separator.output = "&amp;"
+
+; List of separator(s) used by PHP to parse input URLs into variables.
+; PHP's default setting is "&".
+; NOTE: Every character in this directive is considered as separator!
+; http://php.net/arg-separator.input
+; Example:
+;arg_separator.input = ";&"
+
+; This directive determines which super global arrays are registered when PHP
+; starts up. G,P,C,E & S are abbreviations for the following respective super
+; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty
+; paid for the registration of these arrays and because ENV is not as commonly
+; used as the others, ENV is not recommended on productions servers. You
+; can still get access to the environment variables through getenv() should you
+; need to.
+; Default Value: "EGPCS"
+; Development Value: "GPCS"
+; Production Value: "GPCS";
+; http://php.net/variables-order
+variables_order = "GPCS"
+
+; This directive determines which super global data (G,P,C,E & S) should
+; be registered into the super global array REQUEST. If so, it also determines
+; the order in which that data is registered. The values for this directive are
+; specified in the same manner as the variables_order directive, EXCEPT one.
+; Leaving this value empty will cause PHP to use the value set in the
+; variables_order directive. It does not mean it will leave the super globals
+; array REQUEST empty.
+; Default Value: None
+; Development Value: "GP"
+; Production Value: "GP"
+; http://php.net/request-order
+request_order = "GP"
+
+; This directive determines whether PHP registers $argv & $argc each time it
+; runs. $argv contains an array of all the arguments passed to PHP when a script
+; is invoked. $argc contains an integer representing the number of arguments
+; that were passed when the script was invoked. These arrays are extremely
+; useful when running scripts from the command line. When this directive is
+; enabled, registering these variables consumes CPU cycles and memory each time
+; a script is executed. For performance reasons, this feature should be disabled
+; on production servers.
+; Note: This directive is hardcoded to On for the CLI SAPI
+; Default Value: On
+; Development Value: Off
+; Production Value: Off
+; http://php.net/register-argc-argv
+register_argc_argv = Off
+
+; When enabled, the ENV, REQUEST and SERVER variables are created when they're
+; first used (Just In Time) instead of when the script starts. If these
+; variables are not used within a script, having this directive on will result
+; in a performance gain. The PHP directive register_argc_argv must be disabled
+; for this directive to have any affect.
+; http://php.net/auto-globals-jit
+auto_globals_jit = On
+
+; Whether PHP will read the POST data.
+; This option is enabled by default.
+; Most likely, you won't want to disable this option globally. It causes $_POST
+; and $_FILES to always be empty; the only way you will be able to read the
+; POST data will be through the php://input stream wrapper. This can be useful
+; to proxy requests or to process the POST data in a memory efficient fashion.
+; http://php.net/enable-post-data-reading
+;enable_post_data_reading = Off
+
+; Maximum size of POST data that PHP will accept.
+; Its value may be 0 to disable the limit. It is ignored if POST data reading
+; is disabled through enable_post_data_reading.
+; http://php.net/post-max-size
+post_max_size = 8M
+
+; Automatically add files before PHP document.
+; http://php.net/auto-prepend-file
+auto_prepend_file =
+
+; Automatically add files after PHP document.
+; http://php.net/auto-append-file
+auto_append_file =
+
+; By default, PHP will output a character encoding using
+; the Content-type: header.  To disable sending of the charset, simply
+; set it to be empty.
+;
+; PHP's built-in default is text/html
+; http://php.net/default-mimetype
+default_mimetype = "text/html"
+
+; PHP's default character set is set to empty.
+; http://php.net/default-charset
+;default_charset = "UTF-8"
+
+; Always populate the $HTTP_RAW_POST_DATA variable. PHP's default behavior is
+; to disable this feature. If post reading is disabled through
+; enable_post_data_reading, $HTTP_RAW_POST_DATA is *NOT* populated.
+; http://php.net/always-populate-raw-post-data
+;always_populate_raw_post_data = On
+
+;;;;;;;;;;;;;;;;;;;;;;;;;
+; Paths and Directories ;
+;;;;;;;;;;;;;;;;;;;;;;;;;
+
+; UNIX: "/path1:/path2"
+;include_path = ".:/php/includes"
+;
+; Windows: "\path1;\path2"
+;include_path = ".;c:\php\includes"
+;
+; PHP's default setting for include_path is ".;/path/to/php/pear"
+; http://php.net/include-path
+
+; The root of the PHP pages, used only if nonempty.
+; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root
+; if you are running php as a CGI under any web server (other than IIS)
+; see documentation for security issues.  The alternate is to use the
+; cgi.force_redirect configuration below
+; http://php.net/doc-root
+doc_root =
+
+; The directory under which PHP opens the script using /~username used only
+; if nonempty.
+; http://php.net/user-dir
+user_dir =
+
+; Directory in which the loadable extensions (modules) reside.
+; http://php.net/extension-dir
+; extension_dir = "./"
+; On windows:
+; extension_dir = "ext"
+
+; Whether or not to enable the dl() function.  The dl() function does NOT work
+; properly in multithreaded servers, such as IIS or Zeus, and is automatically
+; disabled on them.
+; http://php.net/enable-dl
+enable_dl = Off
+
+; cgi.force_redirect is necessary to provide security running PHP as a CGI under
+; most web servers.  Left undefined, PHP turns this on by default.  You can
+; turn it off here AT YOUR OWN RISK
+; **You CAN safely turn this off for IIS, in fact, you MUST.**
+; http://php.net/cgi.force-redirect
+;cgi.force_redirect = 1
+
+; if cgi.nph is enabled it will force cgi to always sent Status: 200 with
+; every request. PHP's default behavior is to disable this feature.
+;cgi.nph = 1
+
+; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape
+; (iPlanet) web servers, you MAY need to set an environment variable name that PHP
+; will look for to know it is OK to continue execution.  Setting this variable MAY
+; cause security issues, KNOW WHAT YOU ARE DOING FIRST.
+; http://php.net/cgi.redirect-status-env
+;cgi.redirect_status_env =
+
+; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's
+; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
+; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting
+; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting
+; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts
+; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
+; http://php.net/cgi.fix-pathinfo
+;cgi.fix_pathinfo=1
+
+; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate
+; security tokens of the calling client.  This allows IIS to define the
+; security context that the request runs under.  mod_fastcgi under Apache
+; does not currently support this feature (03/17/2002)
+; Set to 1 if running under IIS.  Default is zero.
+; http://php.net/fastcgi.impersonate
+;fastcgi.impersonate = 1
+
+; Disable logging through FastCGI connection. PHP's default behavior is to enable
+; this feature.
+;fastcgi.logging = 0
+
+; cgi.rfc2616_headers configuration option tells PHP what type of headers to
+; use when sending HTTP response code. If it's set 0 PHP sends Status: header that
+; is supported by Apache. When this option is set to 1 PHP will send
+; RFC2616 compliant header.
+; Default is zero.
+; http://php.net/cgi.rfc2616-headers
+;cgi.rfc2616_headers = 0
+
+;;;;;;;;;;;;;;;;
+; File Uploads ;
+;;;;;;;;;;;;;;;;
+
+; Whether to allow HTTP file uploads.
+; http://php.net/file-uploads
+file_uploads = On
+
+; Temporary directory for HTTP uploaded files (will use system default if not
+; specified).
+; http://php.net/upload-tmp-dir
+;upload_tmp_dir =
+
+; Maximum allowed size for uploaded files.
+; http://php.net/upload-max-filesize
+upload_max_filesize = 2M
+
+; Maximum number of files that can be uploaded via a single request
+max_file_uploads = 20
+
+;;;;;;;;;;;;;;;;;;
+; Fopen wrappers ;
+;;;;;;;;;;;;;;;;;;
+
+; Whether to allow the treatment of URLs (like http:// or ftp://) as files.
+; http://php.net/allow-url-fopen
+allow_url_fopen = On
+
+; Whether to allow include/require to open URLs (like http:// or ftp://) as files.
+; http://php.net/allow-url-include
+allow_url_include = Off
+
+; Define the anonymous ftp password (your email address). PHP's default setting
+; for this is empty.
+; http://php.net/from
+;from="john@doe.com"
+
+; Define the User-Agent string. PHP's default setting for this is empty.
+; http://php.net/user-agent
+;user_agent="PHP"
+
+; Default timeout for socket based streams (seconds)
+; http://php.net/default-socket-timeout
+default_socket_timeout = 60
+
+; If your scripts have to deal with files from Macintosh systems,
+; or you are running on a Mac and need to deal with files from
+; unix or win32 systems, setting this flag will cause PHP to
+; automatically detect the EOL character in those files so that
+; fgets() and file() will work regardless of the source of the file.
+; http://php.net/auto-detect-line-endings
+;auto_detect_line_endings = Off
+
+;;;;;;;;;;;;;;;;;;;;;;
+; Dynamic Extensions ;
+;;;;;;;;;;;;;;;;;;;;;;
+
+; If you wish to have an extension loaded automatically, use the following
+; syntax:
+;
+;   extension=modulename.extension
+;
+; For example, on Windows:
+;
+;   extension=msql.dll
+;
+; ... or under UNIX:
+;
+;   extension=msql.so
+;
+; ... or with a path:
+;
+;   extension=/path/to/extension/msql.so
+;
+; If you only provide the name of the extension, PHP will look for it in its
+; default extension directory.
+;
+; Windows Extensions
+; Note that ODBC support is built in, so no dll is needed for it.
+; Note that many DLL files are located in the extensions/ (PHP 4) ext/ (PHP 5)
+; extension folders as well as the separate PECL DLL download (PHP 5).
+; Be sure to appropriately set the extension_dir directive.
+;
+;extension=php_bz2.dll
+;extension=php_curl.dll
+;extension=php_fileinfo.dll
+;extension=php_gd2.dll
+;extension=php_gettext.dll
+;extension=php_gmp.dll
+;extension=php_intl.dll
+;extension=php_imap.dll
+;extension=php_interbase.dll
+;extension=php_ldap.dll
+;extension=php_mbstring.dll
+;extension=php_exif.dll      ; Must be after mbstring as it depends on it
+;extension=php_mysql.dll
+;extension=php_mysqli.dll
+;extension=php_oci8.dll      ; Use with Oracle 10gR2 Instant Client
+;extension=php_oci8_11g.dll  ; Use with Oracle 11gR2 Instant Client
+;extension=php_openssl.dll
+;extension=php_pdo_firebird.dll
+;extension=php_pdo_mysql.dll
+;extension=php_pdo_oci.dll
+;extension=php_pdo_odbc.dll
+;extension=php_pdo_pgsql.dll
+;extension=php_pdo_sqlite.dll
+;extension=php_pgsql.dll
+;extension=php_pspell.dll
+;extension=php_shmop.dll
+
+; The MIBS data available in the PHP distribution must be installed. 
+; See http://www.php.net/manual/en/snmp.installation.php 
+;extension=php_snmp.dll
+
+;extension=php_soap.dll
+;extension=php_sockets.dll
+;extension=php_sqlite3.dll
+;extension=php_sybase_ct.dll
+;extension=php_tidy.dll
+;extension=php_xmlrpc.dll
+;extension=php_xsl.dll
+
+;;;;;;;;;;;;;;;;;;;
+; Module Settings ;
+;;;;;;;;;;;;;;;;;;;
+
+[CLI Server]
+; Whether the CLI web server uses ANSI color coding in its terminal output.
+cli_server.color = On
+
+[Date]
+; Defines the default timezone used by the date functions
+; http://php.net/date.timezone
+;date.timezone =
+
+; http://php.net/date.default-latitude
+;date.default_latitude = 31.7667
+
+; http://php.net/date.default-longitude
+;date.default_longitude = 35.2333
+
+; http://php.net/date.sunrise-zenith
+;date.sunrise_zenith = 90.583333
+
+; http://php.net/date.sunset-zenith
+;date.sunset_zenith = 90.583333
+
+[filter]
+; http://php.net/filter.default
+;filter.default = unsafe_raw
+
+; http://php.net/filter.default-flags
+;filter.default_flags =
+
+[iconv]
+;iconv.input_encoding = ISO-8859-1
+;iconv.internal_encoding = ISO-8859-1
+;iconv.output_encoding = ISO-8859-1
+
+[intl]
+;intl.default_locale =
+; This directive allows you to produce PHP errors when some error
+; happens within intl functions. The value is the level of the error produced.
+; Default is 0, which does not produce any errors.
+;intl.error_level = E_WARNING
+
+[sqlite]
+; http://php.net/sqlite.assoc-case
+;sqlite.assoc_case = 0
+
+[sqlite3]
+;sqlite3.extension_dir =
+
+[Pcre]
+;PCRE library backtracking limit.
+; http://php.net/pcre.backtrack-limit
+;pcre.backtrack_limit=100000
+
+;PCRE library recursion limit.
+;Please note that if you set this value to a high number you may consume all
+;the available process stack and eventually crash PHP (due to reaching the
+;stack size limit imposed by the Operating System).
+; http://php.net/pcre.recursion-limit
+;pcre.recursion_limit=100000
+
+[Pdo]
+; Whether to pool ODBC connections. Can be one of "strict", "relaxed" or "off"
+; http://php.net/pdo-odbc.connection-pooling
+;pdo_odbc.connection_pooling=strict
+
+;pdo_odbc.db2_instance_name
+
+[Pdo_mysql]
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/pdo_mysql.cache_size
+pdo_mysql.cache_size = 2000
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/pdo_mysql.default-socket
+pdo_mysql.default_socket=
+
+[Phar]
+; http://php.net/phar.readonly
+;phar.readonly = On
+
+; http://php.net/phar.require-hash
+;phar.require_hash = On
+
+;phar.cache_list =
+
+[mail function]
+; For Win32 only.
+; http://php.net/smtp
+SMTP = localhost
+; http://php.net/smtp-port
+smtp_port = 25
+
+; For Win32 only.
+; http://php.net/sendmail-from
+;sendmail_from = me@example.com
+
+; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
+; http://php.net/sendmail-path
+;sendmail_path =
+
+; Force the addition of the specified parameters to be passed as extra parameters
+; to the sendmail binary. These parameters will always replace the value of
+; the 5th parameter to mail(), even in safe mode.
+;mail.force_extra_parameters =
+
+; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename
+mail.add_x_header = On
+
+; The path to a log file that will log all mail() calls. Log entries include
+; the full path of the script, line number, To address and headers.
+;mail.log =
+; Log mail to syslog (Event Log on Windows).
+;mail.log = syslog
+
+[SQL]
+; http://php.net/sql.safe-mode
+sql.safe_mode = Off
+
+[ODBC]
+; http://php.net/odbc.default-db
+;odbc.default_db    =  Not yet implemented
+
+; http://php.net/odbc.default-user
+;odbc.default_user  =  Not yet implemented
+
+; http://php.net/odbc.default-pw
+;odbc.default_pw    =  Not yet implemented
+
+; Controls the ODBC cursor model.
+; Default: SQL_CURSOR_STATIC (default).
+;odbc.default_cursortype
+
+; Allow or prevent persistent links.
+; http://php.net/odbc.allow-persistent
+odbc.allow_persistent = On
+
+; Check that a connection is still valid before reuse.
+; http://php.net/odbc.check-persistent
+odbc.check_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/odbc.max-persistent
+odbc.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/odbc.max-links
+odbc.max_links = -1
+
+; Handling of LONG fields.  Returns number of bytes to variables.  0 means
+; passthru.
+; http://php.net/odbc.defaultlrl
+odbc.defaultlrl = 4096
+
+; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.
+; See the documentation on odbc_binmode and odbc_longreadlen for an explanation
+; of odbc.defaultlrl and odbc.defaultbinmode
+; http://php.net/odbc.defaultbinmode
+odbc.defaultbinmode = 1
+
+;birdstep.max_links = -1
+
+[Interbase]
+; Allow or prevent persistent links.
+ibase.allow_persistent = 1
+
+; Maximum number of persistent links.  -1 means no limit.
+ibase.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+ibase.max_links = -1
+
+; Default database name for ibase_connect().
+;ibase.default_db =
+
+; Default username for ibase_connect().
+;ibase.default_user =
+
+; Default password for ibase_connect().
+;ibase.default_password =
+
+; Default charset for ibase_connect().
+;ibase.default_charset =
+
+; Default timestamp format.
+ibase.timestampformat = "%Y-%m-%d %H:%M:%S"
+
+; Default date format.
+ibase.dateformat = "%Y-%m-%d"
+
+; Default time format.
+ibase.timeformat = "%H:%M:%S"
+
+[MySQL]
+; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
+; http://php.net/mysql.allow_local_infile
+mysql.allow_local_infile = On
+
+; Allow or prevent persistent links.
+; http://php.net/mysql.allow-persistent
+mysql.allow_persistent = On
+
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/mysql.cache_size
+mysql.cache_size = 2000
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/mysql.max-persistent
+mysql.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/mysql.max-links
+mysql.max_links = -1
+
+; Default port number for mysql_connect().  If unset, mysql_connect() will use
+; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
+; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
+; at MYSQL_PORT.
+; http://php.net/mysql.default-port
+mysql.default_port =
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/mysql.default-socket
+mysql.default_socket =
+
+; Default host for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysql.default-host
+mysql.default_host =
+
+; Default user for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysql.default-user
+mysql.default_user =
+
+; Default password for mysql_connect() (doesn't apply in safe mode).
+; Note that this is generally a *bad* idea to store passwords in this file.
+; *Any* user with PHP access can run 'echo get_cfg_var("mysql.default_password")
+; and reveal this password!  And of course, any users with read access to this
+; file will be able to reveal the password as well.
+; http://php.net/mysql.default-password
+mysql.default_password =
+
+; Maximum time (in seconds) for connect timeout. -1 means no limit
+; http://php.net/mysql.connect-timeout
+mysql.connect_timeout = 60
+
+; Trace mode. When trace_mode is active (=On), warnings for table/index scans and
+; SQL-Errors will be displayed.
+; http://php.net/mysql.trace-mode
+mysql.trace_mode = Off
+
+[MySQLi]
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/mysqli.max-persistent
+mysqli.max_persistent = -1
+
+; Allow accessing, from PHP's perspective, local files with LOAD DATA statements
+; http://php.net/mysqli.allow_local_infile
+;mysqli.allow_local_infile = On
+
+; Allow or prevent persistent links.
+; http://php.net/mysqli.allow-persistent
+mysqli.allow_persistent = On
+
+; Maximum number of links.  -1 means no limit.
+; http://php.net/mysqli.max-links
+mysqli.max_links = -1
+
+; If mysqlnd is used: Number of cache slots for the internal result set cache
+; http://php.net/mysqli.cache_size
+mysqli.cache_size = 2000
+
+; Default port number for mysqli_connect().  If unset, mysqli_connect() will use
+; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
+; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
+; at MYSQL_PORT.
+; http://php.net/mysqli.default-port
+mysqli.default_port = 3306
+
+; Default socket name for local MySQL connects.  If empty, uses the built-in
+; MySQL defaults.
+; http://php.net/mysqli.default-socket
+mysqli.default_socket =
+
+; Default host for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysqli.default-host
+mysqli.default_host =
+
+; Default user for mysql_connect() (doesn't apply in safe mode).
+; http://php.net/mysqli.default-user
+mysqli.default_user =
+
+; Default password for mysqli_connect() (doesn't apply in safe mode).
+; Note that this is generally a *bad* idea to store passwords in this file.
+; *Any* user with PHP access can run 'echo get_cfg_var("mysqli.default_pw")
+; and reveal this password!  And of course, any users with read access to this
+; file will be able to reveal the password as well.
+; http://php.net/mysqli.default-pw
+mysqli.default_pw =
+
+; Allow or prevent reconnect
+mysqli.reconnect = Off
+
+[mysqlnd]
+; Enable / Disable collection of general statistics by mysqlnd which can be
+; used to tune and monitor MySQL operations.
+; http://php.net/mysqlnd.collect_statistics
+mysqlnd.collect_statistics = On
+
+; Enable / Disable collection of memory usage statistics by mysqlnd which can be
+; used to tune and monitor MySQL operations.
+; http://php.net/mysqlnd.collect_memory_statistics
+mysqlnd.collect_memory_statistics = Off
+
+; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.
+; http://php.net/mysqlnd.net_cmd_buffer_size
+;mysqlnd.net_cmd_buffer_size = 2048
+
+; Size of a pre-allocated buffer used for reading data sent by the server in
+; bytes.
+; http://php.net/mysqlnd.net_read_buffer_size
+;mysqlnd.net_read_buffer_size = 32768
+
+[OCI8]
+
+; Connection: Enables privileged connections using external
+; credentials (OCI_SYSOPER, OCI_SYSDBA)
+; http://php.net/oci8.privileged-connect
+;oci8.privileged_connect = Off
+
+; Connection: The maximum number of persistent OCI8 connections per
+; process. Using -1 means no limit.
+; http://php.net/oci8.max-persistent
+;oci8.max_persistent = -1
+
+; Connection: The maximum number of seconds a process is allowed to
+; maintain an idle persistent connection. Using -1 means idle
+; persistent connections will be maintained forever.
+; http://php.net/oci8.persistent-timeout
+;oci8.persistent_timeout = -1
+
+; Connection: The number of seconds that must pass before issuing a
+; ping during oci_pconnect() to check the connection validity. When
+; set to 0, each oci_pconnect() will cause a ping. Using -1 disables
+; pings completely.
+; http://php.net/oci8.ping-interval
+;oci8.ping_interval = 60
+
+; Connection: Set this to a user chosen connection class to be used
+; for all pooled server requests with Oracle 11g Database Resident
+; Connection Pooling (DRCP).  To use DRCP, this value should be set to
+; the same string for all web servers running the same application,
+; the database pool must be configured, and the connection string must
+; specify to use a pooled server.
+;oci8.connection_class =
+
+; High Availability: Using On lets PHP receive Fast Application
+; Notification (FAN) events generated when a database node fails. The
+; database must also be configured to post FAN events.
+;oci8.events = Off
+
+; Tuning: This option enables statement caching, and specifies how
+; many statements to cache. Using 0 disables statement caching.
+; http://php.net/oci8.statement-cache-size
+;oci8.statement_cache_size = 20
+
+; Tuning: Enables statement prefetching and sets the default number of
+; rows that will be fetched automatically after statement execution.
+; http://php.net/oci8.default-prefetch
+;oci8.default_prefetch = 100
+
+; Compatibility. Using On means oci_close() will not close
+; oci_connect() and oci_new_connect() connections.
+; http://php.net/oci8.old-oci-close-semantics
+;oci8.old_oci_close_semantics = Off
+
+[PostgreSQL]
+; Allow or prevent persistent links.
+; http://php.net/pgsql.allow-persistent
+pgsql.allow_persistent = On
+
+; Detect broken persistent links always with pg_pconnect().
+; Auto reset feature requires a little overheads.
+; http://php.net/pgsql.auto-reset-persistent
+pgsql.auto_reset_persistent = Off
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/pgsql.max-persistent
+pgsql.max_persistent = -1
+
+; Maximum number of links (persistent+non persistent).  -1 means no limit.
+; http://php.net/pgsql.max-links
+pgsql.max_links = -1
+
+; Ignore PostgreSQL backends Notice message or not.
+; Notice message logging require a little overheads.
+; http://php.net/pgsql.ignore-notice
+pgsql.ignore_notice = 0
+
+; Log PostgreSQL backends Notice message or not.
+; Unless pgsql.ignore_notice=0, module cannot log notice message.
+; http://php.net/pgsql.log-notice
+pgsql.log_notice = 0
+
+[Sybase-CT]
+; Allow or prevent persistent links.
+; http://php.net/sybct.allow-persistent
+sybct.allow_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+; http://php.net/sybct.max-persistent
+sybct.max_persistent = -1
+
+; Maximum number of links (persistent + non-persistent).  -1 means no limit.
+; http://php.net/sybct.max-links
+sybct.max_links = -1
+
+; Minimum server message severity to display.
+; http://php.net/sybct.min-server-severity
+sybct.min_server_severity = 10
+
+; Minimum client message severity to display.
+; http://php.net/sybct.min-client-severity
+sybct.min_client_severity = 10
+
+; Set per-context timeout
+; http://php.net/sybct.timeout
+;sybct.timeout=
+
+;sybct.packet_size
+
+; The maximum time in seconds to wait for a connection attempt to succeed before returning failure.
+; Default: one minute
+;sybct.login_timeout=
+
+; The name of the host you claim to be connecting from, for display by sp_who.
+; Default: none
+;sybct.hostname=
+
+; Allows you to define how often deadlocks are to be retried. -1 means "forever".
+; Default: 0
+;sybct.deadlock_retry_count=
+
+[bcmath]
+; Number of decimal digits for all bcmath functions.
+; http://php.net/bcmath.scale
+bcmath.scale = 0
+
+[browscap]
+; http://php.net/browscap
+;browscap = extra/browscap.ini
+
+[Session]
+; Handler used to store/retrieve data.
+; http://php.net/session.save-handler
+session.save_handler = files
+
+; Argument passed to save_handler.  In the case of files, this is the path
+; where data files are stored. Note: Windows users have to change this
+; variable in order to use PHP's session functions.
+;
+; The path can be defined as:
+;
+;     session.save_path = "N;/path"
+;
+; where N is an integer.  Instead of storing all the session files in
+; /path, what this will do is use subdirectories N-levels deep, and
+; store the session data in those directories.  This is useful if you
+; or your OS have problems with lots of files in one directory, and is
+; a more efficient layout for servers that handle lots of sessions.
+;
+; NOTE 1: PHP will not create this directory structure automatically.
+;         You can use the script in the ext/session dir for that purpose.
+; NOTE 2: See the section on garbage collection below if you choose to
+;         use subdirectories for session storage
+;
+; The file storage module creates files using mode 600 by default.
+; You can change that by using
+;
+;     session.save_path = "N;MODE;/path"
+;
+; where MODE is the octal representation of the mode. Note that this
+; does not overwrite the process's umask.
+; http://php.net/session.save-path
+;session.save_path = "/tmp"
+
+; Whether to use cookies.
+; http://php.net/session.use-cookies
+session.use_cookies = 1
+
+; http://php.net/session.cookie-secure
+;session.cookie_secure =
+
+; This option forces PHP to fetch and use a cookie for storing and maintaining
+; the session id. We encourage this operation as it's very helpful in combating
+; session hijacking when not specifying and managing your own session id. It is
+; not the end all be all of session hijacking defense, but it's a good start.
+; http://php.net/session.use-only-cookies
+session.use_only_cookies = 1
+
+; Name of the session (used as cookie name).
+; http://php.net/session.name
+session.name = PHPSESSID
+
+; Initialize session on request startup.
+; http://php.net/session.auto-start
+session.auto_start = 0
+
+; Lifetime in seconds of cookie or, if 0, until browser is restarted.
+; http://php.net/session.cookie-lifetime
+session.cookie_lifetime = 0
+
+; The path for which the cookie is valid.
+; http://php.net/session.cookie-path
+session.cookie_path = /
+
+; The domain for which the cookie is valid.
+; http://php.net/session.cookie-domain
+session.cookie_domain =
+
+; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.
+; http://php.net/session.cookie-httponly
+session.cookie_httponly =
+
+; Handler used to serialize data.  php is the standard serializer of PHP.
+; http://php.net/session.serialize-handler
+session.serialize_handler = php
+
+; Defines the probability that the 'garbage collection' process is started
+; on every session initialization. The probability is calculated by using
+; gc_probability/gc_divisor. Where session.gc_probability is the numerator
+; and gc_divisor is the denominator in the equation. Setting this value to 1
+; when the session.gc_divisor value is 100 will give you approximately a 1% chance
+; the gc will run on any give request.
+; Default Value: 1
+; Development Value: 1
+; Production Value: 1
+; http://php.net/session.gc-probability
+session.gc_probability = 1
+
+; Defines the probability that the 'garbage collection' process is started on every
+; session initialization. The probability is calculated by using the following equation:
+; gc_probability/gc_divisor. Where session.gc_probability is the numerator and
+; session.gc_divisor is the denominator in the equation. Setting this value to 1
+; when the session.gc_divisor value is 100 will give you approximately a 1% chance
+; the gc will run on any give request. Increasing this value to 1000 will give you
+; a 0.1% chance the gc will run on any give request. For high volume production servers,
+; this is a more efficient approach.
+; Default Value: 100
+; Development Value: 1000
+; Production Value: 1000
+; http://php.net/session.gc-divisor
+session.gc_divisor = 1000
+
+; After this number of seconds, stored data will be seen as 'garbage' and
+; cleaned up by the garbage collection process.
+; http://php.net/session.gc-maxlifetime
+session.gc_maxlifetime = 1440
+
+; NOTE: If you are using the subdirectory option for storing session files
+;       (see session.save_path above), then garbage collection does *not*
+;       happen automatically.  You will need to do your own garbage
+;       collection through a shell script, cron entry, or some other method.
+;       For example, the following script would is the equivalent of
+;       setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
+;          find /path/to/sessions -cmin +24 -type f | xargs rm
+
+; Check HTTP Referer to invalidate externally stored URLs containing ids.
+; HTTP_REFERER has to contain this substring for the session to be
+; considered as valid.
+; http://php.net/session.referer-check
+session.referer_check =
+
+; How many bytes to read from the file.
+; http://php.net/session.entropy-length
+;session.entropy_length = 32
+
+; Specified here to create the session id.
+; http://php.net/session.entropy-file
+; Defaults to /dev/urandom
+; On systems that don't have /dev/urandom but do have /dev/arandom, this will default to /dev/arandom
+; If neither are found at compile time, the default is no entropy file.
+; On windows, setting the entropy_length setting will activate the
+; Windows random source (using the CryptoAPI)
+;session.entropy_file = /dev/urandom
+
+; Set to {nocache,private,public,} to determine HTTP caching aspects
+; or leave this empty to avoid sending anti-caching headers.
+; http://php.net/session.cache-limiter
+session.cache_limiter = nocache
+
+; Document expires after n minutes.
+; http://php.net/session.cache-expire
+session.cache_expire = 180
+
+; trans sid support is disabled by default.
+; Use of trans sid may risk your users security.
+; Use this option with caution.
+; - User may send URL contains active session ID
+;   to other person via. email/irc/etc.
+; - URL that contains active session ID may be stored
+;   in publicly accessible computer.
+; - User may access your site with the same session ID
+;   always using URL stored in browser's history or bookmarks.
+; http://php.net/session.use-trans-sid
+session.use_trans_sid = 0
+
+; Select a hash function for use in generating session ids.
+; Possible Values
+;   0  (MD5 128 bits)
+;   1  (SHA-1 160 bits)
+; This option may also be set to the name of any hash function supported by
+; the hash extension. A list of available hashes is returned by the hash_algos()
+; function.
+; http://php.net/session.hash-function
+session.hash_function = 0
+
+; Define how many bits are stored in each character when converting
+; the binary hash data to something readable.
+; Possible values:
+;   4  (4 bits: 0-9, a-f)
+;   5  (5 bits: 0-9, a-v)
+;   6  (6 bits: 0-9, a-z, A-Z, "-", ",")
+; Default Value: 4
+; Development Value: 5
+; Production Value: 5
+; http://php.net/session.hash-bits-per-character
+session.hash_bits_per_character = 5
+
+; The URL rewriter will look for URLs in a defined set of HTML tags.
+; form/fieldset are special; if you include them here, the rewriter will
+; add a hidden <input> field with the info which is otherwise appended
+; to URLs.  If you want XHTML conformity, remove the form entry.
+; Note that all valid entries require a "=", even if no value follows.
+; Default Value: "a=href,area=href,frame=src,form=,fieldset="
+; Development Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+; Production Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
+; http://php.net/url-rewriter.tags
+url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=fakeentry"
+
+; Enable upload progress tracking in $_SESSION
+; Default Value: On
+; Development Value: On
+; Production Value: On
+; http://php.net/session.upload-progress.enabled
+;session.upload_progress.enabled = On
+
+; Cleanup the progress information as soon as all POST data has been read
+; (i.e. upload completed).
+; Default Value: On
+; Development Value: On
+; Production Value: On
+; http://php.net/session.upload-progress.cleanup
+;session.upload_progress.cleanup = On
+
+; A prefix used for the upload progress key in $_SESSION
+; Default Value: "upload_progress_"
+; Development Value: "upload_progress_"
+; Production Value: "upload_progress_"
+; http://php.net/session.upload-progress.prefix
+;session.upload_progress.prefix = "upload_progress_"
+
+; The index name (concatenated with the prefix) in $_SESSION
+; containing the upload progress information
+; Default Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; Development Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; Production Value: "PHP_SESSION_UPLOAD_PROGRESS"
+; http://php.net/session.upload-progress.name
+;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"
+
+; How frequently the upload progress should be updated.
+; Given either in percentages (per-file), or in bytes
+; Default Value: "1%"
+; Development Value: "1%"
+; Production Value: "1%"
+; http://php.net/session.upload-progress.freq
+;session.upload_progress.freq =  "1%"
+
+; The minimum delay between updates, in seconds
+; Default Value: 1
+; Development Value: 1
+; Production Value: 1
+; http://php.net/session.upload-progress.min-freq
+;session.upload_progress.min_freq = "1"
+
+[MSSQL]
+; Allow or prevent persistent links.
+mssql.allow_persistent = On
+
+; Maximum number of persistent links.  -1 means no limit.
+mssql.max_persistent = -1
+
+; Maximum number of links (persistent+non persistent).  -1 means no limit.
+mssql.max_links = -1
+
+; Minimum error severity to display.
+mssql.min_error_severity = 10
+
+; Minimum message severity to display.
+mssql.min_message_severity = 10
+
+; Compatibility mode with old versions of PHP 3.0.
+mssql.compatability_mode = Off
+
+; Connect timeout
+;mssql.connect_timeout = 5
+
+; Query timeout
+;mssql.timeout = 60
+
+; Valid range 0 - 2147483647.  Default = 4096.
+;mssql.textlimit = 4096
+
+; Valid range 0 - 2147483647.  Default = 4096.
+;mssql.textsize = 4096
+
+; Limits the number of records in each batch.  0 = all records in one batch.
+;mssql.batchsize = 0
+
+; Specify how datetime and datetim4 columns are returned
+; On => Returns data converted to SQL server settings
+; Off => Returns values as YYYY-MM-DD hh:mm:ss
+;mssql.datetimeconvert = On
+
+; Use NT authentication when connecting to the server
+mssql.secure_connection = Off
+
+; Specify max number of processes. -1 = library default
+; msdlib defaults to 25
+; FreeTDS defaults to 4096
+;mssql.max_procs = -1
+
+; Specify client character set.
+; If empty or not set the client charset from freetds.conf is used
+; This is only used when compiled with FreeTDS
+;mssql.charset = "ISO-8859-1"
+
+[Assertion]
+; Assert(expr); active by default.
+; http://php.net/assert.active
+;assert.active = On
+
+; Issue a PHP warning for each failed assertion.
+; http://php.net/assert.warning
+;assert.warning = On
+
+; Don't bail out by default.
+; http://php.net/assert.bail
+;assert.bail = Off
+
+; User-function to be called if an assertion fails.
+; http://php.net/assert.callback
+;assert.callback = 0
+
+; Eval the expression with current error_reporting().  Set to true if you want
+; error_reporting(0) around the eval().
+; http://php.net/assert.quiet-eval
+;assert.quiet_eval = 0
+
+[COM]
+; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs
+; http://php.net/com.typelib-file
+;com.typelib_file =
+
+; allow Distributed-COM calls
+; http://php.net/com.allow-dcom
+;com.allow_dcom = true
+
+; autoregister constants of a components typlib on com_load()
+; http://php.net/com.autoregister-typelib
+;com.autoregister_typelib = true
+
+; register constants casesensitive
+; http://php.net/com.autoregister-casesensitive
+;com.autoregister_casesensitive = false
+
+; show warnings on duplicate constant registrations
+; http://php.net/com.autoregister-verbose
+;com.autoregister_verbose = true
+
+; The default character set code-page to use when passing strings to and from COM objects.
+; Default: system ANSI code page
+;com.code_page=
+
+[mbstring]
+; language for internal character representation.
+; http://php.net/mbstring.language
+;mbstring.language = Japanese
+
+; internal/script encoding.
+; Some encoding cannot work as internal encoding.
+; (e.g. SJIS, BIG5, ISO-2022-*)
+; http://php.net/mbstring.internal-encoding
+;mbstring.internal_encoding = EUC-JP
+
+; http input encoding.
+; http://php.net/mbstring.http-input
+;mbstring.http_input = auto
+
+; http output encoding. mb_output_handler must be
+; registered as output buffer to function
+; http://php.net/mbstring.http-output
+;mbstring.http_output = SJIS
+
+; enable automatic encoding translation according to
+; mbstring.internal_encoding setting. Input chars are
+; converted to internal encoding by setting this to On.
+; Note: Do _not_ use automatic encoding translation for
+;       portable libs/applications.
+; http://php.net/mbstring.encoding-translation
+;mbstring.encoding_translation = Off
+
+; automatic encoding detection order.
+; auto means
+; http://php.net/mbstring.detect-order
+;mbstring.detect_order = auto
+
+; substitute_character used when character cannot be converted
+; one from another
+; http://php.net/mbstring.substitute-character
+;mbstring.substitute_character = none;
+
+; overload(replace) single byte functions by mbstring functions.
+; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),
+; etc. Possible values are 0,1,2,4 or combination of them.
+; For example, 7 for overload everything.
+; 0: No overload
+; 1: Overload mail() function
+; 2: Overload str*() functions
+; 4: Overload ereg*() functions
+; http://php.net/mbstring.func-overload
+;mbstring.func_overload = 0
+
+; enable strict encoding detection.
+;mbstring.strict_detection = Off
+
+; This directive specifies the regex pattern of content types for which mb_output_handler()
+; is activated.
+; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml)
+;mbstring.http_output_conv_mimetype=
+
+[gd]
+; Tell the jpeg decode to ignore warnings and try to create
+; a gd image. The warning will then be displayed as notices
+; disabled by default
+; http://php.net/gd.jpeg-ignore-warning
+;gd.jpeg_ignore_warning = 0
+
+[exif]
+; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.
+; With mbstring support this will automatically be converted into the encoding
+; given by corresponding encode setting. When empty mbstring.internal_encoding
+; is used. For the decode settings you can distinguish between motorola and
+; intel byte order. A decode setting cannot be empty.
+; http://php.net/exif.encode-unicode
+;exif.encode_unicode = ISO-8859-15
+
+; http://php.net/exif.decode-unicode-motorola
+;exif.decode_unicode_motorola = UCS-2BE
+
+; http://php.net/exif.decode-unicode-intel
+;exif.decode_unicode_intel    = UCS-2LE
+
+; http://php.net/exif.encode-jis
+;exif.encode_jis =
+
+; http://php.net/exif.decode-jis-motorola
+;exif.decode_jis_motorola = JIS
+
+; http://php.net/exif.decode-jis-intel
+;exif.decode_jis_intel    = JIS
+
+[Tidy]
+; The path to a default tidy configuration file to use when using tidy
+; http://php.net/tidy.default-config
+;tidy.default_config = /usr/local/lib/php/default.tcfg
+
+; Should tidy clean and repair output automatically?
+; WARNING: Do not use this option if you are generating non-html content
+; such as dynamic images
+; http://php.net/tidy.clean-output
+tidy.clean_output = Off
+
+[soap]
+; Enables or disables WSDL caching feature.
+; http://php.net/soap.wsdl-cache-enabled
+soap.wsdl_cache_enabled=1
+
+; Sets the directory name where SOAP extension will put cache files.
+; http://php.net/soap.wsdl-cache-dir
+soap.wsdl_cache_dir="/tmp"
+
+; (time to live) Sets the number of second while cached file will be used
+; instead of original one.
+; http://php.net/soap.wsdl-cache-ttl
+soap.wsdl_cache_ttl=86400
+
+; Sets the size of the cache limit. (Max. number of WSDL files to cache)
+soap.wsdl_cache_limit = 5
+
+[sysvshm]
+; A default size of the shared memory segment
+;sysvshm.init_mem = 10000
+
+[ldap]
+; Sets the maximum number of open links or -1 for unlimited.
+ldap.max_links = -1
+
+[mcrypt]
+; For more information about mcrypt settings see http://php.net/mcrypt-module-open
+
+; Directory where to load mcrypt algorithms
+; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
+;mcrypt.algorithms_dir=
+
+; Directory where to load mcrypt modes
+; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)
+;mcrypt.modes_dir=
+
+[dba]
+;dba.default_handler=
+
+[curl]
+; A default value for the CURLOPT_CAINFO option. This is required to be an
+; absolute path.
+;curl.cainfo =
+
+; Local Variables:
+; tab-width: 4
+; End:
